openapi: 3.0.1
x-explorer-enabled: false
info:
  description: This application will be used by HaaS customers as an integration point with HAY Bank
  title: B2B Operations API
  version: 0.0.1
servers:
  - url: http://localhost:8080
    description: Generated server url
tags:
  - description: Set of APIs related to managing PayIDs
    name: PayID API
  - description: Set of APIs related to BPAY functionality
    name: BPAY API
  - description: Set of APIs related to managing savings or money jars through Stacks
    name: Stacks API
  - description: Set of APIs related to managing PayTo operations
    name: PayTo API
  - description: Set of APIs related to managing Transactions
    name: Transactions API
  - description: Set of APIs related to managing Scheduled and Recurring Payments
    name: Scheduled Payments API
  - description: Set of APIs related to managing KYC checks during onboarding
    name: KYC API
  - description: Set of APIs related to managing Customers
    name: Customers API
  - description: Set of APIs related to managing outgoing Direct Debit instructions
    name: Direct Debits API
  - description: Reference API for Merchant Category Codes (MCCs)
    name: Merchant Category Codes API
  - description: Set of APIs related to managing Client Liquidity
    name: Liquidity API
  - description: Set of assorted Utility APIs allowing creation of mock transactions
    name: Utilities API
  - description: Set of APIs related to managing Cards
    name: Cards API
  - description: Set of APIs related to exchanging external tokens for Shaype tokens to interact with our GraphQL APIs
    name: Tokens API
  - description: Set of APIs related to managing Accounts
    name: Accounts API
  - description: Set of APIs related to managing Groups (for Joint and Business accounts)
    name: Groups API
  - description: Set of APIs related to managing card Authorisation Holds
    name: Holds API
paths:
  /v0/accounts/{accountId}:
    get:
      security:
        - bearer-key: [ ]
      operationId: getHayAccount
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
        - description: Includes Custom Data with returned Account object
          example: '`customData`'
          in: query
          name: expand
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HayAccount'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get Account by ID
      tags:
        - Accounts API
  /v0/accounts/{accountId}/block:
    post:
      operationId: blockAccount
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockAccountRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Block Account and Customer
      tags:
        - Accounts API
  /v0/accounts/{accountId}/cards:
    get:
      operationId: getCardsForAccountId
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HayCard'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get all Cards by Account ID
      tags:
        - Accounts API
  /v0/accounts/{accountId}/close:
    post:
      operationId: closeAccount
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloseAccountResponse'
          description: Accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloseAccountResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Closes an account
      tags:
        - Accounts API
  /v0/accounts/{accountId}/holds:
    get:
      operationId: getPendingHolds
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorisationHold'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get all Authorisation Holds by Account ID
      tags:
        - Accounts API
  /v0/accounts/{accountId}/max-balance:
    patch:
      operationId: updateMaxBalanceLimit
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMaxBalanceLimitRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Update Account max balance
      tags:
        - Accounts API
  /v0/accounts/{accountId}/overdraft:
    patch:
      operationId: updateOverdraftLimit
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOverdraftLimitRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Update Account overdraft limit
      tags:
        - Accounts API
  /v0/accounts/{accountId}/riskLevel:
    get:
      operationId: getAccountRiskLevel
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskLevelResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get Risk Level by Account ID
      tags:
        - Accounts API
    patch:
      operationId: changeAccountRiskLevel
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeHayAccountRiskLevelRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Update Account Risk Level
      tags:
        - Accounts API
  /v0/accounts/{accountId}/scheduledPayments:
    get:
      operationId: getScheduledPayments
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HayScheduledPayment'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get Scheduled Payments by Account ID
      tags:
        - Scheduled Payments API
  /v0/accounts/{accountId}/scheduledPayments/{paymentId}:
    get:
      operationId: getScheduledPaymentById
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
        - description: Unique identifier (UUID) of the Scheduled Payment
          in: path
          name: paymentId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HayScheduledPayment'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get Scheduled Payment by Payment ID for an Account
      tags:
        - Scheduled Payments API
  /v0/accounts/{accountId}/scheduledPayments/{paymentId}/cancel:
    post:
      operationId: cancelScheduledPayment
      parameters:
        - description: Unique identifier (UUID) of the Scheduled Payment
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
        - description: Unique identifier (UUID) of the Scheduled Payment
          in: path
          name: paymentId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Cancel Scheduled Payment
      tags:
        - Scheduled Payments API
  /v0/accounts/{accountId}/stacks:
    get:
      operationId: getAllStacks
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
        - description: Includes closed Stacks if set to true (default to false if no option provided)
          in: query
          name: includeClosed
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HayStack'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get all Stacks by Account ID
      tags:
        - Stacks API
    post:
      operationId: createStack
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHayStackRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Create new stack
      tags:
        - Stacks API
  /v0/accounts/{accountId}/stacks/transactions:
    get:
      description: Retrieves all transactions across all Stacks
      operationId: getAllStackTransactions
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
        - description: Offset used for paging results
          in: query
          name: offset
          required: true
          schema:
            type: integer
        - description: List fetch limit, value between 1 and 1000
          in: query
          name: limit
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HayStackTransaction'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get all Stack Transactions by Account ID
      tags:
        - Stacks API
    post:
      operationId: stackToStackTransfer
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StackToStackTransferRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
                enum:
                  - ACCEPTED
                  - INTERNAL_ERROR
                  - REFUSED_LIMIT_BREACH
                  - REFUSED_FRAUD
                  - REFUSED_CUSTOMER_PREFERENCE
                  - REFUSED_INSUFFICIENT_FUNDS
                  - REFUSED_ACCOUNT_BLOCKED
                  - REFUSED_RECIPIENT_ACCOUNT_BLOCKED
                  - REFUSED_ACCOUNT_CLOSED
                  - REFUSED_RECIPIENT_ACCOUNT_CLOSED
                  - REFUSED_INVALID_PAY_ID
                  - UNKNOWN
                  - REFUSED_DAILY_TRANSFERS_OUT_LIMIT_BREACHED
                  - REFUSED_MAX_BALANCE_EXCEEDED
                  - REFUSED_TOTAL_INBOUND_DIRECT_DEBIT_DAILY_LIMIT_BREACHED
                  - REFUSED_TOTAL_OUTBOUND_BPAY_DAILY_LIMIT_BREACHED
                  - REFUSED_TOTAL_NET_VISA_DAILY_LIMIT_BREACHED
                  - REFUSED_TOTAL_NON_SCHEME_DAILY_LIMIT_BREACHED
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Transfer funds from Stack to Stack of an Account
      tags:
        - Stacks API
  /v0/accounts/{accountId}/stacks/{stackId}:
    put:
      operationId: updateStack
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
        - description: Unique identifier (UUID) of the Stack
          in: path
          name: stackId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStackRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateStackResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Update Stack
      tags:
        - Stacks API
  /v0/accounts/{accountId}/stacks/{stackId}/close:
    post:
      description: Funds will be transferred into account.
      operationId: closeStack
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
        - description: Unique identifier (UUID) of the Stack
          in: path
          name: stackId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Close Stack
      tags:
        - Stacks API
  /v0/accounts/{accountId}/stacks/{stackId}/transactions:
    get:
      operationId: getTransactionsForStack
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
        - description: Unique identifier (UUID) of the Stack
          in: path
          name: stackId
          required: true
          schema:
            type: string
            format: uuid
        - description: Offset used for paging results
          in: query
          name: offset
          required: true
          schema:
            type: integer
        - description: List fetch limit, value between 1 and 1000
          in: query
          name: limit
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HayStackTransaction'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get all Stack Transactions by Stack ID
      tags:
        - Stacks API
  /v0/accounts/{accountId}/stacks/{stackId}/transfer-in:
    post:
      operationId: accountToStackTransfer
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
        - description: Unique identifier (UUID) of the Stack
          in: path
          name: stackId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountToStackTransferRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
                enum:
                  - ACCEPTED
                  - INTERNAL_ERROR
                  - REFUSED_LIMIT_BREACH
                  - REFUSED_FRAUD
                  - REFUSED_CUSTOMER_PREFERENCE
                  - REFUSED_INSUFFICIENT_FUNDS
                  - REFUSED_ACCOUNT_BLOCKED
                  - REFUSED_RECIPIENT_ACCOUNT_BLOCKED
                  - REFUSED_ACCOUNT_CLOSED
                  - REFUSED_RECIPIENT_ACCOUNT_CLOSED
                  - REFUSED_INVALID_PAY_ID
                  - UNKNOWN
                  - REFUSED_DAILY_TRANSFERS_OUT_LIMIT_BREACHED
                  - REFUSED_MAX_BALANCE_EXCEEDED
                  - REFUSED_TOTAL_INBOUND_DIRECT_DEBIT_DAILY_LIMIT_BREACHED
                  - REFUSED_TOTAL_OUTBOUND_BPAY_DAILY_LIMIT_BREACHED
                  - REFUSED_TOTAL_NET_VISA_DAILY_LIMIT_BREACHED
                  - REFUSED_TOTAL_NON_SCHEME_DAILY_LIMIT_BREACHED
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Transfer funds from Account to Stack
      tags:
        - Stacks API
  /v0/accounts/{accountId}/stacks/{stackId}/transfer-out:
    post:
      operationId: stackToAccountTransfer
      parameters:
        - description: Account ID
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
        - description: Stack ID
          in: path
          name: stackId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StackToAccountTransferRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
                enum:
                  - ACCEPTED
                  - INTERNAL_ERROR
                  - REFUSED_LIMIT_BREACH
                  - REFUSED_FRAUD
                  - REFUSED_CUSTOMER_PREFERENCE
                  - REFUSED_INSUFFICIENT_FUNDS
                  - REFUSED_ACCOUNT_BLOCKED
                  - REFUSED_RECIPIENT_ACCOUNT_BLOCKED
                  - REFUSED_ACCOUNT_CLOSED
                  - REFUSED_RECIPIENT_ACCOUNT_CLOSED
                  - REFUSED_INVALID_PAY_ID
                  - UNKNOWN
                  - REFUSED_DAILY_TRANSFERS_OUT_LIMIT_BREACHED
                  - REFUSED_MAX_BALANCE_EXCEEDED
                  - REFUSED_TOTAL_INBOUND_DIRECT_DEBIT_DAILY_LIMIT_BREACHED
                  - REFUSED_TOTAL_OUTBOUND_BPAY_DAILY_LIMIT_BREACHED
                  - REFUSED_TOTAL_NET_VISA_DAILY_LIMIT_BREACHED
                  - REFUSED_TOTAL_NON_SCHEME_DAILY_LIMIT_BREACHED
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Transfer funds from Stack to Account
      tags:
        - Stacks API
  /v0/accounts/{accountId}/transfer:
    post:
      deprecated: true
      description: Please use `v1/accounts/{accountId}/transfer` instead.
      operationId: makeTransferV0
      parameters:
        - description: Account ID
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferOutRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionOutcome'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Initiate Cash Transfer (DEPRECATED)
      tags:
        - Accounts API
  /v0/accounts/{accountId}/unblock:
    post:
      operationId: unblockAccount
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnblockAccountRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Unblock Account
      tags:
        - Accounts API
  /v0/cards/create:
    post:
      operationId: createHayCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHayCardRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HayCard'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Create Card for Customer
      tags:
        - Cards API
  /v0/cards/{cardId}:
    get:
      operationId: getCard
      parameters:
        - description: Unique identifier (UUID) of the Card
          in: path
          name: cardId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HayCard'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get Card by ID
      tags:
        - Cards API
  /v0/cards/{cardId}/activate:
    post:
      description: This action is only valid for cards with a status of AWAITING_ACTIVATION.
      operationId: activateCard
      parameters:
        - description: Unique identifier (UUID) of the Card
          in: path
          name: cardId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Activate Card
      tags:
        - Cards API
  /v0/cards/{cardId}/block:
    post:
      operationId: blockCard
      parameters:
        - description: Unique identifier (UUID) of the Card
          in: path
          name: cardId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockCardRequestBody'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Block Card
      tags:
        - Cards API
  /v0/cards/{cardId}/cancel:
    post:
      operationId: cancelCard
      parameters:
        - description: Unique identifier (UUID) of the Card
          in: path
          name: cardId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Cancel Card
      tags:
        - Cards API
  /v0/cards/{cardId}/convert:
    post:
      description: Action providing the capability to convert a card from Virtual to Physical
      operationId: convertCard
      parameters:
        - description: Unique identifier (UUID) of the Card
          in: path
          name: cardId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HayCard'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Convert Card
      tags:
        - Cards API
  /v0/cards/{cardId}/digital-wallets:
    get:
      description: This endpoint allows to retrieve digital wallet tokens and primaryAccountIdentifier to determine if a card has been digitally provisioned on a devices wallet.
      operationId: getDigitalWalletDetails
      parameters:
        - description: Unique identifier (UUID) of the Card
          in: path
          name: cardId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalWalletDetails'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get wallets by Card ID
      tags:
        - Cards API
  /v0/cards/{cardId}/oem-provisioning-data:
    get:
      description: This endpoints allows to retrieve encrypted OEM provisioning data used with wallet push provisioning and card details SDKs.
      operationId: getOemProvisioningData
      parameters:
        - description: Unique identifier (UUID) of the Card
          in: path
          name: cardId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OemProvisioningData'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get provisioning data by Card ID
      tags:
        - Cards API
  /v0/cards/{cardId}/payment-preferences:
    get:
      operationId: getPaymentPreferences
      parameters:
        - description: Unique identifier (UUID) of the Card
          in: path
          name: cardId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardPaymentPreferences'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get preferences by Card ID
      tags:
        - Cards API
    patch:
      description: Endpoint providing the capability to update card payment preferences. This will not allow for the blocking/unblocking of Cards or PIN (blocking a card and unblocking a PIN is possible through other endpoints).
      operationId: updatePaymentPreferences
      parameters:
        - description: Unique identifier (UUID) of the Card
          in: path
          name: cardId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePaymentPreferencesRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardPaymentPreferences'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Update Card preferences
      tags:
        - Cards API
  /v0/cards/{cardId}/pin:
    put:
      description: Action providing the capability to change a card PIN. To use this endpoint please contact your CSM, this functionality requires agreement to be used.
      operationId: changeCardPin
      parameters:
        - description: Unique identifier (UUID) of the Card
          in: path
          name: cardId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeCardPinRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Change Card PIN
      tags:
        - Cards API
  /v0/cards/{cardId}/pin/status:
    get:
      description: Action providing the capability to view Card PIN status.
      operationId: getCardPinStatus
      parameters:
        - description: Unique identifier (UUID) of the Card
          in: path
          name: cardId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardPinStatus'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get Card PIN status
      tags:
        - Cards API
  /v0/cards/{cardId}/pin/unblock:
    post:
      description: Action providing the capability to unblock a card PIN so that the cardholder is able to attempt to enter their PIN  again. Blocking of a card’s PIN occurs after the cardholder has incorrectly entered their card PIN 3 times.
      operationId: unblockCardPin
      parameters:
        - description: Unique identifier (UUID) of the Card
          in: path
          name: cardId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Unblock Card PIN
      tags:
        - Cards API
  /v0/cards/{cardId}/re-issue:
    post:
      operationId: reissueHayCard
      parameters:
        - description: Unique identifier (UUID) of the Card
          in: path
          name: cardId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReissueHayCardRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HayCard'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Replace Card
      tags:
        - Cards API
  /v0/cards/{cardId}/renew:
    post:
      description: Action providing the capability to renew a card
      operationId: renewCard
      parameters:
        - description: Unique identifier (UUID) of the Card
          in: path
          name: cardId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenewCardRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HayCard'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Renew Card
      tags:
        - Cards API
  /v0/cards/{cardId}/rewards:
    post:
      description: Eligible card transactions will automatically count toward rewards provided by rewards platform
      operationId: rewards
      parameters:
        - description: Unique identifier (UUID) of the Card
          in: path
          name: cardId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardRewardsStatusBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardRewardsStatusBody'
          description: Card was already enrolled.
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardRewardsStatusBody'
          description: Card successfully enrolled.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardRewardsStatusBody'
          description: Too many requests
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Enrol card to rewards
      tags:
        - Cards API
  /v0/cards/{cardId}/unblock:
    post:
      operationId: unblockCard
      parameters:
        - description: Unique identifier (UUID) of the Card
          in: path
          name: cardId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnblockCardRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Unblock Card
      tags:
        - Cards API
  /v0/customers:
    get:
      operationId: getAllCustomers
      parameters:
        - description: Offset used for paging results
          in: query
          name: offset
          required: true
          schema:
            type: integer
            format: int32
        - description: List fetch limit
          in: query
          name: limit
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HayCustomer'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get all Customers
      tags:
        - Customers API
  /v0/customers/create:
    post:
      security:
        - bearer-key: [ ]
      operationId: createHayCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHayCustomerRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HayCustomer'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Create Customer
      tags:
        - Customers API
  /v0/customers/search:
    post:
      operationId: searchCustomers
      parameters:
        - description: List fetch limit, value between 1 and 1000
          in: query
          name: limit
          required: true
          schema:
            type: integer
            format: int32
        - description: Offset used for paging results
          in: query
          name: offset
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchCustomersRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HayCustomer'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Search Customers
      tags:
        - Customers API
  /v0/customers/{customerHayId}/account:
    post:
      operationId: createHayAccount
      parameters:
        - description: Unique identifier (UUID) of the Customer
          in: path
          name: customerHayId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHayAccountRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HayAccount'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              examples:
                Not enough permissions:
                  description: Not enough permissions
                  value:
                    message: 'PERMISSION_DENIED: Account cannot be created for customer with id eed1e718-b1ca-4b94-a508-3d2d41c2e96b as their status is currently BLOCKED'
                    details: Please refer to the API documentation or contact Shaype for more info with the traceId.
                    status: '422'
                    traceId: b24daeb7-4242-4ff1-ba50-9825d5deedd8
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Create Account for Customer
      tags:
        - Customers API
  /v0/customers/{customerHayId}/accounts:
    get:
      operationId: getAccountsForCustomerId
      parameters:
        - description: Unique identifier (UUID) of the Customer
          in: path
          name: customerHayId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HayAccount'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get Account by Customer ID
      tags:
        - Customers API
  /v0/customers/{customerHayId}/cards:
    get:
      operationId: getCardsForCustomerId
      parameters:
        - description: Unique identifier (UUID) of the Customer
          in: path
          name: customerHayId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HayCard'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get Cards by Customer ID
      tags:
        - Customers API
  /v0/customers/{customerId}:
    get:
      operationId: getHayCustomerById
      parameters:
        - description: Unique identifier (UUID) of the Customer
          in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HayCustomer'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get Customer by ID
      tags:
        - Customers API
    patch:
      operationId: updateCustomer
      parameters:
        - description: Unique identifier (UUID) of the Customer
          in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HayCustomer'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Update Customer details
      tags:
        - Customers API
  /v0/customers/{customerId}/block:
    post:
      operationId: blockCustomer
      parameters:
        - description: Unique identifier (UUID) of the customer
          in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockCustomerRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Block Customer
      tags:
        - Customers API
  /v0/customers/{customerId}/status:
    patch:
      operationId: changeHayCustomerStatus
      parameters:
        - description: Unique identifier (UUID) of the Customer
          in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeHayCustomerStatusRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HayCustomer'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Update Customer status
      tags:
        - Customers API
  /v0/customers/{customerId}/unblock:
    post:
      operationId: unblockCustomer
      parameters:
        - description: Unique identifier (UUID) of the customer
          in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnblockCustomerRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Unblock Customer
      tags:
        - Customers API
  /v0/direct-debits:
    get:
      operationId: getDirectDebitsV0
      parameters:
        - description: DateTime in UTC format for the start date range of the Transaction search
          in: query
          name: fromUtc
          required: true
          schema:
            type: string
            format: date
        - description: DateTime in UTC format for the end date range of the Transaction search
          in: query
          name: toUtc
          required: true
          schema:
            type: string
            format: date
        - description: Offset used for paging results
          in: query
          name: offset
          required: true
          schema:
            type: integer
            format: int32
        - description: List fetch limit, value between 1 and 1000
          in: query
          name: limit
          required: true
          schema:
            type: integer
            format: int32
        - description: |-
            Status of the Direct Debits. Possible values:
             * **ACCEPTED**: Direct Debit has been accepted and awaiting submission to next Direct Entry payment batch
             * **RETURNED**: Direct Debit has been Returned from recipient financial institution
             * **SUBMITTED**: Direct Debit has been accepted and submitted in Direct Entry payment batch
          in: query
          name: status
          required: false
          schema:
            type: string
            enum:
              - ACCEPTED
              - SUBMITTED
              - RETURNED
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeTransactionDetails'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get outbound Direct Debits by date
      tags:
        - Direct Debits API
    post:
      operationId: createDirectDebitV0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDirectDebitRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectDebitResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectDebitResponse'
          description: Invalid Input
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Create outbound Direct Debit
      tags:
        - Direct Debits API
  /v0/direct-debits/{transactionId}:
    get:
      operationId: getDirectDebitV0
      parameters:
        - description: Unique identifier (UUID) of the Transaction
          in: path
          name: transactionId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectDebitResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get outbound Direct Debit by ID
      tags:
        - Direct Debits API
  /v0/groups/create:
    post:
      operationId: createHayGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHayGroupRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HayGroup'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Create Group
      tags:
        - Groups API
  /v0/groups/{groupHayId}:
    get:
      operationId: getHayJointAccountByGroupHayId
      parameters:
        - description: Unique identifier (UUID) of the Group
          in: path
          name: groupHayId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HayJointAccount'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get Account by Group ID
      tags:
        - Groups API
    patch:
      operationId: updateGroup
      parameters:
        - description: Unique identifier (UUID) of the Group
          in: path
          name: groupHayId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HayGroup'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Update Group details
      tags:
        - Groups API
  /v0/groups/{groupHayId}/account:
    post:
      operationId: createHayAccountForGroup
      parameters:
        - description: Unique identifier (UUID) of the Group
          in: path
          name: groupHayId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHayAccountForGroupRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HayJointAccount'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              examples:
                Not enough permissions:
                  description: Not enough permissions
                  value:
                    message: 'PERMISSION_DENIED: Account cannot be created for group with id f64f41eb-41f4-4619-9fc4-68d292aeb0f9, all members of the group should have an ACTIVE status'
                    details: Please refer to the API documentation or contact Shaype for more info with the traceId.
                    status: '422'
                    traceId: b24daeb7-4242-4ff1-ba50-9825d5deedd8
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Create Account for Group
      tags:
        - Groups API
  /v0/groups/{groupHayId}/addCustomers:
    post:
      operationId: addCustomersToGroup
      parameters:
        - description: Unique identifier (UUID) of the Group
          in: path
          name: groupHayId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCustomersToGroupRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HayJointAccount'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Add Customers to Group
      tags:
        - Groups API
  /v0/mccs:
    get:
      operationId: getAllMerchantCategoryCodes
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HayMerchantCategoryCode'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get all Merchant Category Codes
      tags:
        - Merchant Category Codes API
  /v0/payids/{payId}:
    get:
      operationId: getPayId
      parameters:
        - description: |-
            PayID type: 
             * **EMAIL**: Email Address
             * **INDIVIDUAL_AUSTRALIAN_BUSINESS**: Australian business identifier
             * **ORGANISATION**: Organisation identifier
             * **TELEPHONE**: Telephone number
          in: query
          name: payIdType
          required: true
          schema:
            type: string
            enum:
              - EMAIL
              - TELEPHONE
              - INDIVIDUAL_AUSTRALIAN_BUSINESS
              - ORGANISATION
        - description: PayID
          in: path
          name: payId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayIdResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get PayID details
      tags:
        - PayID API
  /v0/payids/{payId}/availability:
    get:
      operationId: getPayIdAvailability
      parameters:
        - description: PayID
          in: path
          name: payId
          required: true
          schema:
            type: string
        - description: |-
            PayID type: 
             * **EMAIL**: Email Address
             * **INDIVIDUAL_AUSTRALIAN_BUSINESS**: Australian business identifier
             * **ORGANISATION**: Organisation identifier
             * **TELEPHONE**: Telephone number
          in: query
          name: payIdType
          required: false
          schema:
            type: string
            enum:
              - EMAIL
              - TELEPHONE
              - INDIVIDUAL_AUSTRALIAN_BUSINESS
              - ORGANISATION
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayIdAvailabilityDetailsResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Check PayID availability
      tags:
        - PayID API
  /v0/payids/{payId}/deregister-history:
    get:
      operationId: getPayIdDeregisterHistory
      parameters:
        - description: PayID
          in: path
          name: payId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PayIdDeregisterDetailsResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get PayID de-register history
      tags:
        - PayID API
  /v0/payids/{payId}/details:
    post:
      operationId: updatePayIdDetails
      parameters:
        - description: PayID
          in: path
          name: payId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePayIdDetailsRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Update PayID details
      tags:
        - PayID API
  /v0/payids/{payId}/resolve:
    get:
      operationId: resolvePayId
      parameters:
        - description: PayID
          in: path
          name: payId
          required: true
          schema:
            type: string
        - description: |-
            PayID type: 
             * **EMAIL**: Email Address
             * **INDIVIDUAL_AUSTRALIAN_BUSINESS**: Australian business identifier
             * **ORGANISATION**: Organisation identifier
             * **TELEPHONE**: Telephone number
          in: query
          name: payIdType
          required: false
          schema:
            type: string
            enum:
              - EMAIL
              - TELEPHONE
              - INDIVIDUAL_AUSTRALIAN_BUSINESS
              - ORGANISATION
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayIdAvailabilityDetailsResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Resolve PayID to bank account
      tags:
        - PayID API
  /v0/payids/{payId}/status:
    patch:
      operationId: updatePayIdStatus
      parameters:
        - description: PayID
          in: path
          name: payId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePayIdStatusRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Update PayID status
      tags:
        - PayID API
  /v0/tokens/elevate:
    post:
      operationId: elevateExternalToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElevateExternalTokenRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElevateExternalTokenResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Retrieve an elevation header to be used for GraphQL APIs that require step up access
      tags:
        - Tokens API
  /v0/tokens/exchange:
    post:
      operationId: exchangeExternalToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExchangeExternalTokenRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeExternalTokenResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Exchange External Token for a Shaype token to be used when calling our GraphQL APIs
      tags:
        - Tokens API
  /v0/transactions/credit/create:
    post:
      deprecated: true
      description: 'If a limit is breached, REFUSED_LIMIT_BREACH outcome will be returned. To get the detailed limit that has been breached please use V1 of this endpoint. That will return one of the below outcomes instead of REFUSED_LIMIT_BREACH: REFUSED_DAILY_TRANSFERS_OUT_LIMIT_BREACHED, REFUSED_MAX_BALANCE_EXCEEDED.'
      operationId: createCreditTransactionV0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionOutcome'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Create Credit Transaction for Account (DEPRECATED)
      tags:
        - Transactions API
  /v0/transactions/debit/create:
    post:
      deprecated: true
      description: 'If a limit is breached, REFUSED_LIMIT_BREACH outcome will be returned. To get the detailed limit that has been breached please use V1 of this endpoint. That will return one of the below outcomes instead of REFUSED_LIMIT_BREACH: REFUSED_DAILY_TRANSFERS_OUT_LIMIT_BREACHED, REFUSED_MAX_BALANCE_EXCEEDED.'
      operationId: createDebitTransactionV0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionOutcome'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Create Debit Transaction for Account (DEPRECATED)
      tags:
        - Transactions API
  /v0/transactions/search:
    post:
      operationId: searchTransactions
      parameters:
        - description: List fetch limit, value between 1 and 1000
          in: query
          name: limit
          required: true
          schema:
            type: integer
            format: int32
        - description: Offset used for paging results
          in: query
          name: offset
          required: true
          schema:
            type: integer
            format: int32
        - description: |
            SortBy used for sorting transactions. Possible values:
             * **CLEARING_TIME** (default if not provided): Transactions sorted by clearing time
             * **TRANSACTION_TIME**: Transactions sorted by transaction time
          in: query
          name: sortBy
          required: false
          schema:
            type: string
            enum:
              - CLEARING_TIME
              - TRANSACTION_TIME
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchTransactionsRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FinancialTransaction'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Search Transactions
      tags:
        - Transactions API
  /v0/utils/create-stub-search-payment-instructions:
    post:
      operationId: createStubForMandateSearchPaymentInstructions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStubForMandateSearchPaymentInstructionsRequestBody'
        required: true
      responses:
        '200':
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Create stub for search payment instructions for a mandate.
      tags:
        - Utilities API
  /v0/utils/generate-atm-transaction:
    post:
      description: Triggers a mock transaction request for a ATM card transaction without authorisation hold (i.e. a visa stand in).
      operationId: generateAtmTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateCardTransactionRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Trigger mock ATM card transaction
      tags:
        - Utilities API
  /v0/utils/generate-auth-hold:
    post:
      description: Endpoint that triggers a mock authorisation hold transaction request.
      operationId: generateAuthHold
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateCardTransactionRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Trigger mock card Hold
      tags:
        - Utilities API
  /v0/utils/generate-card-transaction:
    post:
      description: Triggers a mock authorisation hold followed by an auth hold settling transactions.
      operationId: generateCardTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateHoldAndCardTransactionRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Trigger mock card Hold and Settlement
      tags:
        - Utilities API
  /v0/utils/generate-inbound-npp-transaction-v2:
    post:
      operationId: generateInboundNppTransactionV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateRapRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Generate mock NPP inbound transaction v2.
      tags:
        - Utilities API
  /v0/utils/generate-mandate-notification-initiator:
    post:
      operationId: generateMandateNotificationForInitiator
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateInitiatorMandateNotificationRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Generate mock Mandate notification for Initiator.
      tags:
        - Utilities API
  /v0/utils/generate-mandate-notification-payer:
    post:
      operationId: generateMandateNotificationForPayer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneratePayerMandateNotificationRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Generate mock Mandate notification for Payer.
      tags:
        - Utilities API
  /v0/utils/generate-npp-inbound:
    post:
      operationId: generateInboundNppTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateInboundNppTransactionRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Generate mock NPP inbound transaction.
      tags:
        - Utilities API
  /v0/utils/generate-receive-a-payment-instruction:
    post:
      operationId: generateReceiveAPaymentInstruction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateRapainRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Generate mock Receive A Payment Instruction (RAPAIN).
      tags:
        - Utilities API
  /v1/accounts/search:
    post:
      operationId: searchAccounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchAccountsRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HayAccount'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Search accounts
      tags:
        - Accounts API
  /v1/accounts/{accountId}/bpay-billers:
    get:
      operationId: retrieveBillers
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: limit
          required: true
          schema:
            type: integer
            format: int32
        - in: query
          name: offset
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BPayBillerResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: BPAY billers for account
      tags:
        - BPAY API
    post:
      operationId: createBPayBiller
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BPayBillerAddRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BPayBillerResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Create BPAY Biller for Account ID
      tags:
        - BPAY API
  /v1/accounts/{accountId}/custom-data:
    delete:
      operationId: deleteAccountCustomData
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Delete Custom Data from Account
      tags:
        - Accounts API
    post:
      operationId: createAccountCustomData
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountCustomDataRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Create Custom Data for Account
      tags:
        - Accounts API
  /v1/accounts/{accountId}/limits:
    get:
      operationId: getAccountLimits
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalLimitAmounts'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get all limits by Account ID
      tags:
        - Accounts API
  /v1/accounts/{accountId}/limits/{limitType}:
    delete:
      operationId: deleteAccountLimit
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
        - description: |-
            Account limit. Possible values:
             * **ATM_WITHDRAWAL_PER_DAY**: Maximum value of ATM cash withdrawals
             * **BANK_TRANSFER_TOP_UP_PER_DAY**: Maximum value of inbound cash transfers
             * **BPAY_DAILY_LIMIT**: Maximum value of outgoing BPAY payments
             * **BPAY_TOP_UP_PER_DAY**: Not currently used
             * **CARD_PAYMENTS_DAILY**: Maximum value of Card payments
             * **CARD_TOP_UP_PER_DAY**: Not currently used
             * **DIRECT_DEBIT_PER_DAY**: Maximum value of outgoing direct debit transfers
             * **MAX_BALANCE**: Maximum balance that can be held in Account
             * **MIN_BALANCE**: Minimum balance that can be held in Account (Shaype use only)
             * **MIN_STACK_BALANCE**: Minimum balance that can be held in Stack (Shaype use only)
             * **OVERDRAFT_PRODUCT_LIMIT**: Maximum overdraft value that can be applied on Account
             * **PAYMENT_TO_ACCOUNT_NUMBER**: Maximum value of individual outgoing cash transfer
             * **PAYMENT_TO_PAY_ID**: Not currently used
             * **SINGLE_CARD_TRANSACTION**: Maximum value of individual Card payment
             * **TOTAL_SPEND_PER_YEAR**: Maximum value of outgoing transfers / payments on Account in a year
             * **TOP_UP_PER_DAY**: Maximum value of inbound cash transfers
          in: path
          name: limitType
          required: true
          schema:
            type: string
            enum:
              - MAX_BALANCE
              - MIN_BALANCE
              - TOTAL_SPEND_PER_YEAR
              - ATM_WITHDRAWAL_PER_DAY
              - TOP_UP_PER_DAY
              - CARD_TOP_UP_PER_DAY
              - BPAY_TOP_UP_PER_DAY
              - BANK_TRANSFER_TOP_UP_PER_DAY
              - PAYMENT_TO_ACCOUNT_NUMBER
              - PAYMENT_TO_PAY_ID
              - CARD_PAYMENTS_DAILY
              - SINGLE_CARD_TRANSACTION
              - MIN_STACK_BALANCE
              - DIRECT_DEBIT_PER_DAY
              - OVERDRAFT_PRODUCT_LIMIT
              - BPAY_DAILY_LIMIT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAccountLimitResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Delete limit from Account
      tags:
        - Accounts API
    put:
      operationId: setAccountLimit
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
        - description: |-
            Account limit. Possible values:
             * **ATM_WITHDRAWAL_PER_DAY**: Maximum value of ATM cash withdrawals
             * **BANK_TRANSFER_TOP_UP_PER_DAY**: Maximum value of inbound cash transfers
             * **BPAY_DAILY_LIMIT**: Maximum value of outgoing BPAY payments
             * **BPAY_TOP_UP_PER_DAY**: Not currently used
             * **CARD_PAYMENTS_DAILY**: Maximum value of Card payments
             * **CARD_TOP_UP_PER_DAY**: Not currently used
             * **DIRECT_DEBIT_PER_DAY**: Maximum value of outgoing direct debit transfers
             * **MAX_BALANCE**: Maximum balance that can be held in Account
             * **MIN_BALANCE**: Minimum balance that can be held in Account (Shaype use only)
             * **MIN_STACK_BALANCE**: Minimum balance that can be held in Stack (Shaype use only)
             * **OVERDRAFT_PRODUCT_LIMIT**: Maximum overdraft value that can be applied on Account
             * **PAYMENT_TO_ACCOUNT_NUMBER**: Maximum value of individual outgoing cash transfer
             * **PAYMENT_TO_PAY_ID**: Not currently used
             * **SINGLE_CARD_TRANSACTION**: Maximum value of individual Card payment
             * **TOTAL_SPEND_PER_YEAR**: Maximum value of outgoing transfers / payments on Account in a year
             * **TOP_UP_PER_DAY**: Maximum value of inbound cash transfers
          in: path
          name: limitType
          required: true
          schema:
            type: string
            enum:
              - MAX_BALANCE
              - TOTAL_SPEND_PER_YEAR
              - ATM_WITHDRAWAL_PER_DAY
              - TOP_UP_PER_DAY
              - BANK_TRANSFER_TOP_UP_PER_DAY
              - PAYMENT_TO_ACCOUNT_NUMBER
              - PAYMENT_TO_PAY_ID
              - CARD_PAYMENTS_DAILY
              - SINGLE_CARD_TRANSACTION
              - DIRECT_DEBIT_PER_DAY
              - BPAY_DAILY_LIMIT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalSetAccountLimitRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalSetAccountLimitResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Set limit for Account
      tags:
        - Accounts API
  /v1/accounts/{accountId}/payids:
    get:
      operationId: getPayIdsForAccount
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PayIdDetailsResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get PayIDs by Account ID
      tags:
        - PayID API
  /v1/accounts/{accountId}/payids/{payId}/register:
    post:
      operationId: postPayIdRegister
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
        - description: PayID
          in: path
          name: payId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayIdRegisterRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Register PayID
      tags:
        - PayID API
  /v1/accounts/{accountId}/payments/bpay:
    post:
      operationId: makeBpayPayment
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BPayPaymentRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BpayPaymentResponseBody'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Initiate BPAY payment
      tags:
        - BPAY API
  /v1/accounts/{accountId}/rules:
    get:
      operationId: getAccountRules
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalTransactionRuleResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get all Rules by Account ID
      tags:
        - Accounts API
    post:
      operationId: addAccountRule
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalAddTransactionRuleRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalTransactionRuleResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Create Rule for Account
      tags:
        - Accounts API
  /v1/accounts/{accountId}/rules/{ruleId}:
    delete:
      operationId: disableRule
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
        - description: Unique identifier (UUID) of the Rule
          in: path
          name: ruleId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisableRuleResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Delete Rule from Account
      tags:
        - Accounts API
    get:
      operationId: getAccountRuleById
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
        - description: Unique identifier (UUID) of the Rule
          in: path
          name: ruleId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalTransactionRuleResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get Rule for Account by Rule ID
      tags:
        - Accounts API
  /v1/accounts/{accountId}/transfer:
    post:
      operationId: makeTransferV1
      parameters:
        - description: Unique identifier (UUID) of the Account
          in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferOutRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionOutcome'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Initiate Cash Transfer
      tags:
        - Accounts API
  /v1/bpay-billers/validate:
    post:
      operationId: validateBpay
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BPayBillerRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BPayBillerDetails'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Validate BPAY
      tags:
        - BPAY API
  /v1/bpay-billers/{billerId}:
    get:
      operationId: retrieveBpayBiller
      parameters:
        - description: Unique identifier (UUID) of the Biller.
          in: path
          name: billerId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BPayBillerResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Retrieve BPAY Biller
      tags:
        - BPAY API
    patch:
      operationId: updateBpayBiller
      parameters:
        - description: Unique identifier (UUID) of the Biller.
          in: path
          name: billerId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BPayBillerUpdateRequestBody'
        required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Update BPAY Biller
      tags:
        - BPAY API
  /v1/direct-debits:
    get:
      operationId: getDirectDebitsV1
      parameters:
        - description: DateTime in UTC format for the start date range of the Transaction search
          in: query
          name: fromUtc
          required: true
          schema:
            type: string
            format: date
        - description: DateTime in UTC format for the end date range of the Transaction search
          in: query
          name: toUtc
          required: true
          schema:
            type: string
            format: date
        - description: Offset used for paging results
          in: query
          name: offset
          required: true
          schema:
            type: integer
            format: int32
        - description: List fetch limit, value between 1 and 1000
          in: query
          name: limit
          required: true
          schema:
            type: integer
            format: int32
        - description: |
            Status of the Direct Debits. Possible values:
             * **RECEIVED**: Direct Debit request received for processing
             * **ACCEPTED**: Direct Debit has been accepted and awaiting submission to next Direct Entry payment batch
             * **REJECTED**: Direct Debit request failed validation or authorization and can't be executed
             * **SUBMITTED**: Direct Debit has been accepted and submitted in Direct Entry payment batch
             * **RETURNED**: Direct Debit request failed and was returned from the recipient financial institution. This direct debit cannot be executed
             * **COMPLETE**: Direct Debit request was successful and customer account credited successfully
             * **INCOMPLETE**: Direct Debit request was successful, but customer account crediting failed
          in: query
          name: status
          required: false
          schema:
            type: string
            enum:
              - RECEIVED
              - ACCEPTED
              - REJECTED
              - SUBMITTED
              - RETURNED
              - COMPLETE
              - INCOMPLETE
        - description: Sender Account Number
          in: query
          name: senderAccountNumber
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeTransactionDetailsV1'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get outbound Direct Debits by date
      tags:
        - Direct Debits API
    post:
      operationId: createDirectDebitV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDirectDebitRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectDebitResponseV1'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Create outbound Direct Debit
      tags:
        - Direct Debits API
  /v1/direct-debits/{transactionId}:
    get:
      operationId: getDirectDebitV1
      parameters:
        - description: Unique identifier (UUID) of the Transaction
          in: path
          name: transactionId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectDebitResponseV1'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get outbound Direct Debit by ID
      tags:
        - Direct Debits API
  /v1/holds/{holdId}:
    get:
      operationId: getAuthorisationHold
      parameters:
        - description: Unique identifier (UUID) of the Authorisation Hold
          in: path
          name: holdId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorisationHold'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get Authorisation Hold by ID
      tags:
        - Holds API
  /v1/kyc/identity-verification/cases:
    post:
      operationId: createCase
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCaseExternalResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Create new identity verification case and first submission
      tags:
        - KYC API
  /v1/kyc/{customerId}/onboarding/amlKycCheck/approval:
    post:
      operationId: approveAmlKycCheck
      parameters:
        - description: Unique identifier (UUID) of the Customer
          in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingStageApprovalBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmationResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Approve AML Check
      tags:
        - KYC API
  /v1/kyc/{customerId}/onboarding/documentCheck/approval:
    post:
      operationId: approveDocumentCheck
      parameters:
        - description: Unique identifier (UUID) of the Customer
          in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingStageApprovalBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmationResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Approve Document Check
      tags:
        - KYC API
  /v1/kyc/{customerId}/onboarding/sanctionCheck/approval:
    post:
      operationId: approveSanctionCheck
      parameters:
        - description: Unique identifier (UUID) of the Customer
          in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingStageApprovalBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmationResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Approve Sanctions Check
      tags:
        - KYC API
  /v1/liquidity:
    get:
      operationId: getClientLiquidity
      parameters:
        - description: Optional date to retrieve Liquidity for
          in: query
          name: date
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientLiquidity'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get client Liquidity
      tags:
        - Liquidity API
  /v1/liquidity/thresholds:
    get:
      operationId: getClientLiquidityThresholds
      parameters:
        - description: Determines whether to retrieve only active thresholds
          in: query
          name: active
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LiquidityThreshold'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get all liquidity alerting Thresholds
      tags:
        - Liquidity API
    post:
      operationId: createLiquidityThreshold
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThresholdRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiquidityThreshold'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Create liquidity alerting Threshold
      tags:
        - Liquidity API
  /v1/liquidity/thresholds/{thresholdId}:
    put:
      operationId: updateLiquidityThreshold
      parameters:
        - description: Threshold ID
          in: path
          name: thresholdId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateThresholdRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiquidityThreshold'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Update liquidity alerting Threshold
      tags:
        - Liquidity API
  /v1/payto/initiator/mandates:
    get:
      description: Caller must be owner of the account and BSB.
      operationId: getMandateIdsByInitiator
      parameters:
        - description: Creditor's Shaype Account ID
          in: query
          name: creditorAccountId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Returns all Mandate IDs for a Shaype Account ID.
      tags:
        - PayTo API
    post:
      description: |-
        (For use by Initiator only)
        &nbsp;
        Create a mandate and send via MMS to Payer for authorisation.
      operationId: createMandate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMandateRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMandateResponseBody'
          description: Success
          headers:
            RateLimit-Limit:
              description: Number of requests in the time-windows.
              schema:
                type: integer
              style: simple
            RateLimit-Remaining:
              description: Number of request remaining in the current time-window.
              schema:
                type: integer
              style: simple
            RateLimit-Reset:
              description: Time remaining in the current time window expressed in seconds.
              schema:
                type: integer
              style: simple
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Too many requests
          headers:
            Retry-After:
              description: Number of seconds indicating how long to wait before making a follow-up request.
              schema:
                type: integer
              style: simple
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Create Mandate
      tags:
        - PayTo API
  /v1/payto/initiator/mandates/{mandateId}:
    put:
      description: <p>(For use by Initiator only)</p><br><p>Amend the bank details of a mandate. Must be an account belonging to the same holder. The amend will be processed immediately without Payer authorisation being required.</p><br><p>Allowed fields:&nbsp;</p><ul>    <li>        <p>Creditor Account ID (Shaype platform ID). This will change the target for mandate funds to another account in the Shaype platform.</p>    </li>    <li>        <p>Ultimate party name of the Creditor</p>    </li></ul><p>To change payment details, use Amend Mandate payment terms.</p>
      operationId: amendMandateByInitiator
      parameters:
        - description: Mandate identifier
          in: path
          name: mandateId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AmendMandateByInitiatorRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Amend Mandate by Initiator
      tags:
        - PayTo API
  /v1/payto/initiator/mandates/{mandateId}/actions:
    get:
      description: Retrieve a selection of the actions performed on a mandate
      operationId: getMandateActionsByInitiator
      parameters:
        - description: Mandate ID
          in: path
          name: mandateId
          required: true
          schema:
            type: string
            format: uuid
        - description: Whether only pending actions will be included in the result
          in: query
          name: pendingOnly
          required: false
          schema:
            type: boolean
        - description: Optional timestamp defining the start of the time period of action history to be included in the result. If omitted, then this time defaults to the moment of mandate creation. If provided, then this must not be a time in the future. An ISODateTime whereby all time zoned values are UTC.
          in: query
          name: from
          required: false
          schema:
            pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]{1,3})?(?:Z)$
            type: string
        - description: Optional timestamp defining the end of the time period of action history to be included in the result. If omitted, then this time defaults to the current moment in time. If provided, then this must not be a time in the future. An ISODateTime whereby all time zoned values are UTC.
          in: query
          name: to
          required: false
          schema:
            pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]{1,3})?(?:Z)$
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMandateActionsResponseBody'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get Mandate Actions by Initiator
      tags:
        - PayTo API
  /v1/payto/initiator/mandates/{mandateId}/cancel:
    patch:
      description: |-
        (For use by Initiator only)
        &nbsp;
         Cancel a mandate. Changes status to CNCD in the central Mandate Management Service.
      operationId: cancelMandateByInitiator
      parameters:
        - description: Mandate identifier
          in: path
          name: mandateId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelMandateRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Cancel Mandate by Initiator
      tags:
        - PayTo API
  /v1/payto/initiator/mandates/{mandateId}/instructions/{instructionId}/status:
    get:
      description: Get the status of a mandate payment initiation that was performed previously.
      operationId: getMandatePaymentStatus
      parameters:
        - description: Mandate ID
          in: path
          name: mandateId
          required: true
          schema:
            type: string
            format: uuid
        - description: Payment instruction ID
          in: path
          name: instructionId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMandatePaymentStatusResponseBody'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get Payment instruction status by Mandate ID and Payment instruction ID
      tags:
        - PayTo API
  /v1/payto/initiator/mandates/{mandateId}/payment_terms:
    patch:
      description: (For use by Initiator only)
      operationId: amendMandatePaymentTerms
      parameters:
        - description: Mandate identifier
          in: path
          name: mandateId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AmendMandatePaymentTermsRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Amend Mandate payment terms
      tags:
        - PayTo API
  /v1/payto/initiator/mandates/{mandateId}/payments/amount:
    patch:
      description: Allows to set Scheduled Payment Initiation Request amount for USAGE_BASED and VARIABLE mandates.
      operationId: setScheduledPaymentInitiationRequestAmount
      parameters:
        - description: Mandate identifier
          in: path
          name: mandateId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetScheduledPaymentInitiationAmountRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Set amount of Scheduled Payment Initiation Request by Initiator
      tags:
        - PayTo API
  /v1/payto/initiator/mandates/{mandateId}/release:
    patch:
      description: |-
        (For use by Initiator only)
        &nbsp;
        Unsuspend a mandate
      operationId: releaseMandateByInitiator
      parameters:
        - description: Mandate identifier
          in: path
          name: mandateId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Release Mandate by Initiator
      tags:
        - PayTo API
  /v1/payto/initiator/mandates/{mandateId}/resolve:
    patch:
      description: |-
        (For use by Initiator only)
        &nbsp;
        Recalls a new mandate or mandate amendment that has not yet been authorised by the Payer
      operationId: resolveMandateByInitiator
      parameters:
        - description: Mandate identifier
          in: path
          name: mandateId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Resolve Mandate by Initiator
      tags:
        - PayTo API
  /v1/payto/initiator/mandates/{mandateId}/search:
    get:
      operationId: searchPaymentsInstructions
      parameters:
        - description: Mandate identifier
          in: path
          name: mandateId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentInstructionsSummaryResponseBody'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Search payments instructions by Mandate ID
      tags:
        - PayTo API
  /v1/payto/initiator/mandates/{mandateId}/suspend:
    patch:
      description: |-
        (For use by Initiator only)
        &nbsp;
        Suspends a mandate - places it on pause so cannot be actioned. Can be unsuspended using Release Mandate by Initiator.
      operationId: suspendMandateByInitiator
      parameters:
        - description: Mandate identifier
          in: path
          name: mandateId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuspendMandateRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Suspend Mandate by Initiator
      tags:
        - PayTo API
  /v1/payto/mandates:
    get:
      description: |-
        (For use by Payer only)
        &nbsp;
         Uses underlying Cuscal Search Mandates mechanism. This is a mandate cache and doesn't call the MMS directly. Cuscal restricts data to the Payer only - so not possible for Initiator to use this. 
        Only mandates where the debtor party has one of the provided account numbers will be returned
      operationId: getMandates
      parameters:
        - description: Account numbers
          in: query
          name: accountIds
          required: true
          schema:
            type: array
            items:
              type: string
        - description: |-
            Mandate status: 
             * **CREATED**: Created
             * **ACTIVE**: Active
             * **SUSPENDED**: Suspended
             * **CANCELLED**: Cancelled
          in: query
          name: statuses
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - CREATED
                - ACTIVE
                - SUSPENDED
                - CANCELLED
        - description: Page number
          in: query
          name: pageNumber
          required: true
          schema:
            minimum: 1
            type: integer
            format: int32
        - description: Page size
          in: query
          name: pageSize
          required: true
          schema:
            maximum: 50
            minimum: 1
            type: integer
            format: int32
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMandatesResponseBody'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get Mandates by debtor account numbers
      tags:
        - PayTo API
  /v1/payto/mandates/{mandateId}:
    get:
      description: |-
        Can be used by either Initiator or Payer, as long as they are party to the mandate (either created the mandate or authorised it as debtor)
         Direct MMS Get Mandate call. Only supports one Mandate ID per call. NPPA doesn't recommend caching data in applications as it may end up out of date - client should call this endpoint each time the mandate data needs to be displayed.
      operationId: getMandate
      parameters:
        - description: Mandate ID
          in: path
          name: mandateId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMandateResponseBody'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get Mandate by ID
      tags:
        - PayTo API
  /v1/payto/payer/mandates/{mandateId}:
    put:
      description: <p>(For use by Payer only)</p><br><p>Amend the bank details of a mandate. Must be an account belonging to the same holder. The amend will be processed immediately without Initiator authorisation being required.</p><br><p>Allowed fields:&nbsp;</p><ul>    <li>        <p>Debtor Account ID (Shaype platform ID). This will change the source of mandate payments to another account in the Shaype platform.</p>    </li></ul>
      operationId: amendMandateByPayer
      parameters:
        - description: Mandate identifier
          in: path
          name: mandateId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AmendMandateByPayerRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Amend Mandate by Payer
      tags:
        - PayTo API
  /v1/payto/payer/mandates/{mandateId}/actions:
    get:
      description: Retrieve a selection of the actions performed on a mandate
      operationId: getMandateActionsByPayer
      parameters:
        - description: Mandate ID
          in: path
          name: mandateId
          required: true
          schema:
            type: string
            format: uuid
        - description: Whether only pending actions will be included in the result
          in: query
          name: pendingOnly
          required: false
          schema:
            type: boolean
        - description: Optional timestamp defining the start of the time period of action history to be included in the result. If omitted, then this time defaults to the moment of mandate creation. If provided, then this must not be a time in the future. An ISODateTime whereby all time zoned values are UTC.
          in: query
          name: from
          required: false
          schema:
            pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]{1,3})?(?:Z)$
            type: string
        - description: Optional timestamp defining the end of the time period of action history to be included in the result. If omitted, then this time defaults to the current moment in time. If provided, then this must not be a time in the future. An ISODateTime whereby all time zoned values are UTC.
          in: query
          name: to
          required: false
          schema:
            pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]{1,3})?(?:Z)$
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMandateActionsResponseBody'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get Mandate Actions by Payer
      tags:
        - PayTo API
  /v1/payto/payer/mandates/{mandateId}/cancel:
    patch:
      description: |-
        (For use by Payer only)
        &nbsp;
        Cancel a mandate. Changes status to CNCD in the central Mandate Management Service.
      operationId: cancelMandateByPayer
      parameters:
        - description: Mandate identifier
          in: path
          name: mandateId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelMandateRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Cancel Mandate by Payer
      tags:
        - PayTo API
  /v1/payto/payer/mandates/{mandateId}/release:
    patch:
      description: |-
        (For use by Payer only)
        &nbsp;
        Unsuspend a mandate.
      operationId: releaseMandateByPayer
      parameters:
        - description: Mandate identifier
          in: path
          name: mandateId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Release Mandate by Payer
      tags:
        - PayTo API
  /v1/payto/payer/mandates/{mandateId}/resolve:
    patch:
      description: |-
        (For use by Payer only)
        &nbsp;
        Authorise an amend that has been requested by an Initiator.
      operationId: resolveMandateByPayer
      parameters:
        - description: Mandate identifier
          in: path
          name: mandateId
          required: true
          schema:
            type: string
            format: uuid
        - description: |-
            Mandate resolution: 
             * **ACCEPT**: Mandate accepted
             * **REJECT**: Mandate rejected
          in: query
          name: resolution
          required: true
          schema:
            type: string
            enum:
              - ACCEPT
              - REJECT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Resolve Mandate pending action by Payer
      tags:
        - PayTo API
  /v1/payto/payer/mandates/{mandateId}/suspend:
    patch:
      description: |-
        (For use by Payer only)
        &nbsp;
        Suspend (pause) a mandate without cancelling it
      operationId: suspendMandateByPayer
      parameters:
        - description: Mandate identifier
          in: path
          name: mandateId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuspendMandateRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Suspend Mandate by Payer
      tags:
        - PayTo API
  /v1/payto/payments/adhoc:
    post:
      description: |-
        (For use by Initiator only)
        &nbsp;
        Trigger a Payment Initiation Request to the Payer side.
        &nbsp;
        Currently in Staging this does not result in a transaction, the client should just check for a 200 response (but will receive a RJCT PSR notification)
      operationId: makeAdhocPayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MakeAdhocPaymentRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MakeAdhocPaymentResponseBody'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Make Adhoc Payment
      tags:
        - PayTo API
  /v1/payto/supported-bsbs/{bsbNumber}:
    get:
      description: Use to check if a target Payer supports PayTo, before mandate creation
      operationId: checkBsbIsSupportedByPayTo
      parameters:
        - description: BSB Number
          in: path
          name: bsbNumber
          required: true
          schema:
            pattern: ^\d{6}$
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckPayToBsbSupportResponseBody'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Check if BSB supports PayTo
      tags:
        - PayTo API
  /v1/transactions/credit:
    post:
      operationId: createCreditTransactionV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionOutcome'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Create Credit Transaction for Account
      tags:
        - Transactions API
  /v1/transactions/debit:
    post:
      operationId: createDebitTransactionV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionRequestBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionOutcome'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Create Debit Transaction for Account
      tags:
        - Transactions API
  /v1/transactions/{transactionHayId}:
    get:
      operationId: getTransactionById
      parameters:
        - description: Unique identifier (UUID) of the Transaction
          in: path
          name: transactionHayId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialTransaction'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
      summary: Get Transaction by ID
      tags:
        - Transactions API
components:
  schemas:
    AccountToStackTransferRequestBody:
      required:
        - amount
        - customerId
      type: object
      properties:
        amount:
          type: number
          description: Value of the Transaction, to 2 decimal places
        customerId:
          type: string
          description: Unique identifier (UUID) of the Customer (initiator of the transfer)
          format: uuid
        description:
          maxLength: 20
          minLength: 0
          type: string
          description: Transaction description
      description: Body of a request to move funds from the main account to a stack.
    AccountTransfer:
      required:
        - accountNumber
        - bsb
        - recipientName
      type: object
      properties:
        accountNumber:
          pattern: '[\d]{5,9}'
          type: string
          description: "\tAccount number, 5-9 digits in length"
        bsb:
          pattern: '[\d]{6}'
          type: string
          description: BSB (Bank State Branch) of Account, 6 digits in length
        recipientName:
          maxLength: 140
          minLength: 1
          type: string
          description: Name of Account receiving the transfer
        reference:
          maxLength: 35
          minLength: 0
          type: string
          description: Reference to be included with the transfer
          deprecated: true
        senderName:
          maxLength: 140
          minLength: 0
          type: string
          description: Name of Account sending the transfer
      description: Details of a transfer to Account using bank account details
    AddCustomersToGroupRequestBody:
      required:
        - customerHayIds
      type: object
      properties:
        customerHayIds:
          type: array
          description: Unique identifiers (UUID) of the Customer(s) associated to this Group
          items:
            type: string
            description: Unique identifiers (UUID) of the Customer(s) associated to this Group
            format: uuid
      description: Body of a request to add customers to an existing group
    Address:
      required:
        - administrativeRegion
        - countryCodeIso
        - line1
        - postcode
        - townOrCity
      type: object
      properties:
        administrativeRegion:
          pattern: NSW|QLD|SA|TAS|VIC|WA|ACT|NT
          type: string
          description: |-
            Australian State or Territory. Possible values: (uppercase only)
             * NSW
             * QLD
             * SA
             * TAS
             * VIC
             * WA
             * ACT
             * NT
        countryCodeIso:
          type: string
          description: Country as three letter code as per ISO 3166
        line1:
          maxLength: 120
          minLength: 0
          type: string
          description: Address line 1
        line2:
          maxLength: 120
          minLength: 0
          type: string
          description: Address line 2
        line3:
          maxLength: 120
          minLength: 0
          type: string
          description: Address line 3
        line4:
          maxLength: 120
          minLength: 0
          type: string
          description: Address line 4
        line5:
          maxLength: 120
          minLength: 0
          type: string
          description: Address line 5
        postcode:
          maxLength: 10
          minLength: 0
          type: string
          description: Postcode
        townOrCity:
          maxLength: 120
          minLength: 0
          type: string
          description: Town or city
      description: Address of the Customer
    AmendMandateByInitiatorRequestBody:
      required:
        - creditorAccountId
      type: object
      properties:
        creditorAccountId:
          type: string
          description: The identifier of the creditor account.
          format: uuid
        ultimatePartyName:
          type: string
          description: Creditor's ultimate party name. Optional, overrides platform creditor's name.
      description: Body of a request to amend mandate by initiator.
    AmendMandateByPayerRequestBody:
      required:
        - debtorAccountId
      type: object
      properties:
        debtorAccountId:
          type: string
          description: The identifier of the debtor account.
          format: uuid
      description: Body of a request to amend Mandate by Payer.
    AmendMandatePaymentTermsRequestBody:
      type: object
      properties:
        paymentTerms:
          $ref: '#/components/schemas/CreatePaymentTermsDto'
        resolutionRequestedBy:
          type: string
          description: Date time in UTC format yyyy-MM-dd'T'hh:mm:ss.sss'Z' e.g. 2023-09-10T10:00:00.000Z (Optional).
        validityEndDate:
          type: string
          description: The date when the mandate stops being valid.
          format: date
      description: Body of a request to amend mandate payment terms.
    ApiDigitalWallet:
      type: object
      properties:
        createdAt:
          type: string
          description: DateTime in UTC format when the wallet was activated
          format: date-time
        digitalWalletStatus:
          type: string
          description: |-
            Wallet status. Possible values:
             * **ACTIVE_TOKEN**: Wallet that has card token linked and is active for use
        expiresAt:
          type: string
          description: DateTime in UTC format when the wallet will expire (card expiry date)
          format: date
        reference:
          type: string
          description: The Digitiser's (i.e. the created of the token) unique reference to this token
        type:
          type: string
          description: The wallet provider i.e. APPLE, GOOGLE etc.
      description: Details of a digital wallet.
    AuthorisationHold:
      type: object
      properties:
        accountHayId:
          type: string
          description: Unique identifier (UUID) of the Account
          format: uuid
        cardId:
          type: string
          description: Unique identifier (UUID) of the Card
          format: uuid
        category:
          type: string
          description: Category applied to transaction, will be initially populated based on merchant type if known
        currencyAmount:
          $ref: '#/components/schemas/CurrencyAmount'
        customerId:
          type: string
          description: Unique identifier (UUID) of the Customer (cardholder)
          format: uuid
        description:
          type: string
          description: Description on the Transaction
        holdHayId:
          type: string
          description: Unique identifier (UUID) of the Authorisation Hold
          format: uuid
        merchantDetails:
          $ref: '#/components/schemas/ExternalMerchantDetails'
        originalCurrencyAmount:
          $ref: '#/components/schemas/CurrencyAmount'
        transactionChannel:
          type: string
          description: |-
            Transaction channel, domestic if payment same country card is issued in otherwise international. Possible values:
             * **APPLE_PAY_CARD_NOT_PRESENT_DOMESTIC**:Payment online via Apple Pay (domestic)
             * **APPLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL**:Payment online via Apple Pay (international)
             * **APPLE_PAY_CARD_PRESENT_DOMESTIC**:Payment via Apple device at physical terminal (domestic)
             * **APPLE_PAY_CARD_PRESENT_INTERNATIONAL**:Payment via Apple device at physical terminal (international)
             * **GOOGLE_PAY_CARD_NOT_PRESENT_DOMESTIC**:Payment online via Google Pay (domestic)
             * **GOOGLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL**:Payment online via Google Pay (international)
             * **GOOGLE_PAY_CARD_PRESENT_DOMESTIC**:Payment via Android device at physical terminal (domestic)
             * **GOOGLE_PAY_CARD_PRESENT_INTERNATIONAL**:Payment via Android device at physical terminal (international)
             * **VISA_ATM_DOMESTIC**:Cash withdrawal from ATM (domestic)
             * **VISA_ATM_INTERNATIONAL**:Cash withdrawal from ATM (international)
             * **VISA_CARD_NOT_PRESENT_DOMESTIC**:Payment online using card details (domestic)
             * **VISA_CARD_NOT_PRESENT_INTERNATIONAL**:Payment online using card details (international)
             * **VISA_CARD_PRESENT_DOMESTIC**:Payment using physical card chip or magstripe (domestic)
             * **VISA_CARD_PRESENT_INTERNATIONAL**:Payment using physical card chip or magstripe (international)
             * **VISA_CONTACTLESS_DOMESTIC**:Payment using physical card contactless (domestic)
             * **VISA_CONTACTLESS_INTERNATIONAL**:Payment using physical card contactless (international)
             * **VISA_OCT_DOMESTIC**:Cash transfer to card via Visa OCT payment (domestic)
             * **VISA_OCT_INTERNATIONAL**:Cash transfer to card via Visa OCT payment (international)
             * **VISA_OTHER**:Exceptional for any other type of transaction
             * **VISA_REFUND_DOMESTIC**:Refund for previous card payment (domestic)
             * **VISA_REFUND_INTERNATIONAL**:Refund for previous card payment (international)
          enum:
            - VISA_LEGACY
            - VISA_REFUNDS_LEGACY
            - VISA_CARD_NOT_PRESENT
            - VISA_CARD_NOT_PRESENT_INTERNATIONAL
            - VISA_CARD_PRESENT
            - VISA_CARD_PRESENT_INTERNATIONAL
            - APPLE_PAY_CARD_NOT_PRESENT
            - APPLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL
            - APPLE_PAY_CARD_PRESENT
            - APPLE_PAY_CARD_PRESENT_INTERNATIONAL
            - GOOGLE_PAY_CARD_NOT_PRESENT
            - GOOGLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL
            - GOOGLE_PAY_CARD_PRESENT
            - GOOGLE_PAY_CARD_PRESENT_INTERNATIONAL
            - VISA_CONTACTLESS
            - VISA_CONTACTLESS_INTERNATIONAL
            - VISA_ATM
            - VISA_ATM_INTERNATIONAL
            - CARD_REFUNDS
            - VISA_OTHER
            - CUSCAL_LEGACY
            - CUSCAL_DE_TRANSFER_IN
            - CUSCAL_DE_DEBIT_IN
            - CUSCAL_DE_CREDIT_IN
            - CUSCAL_NPP_TRANSFER_IN
            - CUSCAL_BPAY_TRANSFER_IN
            - FAT_ZEBRA_TRANSFER_IN
            - HAY_TO_HAY_TRANSFER_IN
            - CUSCAL_DE_TRANSFER_OUT
            - CUSCAL_DE_DEBIT_OUT
            - CUSCAL_DE_CREDIT_OUT
            - CUSCAL_NPP_TRANSFER_OUT
            - CUSCAL_BPAY_TRANSFER_OUT
            - HAY_TO_HAY_TRANSFER_OUT
            - CUSCAL_NPP_SOLICITED_RETURN
            - CUSCAL_DE_TRANSFER_OUT_RETURN
            - DE_DEBIT_RETURN_IN
            - NPP_RETURN_IN
            - NPP_RETURN_OUT
            - HAY_CREDIT
            - APPLE_REWARD
            - VALUE_TRANSFER
            - LOAN_REPAYMENT
            - MANUAL_ADJUSTMENT
            - INTEREST_ADJUSTMENT
            - LOAN_ADJUSTMENT
            - VISA_OCT_DOMESTIC
            - VISA_OCT_INTERNATIONAL
            - ACCOUNT_ADJUSTMENT
            - HAAS_TRANSFER_EXTERNAL_IN
            - HAAS_TRANSFER_EXTERNAL_OUT
            - HAAS_TRANSFER_INTERNAL_IN
            - HAAS_TRANSFER_INTERNAL_OUT
            - SERVICE_FEE
            - BPAY_IN_REJECT
            - VISA_REFUND_DOMESTIC
            - VISA_REFUND_INTERNATIONAL
        transactionTimeUtc:
          type: string
          description: DateTime in UTC format when Transaction was Authorised on the Account
          format: date-time
        type:
          type: string
          description: |-
            Transaction type. Possible values:
             * **ATM_WITHDRAWAL**: Cash withdrawal from ATM
             * **CARD_NOT_PRESENT_PAYMENT**: Payment online using card details, Apple Pay or Google Pay
             * **CARD_PAYMENT_REVERSAL**: Refund for previous card payment
             * **CARD_PRESENT_PAYMENT**: Payment using physical card, Apple device or Android device at physical terminal
             * **ORIGINAL_CREDIT**: Cash transfer to card via Visa OCT payment
          enum:
            - CARD_PRESENT_PAYMENT
            - CARD_NOT_PRESENT_PAYMENT
            - INTRABANK_TRANSFER_IN
            - INTRABANK_TRANSFER_OUT
            - INTERBANK_TRANSFER_IN
            - INTERBANK_TRANSFER_OUT
            - DIRECT_DEBIT_TRANSFER
            - ATM_WITHDRAWAL
            - CARD_PAYMENT_REVERSAL
            - INTERBANK_TRANSFER_OUT_REVERSAL
            - GENERAL_CREDIT
            - GENERAL_DEBIT
            - ORIGINAL_CREDIT
            - BPAY_TRANSFER_OUT
            - BPAY_TRANSFER_IN
      description: Details of an authorisation hold
    BPayBillerAddRequestBody:
      required:
        - billerCode
        - name
        - reference
      type: object
      properties:
        billerCode:
          maxLength: 10
          minLength: 3
          type: string
          description: The Biller Code for the biller that will receivethe payment. It must be of length 3 to 10 digits.
        name:
          type: string
          description: Nick name of the BPAY biller
        reference:
          type: string
          description: BPAY biller reference. It must be of length 2 to 20 digits
      description: BPAY biller request body
    BPayBillerDetails:
      type: object
      properties:
        billerCode:
          type: string
          description: The Biller Code for the biller that will receivethe payment. It must be of length 3 to 10 digits.
        industryAnzsicCode:
          type: string
          description: ANZSIC codes are four-digit numbers. This is a code that identifies the classification of the industry in which the organisation operates in.
        longName:
          type: string
          description: The long description for the Biller or Service. Max 50 characters. Commas are not allowed in this field.
        referenceNumber:
          type: string
          description: BPAY biller reference. It must be of length 2 to 20 digits
        shortName:
          type: string
          description: The short description for the Biller or Service. Max 20 characters. Commas are not allowed in this field.
      description: BPAY biller details
    BPayBillerRequestBody:
      required:
        - billerCode
        - reference
      type: object
      properties:
        billerCode:
          maxLength: 10
          minLength: 3
          type: string
          description: The Biller Code for the biller that will receivethe payment. It must be of length 3 to 10 digits.
        reference:
          maxLength: 20
          minLength: 2
          type: string
          description: BPAY biller reference. It must be of length 2 to 20 digits
      description: BPAY Biller request body
    BPayBillerResponse:
      type: object
      properties:
        accountHayId:
          type: string
          description: Unique identifier (UUID) of the Account
          format: uuid
        billerDetails:
          $ref: '#/components/schemas/BPayBillerDetails'
        hayId:
          type: string
          description: Unique identifier (UUID) of the Biller.
          format: uuid
        image:
          type: string
          description: Biller image
        name:
          type: string
          description: Nick name of the Bpay biller
      description: BPAY biller Response body
    BPayBillerUpdateRequestBody:
      type: object
      properties:
        image:
          maxLength: 2147483647
          minLength: 1
          type: string
          description: Biller image
        name:
          maxLength: 2147483647
          minLength: 1
          type: string
          description: Nick name of the BPAY biller
        reference:
          maxLength: 20
          minLength: 2
          type: string
          description: BPAY biller reference. It must be of length 2 to 20 digits
        status:
          type: string
          description: |-
            BPAY biller status. Possible Values:
            **ACTIVE**: Biller is active.
            **DISMISSED**: Biller is dimissed
      description: BPAY biller reques Request body
    BPayLiquidity:
      required:
        - inbound
        - outbound
        - total
      type: object
      properties:
        inbound:
          type: number
        outbound:
          type: number
        total:
          type: number
    BPayPaymentRequestBody:
      required:
        - amount
        - billerCode
        - category
        - reference
        - senderCustomerHayId
      type: object
      properties:
        amount:
          type: number
          description: The amount to be transferred
        billerCode:
          maxLength: 10
          minLength: 3
          type: string
          description: The Biller Code for the biller that will receivethe payment. It must be of length 3 to 10 digits.
        category:
          type: string
          description: Used to assign a category of the transfer
        description:
          maxLength: 255
          minLength: 1
          type: string
          description: Transfer description, will be seen by both sender and recipient
        idempotencyKey:
          type: string
          description: Unique value (UUID) used to identify this request and used to recognise any subsequent retries
          format: uuid
        name:
          type: string
          description: Nick name of the BPAY biller
        reference:
          maxLength: 20
          minLength: 2
          type: string
          description: Biller Reference to be included with the transfer
        senderCustomerHayId:
          type: string
          description: Unique identifier (UUID) of the Customer (initiator of the transfer)
          format: uuid
    BasicAccountNumber:
      type: object
      properties:
        accountNumber:
          type: string
          description: Account number, 5-9 digits in length
        branchNumber:
          type: string
          description: BSB (Bank State Branch) of Account, 6 digits in length
      description: Details of the recipient account number
    BlockAccountRequestBody:
      required:
        - note
      type: object
      properties:
        accountBlockStyle:
          type: string
          description: |-
            Deprecation Notice: ACCOUNT_AND_CUSTOMER value to be removed.

            Deprecation Notice: ACCOUNT_AND_CUSTOMER default value to be removed.

            Controls which entities will have block applied. 

            Use of ACCOUNT_ONLY is encouraged.

            Possible values:
            * **ACCOUNT_ONLY** (Preferred): Only the account will be blocked.
            * **ACCOUNT_AND_CUSTOMER** (Default if no value provided): Both the account and customer(s) owning it will be blocked. It returns SUCCESS in case of partial success (Account blocked, but customer not blocked due to permission issues).
          enum:
            - ACCOUNT_ONLY
            - ACCOUNT_AND_CUSTOMER
        note:
          type: string
          description: Note or explanation for reason block is applied
      description: '**Body of a request to block an account.** (Deprecation Notice: this functionality will be modified in the future releases, check schema for more details).'
    BlockCardRequestBody:
      type: object
      properties:
        note:
          type: string
          description: Note or explanation for reason block is applied
      description: '**Body of a request to block a card.**'
    BlockCustomerRequestBody:
      required:
        - note
      type: object
      properties:
        note:
          type: string
          description: Note or explanation for reason block is applied
      description: '**Body of a request to block a customer.**'
    BpayDetails:
      type: object
      properties:
        billerCode:
          type: string
          description: BPAY Biller Code, 3 to 10 digits in length
        billerImage:
          type: string
          description: URL to external image representing Biller's logo (if available)
        billerName:
          type: string
          description: Name of the BPAY Biller, 1 to 50 characters in length
        billerReference:
          type: string
          description: BPAY Customer Reference Number (CRN), 2 to 20 digits in length
        category:
          type: string
          description: Category assigned on the transaction
      description: Details of the BPAY Biller
    BpayPaymentResponseBody:
      type: object
      properties:
        outcome:
          type: string
          description: |
            Transaction outcome. Possible values:
             * **ACCEPTED**
             * **INTERNAL_ERROR**
             * **INVALID_PAYMENT**
             * **INSUFFICIENT_FUNDS**
             * **REFUSED_ACCOUNT_CLOSED**
             * **REFUSED_RECIPIENT_ACCOUNT_CLOSED**
             * **REFUSED_DAILY_BPAY_LIMIT_BREACHED**
             * **REFUSED_BPAY_INVALID_BILLER_CODE**
             * **REFUSED_BPAY_INVALID_REFERENCE**
             * **REFUSED_BPAY_INVALID_PAYMENT**
             * **REFUSED_BPAY_REJECTED**
          enum:
            - ACCEPTED
            - INVALID_PAYMENT
            - REFUSED_INSUFFICIENT_FUNDS
            - INTERNAL_ERROR
            - REFUSED_DAILY_BPAY_LIMIT_BREACHED
            - REFUSED_BPAY_INVALID_BILLER_CODE
            - REFUSED_BPAY_INVALID_REFERENCE
            - REFUSED_BPAY_INVALID_PAYMENT
            - REFUSED_BPAY_REJECTED
            - REFUSED_ACCOUNT_BLOCKED
            - REFUSED_RECIPIENT_ACCOUNT_BLOCKED
            - REFUSED_ACCOUNT_CLOSED
            - REFUSED_RECIPIENT_ACCOUNT_CLOSED
        transactionId:
          type: string
          description: Unique identifier (UUID) of the Transaction
          format: uuid
      description: Transaction outcome details
    BusinessIdentifiers:
      type: object
      properties:
        businessNumber:
          maxLength: 11
          minLength: 11
          type: string
          description: Australian Business Number (ABN)
        companyNumber:
          maxLength: 9
          minLength: 9
          type: string
          description: Australian Company Number (ACN)
        registeredBodyNumber:
          maxLength: 9
          minLength: 9
          type: string
          description: Australian Registered Body Number (ARBN)
        registeredSchemeNumber:
          maxLength: 9
          minLength: 9
          type: string
          description: Australian Registered Scheme Number (ARSN)
      description: Identifiers issued by the government to the entity represented by this Group
    CancelMandateRequestBody:
      type: object
      properties:
        reasonCode:
          type: string
          description: |-
            Mandate cancellation reason code
            * **AC02**: Invalid Debtor account number.
            * **AC04**: Closed account number.
            * **AC05**: Closed Debtor account number.
            * **AC06**: Blocked account.
            * **AC13**: Invalid Debtor account type.
            * **AG01**: Transaction forbidden.
            * **AG03**: Transaction not supported.
            * **AM03**: Not allowed currency.
            * **AM12**: Invalid amount.
            * **AM14**: Amount exceeds agreed limit.
            * **CTAM**: Contract amended.
            * **CTCA**: Contract cancellation initiated by Debtor.
            * **CTEX**: Contract expired.
            * **MCFC**: Mandate suspended final collection.
            * **MCOC**: Mandate suspended once off collection.
            * **MD07**: End customer deceased.
            * **MD08**: No Mandate service by Agent.
            * **MD09**: No Mandate service on Customer.
            * **MD16**: Requested by Customer.
            * **MD17**: Requested by initiating party.
            * **MD20**: Mandate expired.
            * **MD21**: Mandate cancelled due to fraud.
            * **MS02**: Not specified reason Customer generated.
            * **MS03**: Not specified reason Agent generated.
            * **MSUC**: Mandate suspended after 7 consecutive unsuccessful collections.
            * **NARR**: Narrative.
            * **NOAS**: No answer from Customer.
            * **RR04**: Regulatory reason.
            * **SL01**: Specific service offered by Debtor Agent.
            * **SL11**: Creditor not on whitelist of Debtor.
            * **SL12**: Creditor on blacklist of Debtor.
          enum:
            - AC02
            - AC04
            - AC05
            - AC06
            - AC13
            - AG01
            - AG03
            - AM03
            - AM12
            - AM14
            - CTAM
            - CTCA
            - CTEX
            - MCFC
            - MCOC
            - MD07
            - MD08
            - MD09
            - MD16
            - MD17
            - MD20
            - MD21
            - MS02
            - MS03
            - MSUC
            - NARR
            - NOAS
            - RR04
            - SL01
            - SL11
            - SL12
        reasonDescription:
          type: string
          description: Mandate cancellation reason description.
      description: Body of a request to cancel mandate
    CardPaymentPreferences:
      type: object
      properties:
        cardEnabled:
          type: boolean
          description: |-
            Physical card enablement status:
             * **true**: enabled (unfrozen), allows physical card usage (default)
             * **false**: disabled (frozen), prevents all physical card usage
        cardNotPresentEnabled:
          type: boolean
          description: |-
            Online card not present payment enablement status:
             * **true**: enabled
             * **false**: disabled (default)
        cashWithdrawalEnabled:
          type: boolean
          description: |-
            ATM cash withdrawal enablement status:
             * **true**: enabled
             * **false**: disabled (default)
        contactlessEnabled:
          type: boolean
          description: |-
            Physical card contactless payment enablement status:
             * **true**: enabled
             * **false**: disabled (default)
        magneticStripeEnabled:
          type: boolean
          description: |-
            Physical card magnetic stripe payment enablement status:
             * **true**: enabled
             * **false**: disabled (default)
        mobileWalletPaymentsEnabled:
          type: boolean
          description: |-
            Mobile wallet card payment enablement status:
             * **true**: enabled (default)
             * **false**: disabled
      description: Card payment preferences.
    CardPinStatus:
      type: object
      properties:
        enabled:
          type: boolean
          description: False indicates the Card PIN is blocked
      description: Status of the Card PIN
    CardRewardsStatusBody:
      type: object
      properties:
        status:
          type: string
          description: |-
            Card rewards status. Possible values:
             * **ACTIVE**: Card is enrolled to rewards
          enum:
            - ACTIVE
      description: Card rewards status body
    ChangeCardPinRequestBody:
      required:
        - newPin
      type: object
      properties:
        newPin:
          pattern: \d{4}
          type: string
          description: New card PIN, consists of 4 digits
      description: Body of a request to change a card's pin for a customer
    ChangeHayAccountRiskLevelRequestBody:
      required:
        - level
        - reason
      type: object
      properties:
        level:
          type: string
          description: |-
            Account risk level. Possible values:
             * **LOW**: Account has a low risk level, operating normally using standard Product limits
             * **HIGH**: Account has a high risk level, operating at restricted capacity using applicable limits (generally prevents all outgoing funds activity)
          enum:
            - LOW
            - HIGH
        reason:
          maxLength: 128
          minLength: 1
          type: string
          description: Note or reason for the operation of this function
      description: Body of a request to set the account risk level.
    ChangeHayCustomerStatusRequestBody:
      required:
        - newStatus
      type: object
      properties:
        newStatus:
          type: string
          description: |-
            Allowed Customer status. Possible values:
             * **ACTIVE**: Customer is active
             * **INACTIVE**: Customer is not active (closed)
             * **PENDING_APPROVAL**: Customer is awaiting approval
             * **REFERRED**: Customer is referred for further KYC checks
             * **REJECTED**: Customer has been rejected
          enum:
            - ACTIVE
            - INACTIVE
            - REJECTED
            - BLOCKED
            - PENDING_APPROVAL
            - REFERRED
      description: Body of a request to set a customer status.
    CheckPayToBsbSupportResponseBody:
      type: object
      properties:
        supported:
          type: boolean
          description: Informs if given BSB number is supported by PayTo.
      description: Response providing information if given BSB number is supported by PayTo .
    ClientLiquidity:
      required:
        - clientReference
        - date
        - nonScheme
        - scheme
      type: object
      properties:
        clientReference:
          type: string
        date:
          type: string
          format: date
        nonScheme:
          $ref: '#/components/schemas/NonSchemeLiquidity'
        scheme:
          $ref: '#/components/schemas/SchemeLiquidity'
    CloseAccountResponse:
      type: object
      properties:
        description:
          type: string
          description: Description of account closure request
        errors:
          type: array
          description: List of errors if any
          items:
            $ref: '#/components/schemas/ClosureCheckerError'
        result:
          type: string
          description: Result of account closure request
          enum:
            - SUCCESS
            - FAILURE
      description: Response for account closure request
    ClosureCheckerError:
      required:
        - type
      type: object
      properties:
        errorMessage:
          type: string
        type:
          type: string
          enum:
            - ACCOUNT_BALANCE_TOTAL
            - ACCOUNT_BALANCE_STACKS
            - ACCOUNT_BALANCE_HELD
            - ACCOUNT_BALANCE_LOCKED
            - ACCOUNT_BALANCE_OVERDRAFT
            - ACCOUNT_BALANCE_TECHNICAL_OVERDRAFT
            - INFLIGHT_OUTBOUND_DIRECT_DEBITS
      description: List of errors if any
    ConfirmationResponse:
      type: object
      properties:
        message:
          type: string
          description: A confirmation message.
      description: A confirmation response.
    CreateAccountCustomDataRequestBody:
      required:
        - customData
      type: object
      properties:
        customData:
          type: object
          description: Contains custom metadata stored with the Account
      description: Body of a request to update custom metadata stored with an account
    CreateCaseExternalResponse:
      type: object
      properties:
        mobileToken:
          type: string
          description: Mobile SDK token used to complete identity verification on mobile phone.
        scanCase:
          $ref: '#/components/schemas/ExternalCase'
        webLink:
          type: string
          description: HTTP link to a web client to complete identity verification process through a web browser.
      description: New case created
    CreateCreditorDetailsDto:
      required:
        - accountId
      type: object
      properties:
        accountAliasIdentification:
          type: string
          description: The identifier of account alias.
        accountAliasType:
          type: string
          description: |-
            Creditor alias type.
             * **AUSTRALIAN_BUSINESS_NUMBER**: Australian business number.
             * **EMAIL_ADDRESS**: E-mail address.
             * **ORGANISATION_ID**: Organisation identifier.
             * **PHONE_NUMBER**: Phone number.
          enum:
            - AUSTRALIAN_BUSINESS_NUMBER
            - EMAIL_ADDRESS
            - ORGANISATION_ID
            - PHONE_NUMBER
        accountId:
          type: string
          description: The identifier of the creditor account.
          format: uuid
        partyReference:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Reference associated with the mandate as provided by party. Specifies a character string with a maximum length of 35 ASCII printable characters.
        partyType:
          type: string
          description: |-
            Creditor party type.
             * **ORGANISATION**: Party is an organisation.
             * **PERSON**: Party is a private individual.
          enum:
            - ORGANISATION
            - PERSON
        ultimatePartyName:
          type: string
          description: Creditor's ultimate party name. Optional, overrides platform creditor's name
      description: Describes creditor account details.
    CreateDebtorDetailsDto:
      type: object
      properties:
        accountAliasIdentification:
          type: string
          description: The identifier of account alias.
        accountAliasType:
          type: string
          description: |-
            Debtor alias type.
             * **AUSTRALIAN_BUSINESS_NUMBER**: Australian business number.
             * **EMAIL_ADDRESS**: E-mail address.
             * **ORGANISATION_ID**: Organisation identifier.
             * **PHONE_NUMBER**: Phone number.
          enum:
            - AUSTRALIAN_BUSINESS_NUMBER
            - EMAIL_ADDRESS
            - ORGANISATION_ID
            - PHONE_NUMBER
        accountId:
          type: string
          description: The identifier of the debtor account.
          format: uuid
        accountNumber:
          maxLength: 15
          minLength: 11
          type: string
          description: BSB (Bank State Branch) of Account, 6 digits in length combined with account number, 5-9 digits in length.
        partyName:
          type: string
          description: Debtor party name.
        partyReference:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Reference associated with the mandate as provided by party. Specifies a character string with a maximum length of 35 ASCII printable characters.
        partyType:
          type: string
          description: |-
            Debtor party type.
             * **ORGANISATION**: Party is an organisation.
             * **PERSON**: Party is a private individual.
          enum:
            - ORGANISATION
            - PERSON
        ultimatePartyName:
          type: string
          description: Debtor ultimate party name.
      description: Describes debtor account details.
    CreateDirectDebitRequestBody:
      required:
        - amount
        - description
        - idempotencyKey
        - recipientAccountNumber
        - recipientBsb
        - recipientName
        - senderAccountNumber
        - senderBsb
        - senderName
        - transactionId
      type: object
      properties:
        amount:
          type: number
          description: Value of the Direct Debit transfer, to 2 decimal places
        description:
          maxLength: 18
          minLength: 1
          type: string
          description: Description on Direct Debit transfer, maximum 18 characters in length
        idempotencyKey:
          type: string
          description: Unique value (UUID) used to identify this request and used to recognise any subsequent retries
          format: uuid
        recipientAccountNumber:
          pattern: \d{5,9}
          type: string
          description: Account Number of Account receiving Direct Debit instruction (account to be debited), 5-9 digits in length
        recipientBsb:
          pattern: \d{6}
          type: string
          description: BSB (Bank State Branch) of Account receiving Direct Debit instruction (account to be debited), 6 digits in length
        recipientName:
          maxLength: 32
          minLength: 1
          type: string
          description: Name on the Account receiving Direct Debit instruction (account to be debited)
        senderAccountNumber:
          pattern: \d{5,9}
          type: string
          description: Account Number of Account sending Direct Debit instruction (account to be credited), 5-9 digits in length
        senderBsb:
          pattern: \d{6}
          type: string
          description: BSB (Bank State Branch) of Account sending Direct Debit instruction (account to be credited), 6 digits in length
        senderName:
          maxLength: 16
          minLength: 1
          type: string
          description: Name on the Account sending Direct Debit instruction (account to be credited)
        transactionId:
          type: string
          description: Unique identifier (UUID) of the Transaction
          format: uuid
      description: A body of a request to initiate an outbound DD instruction.
    CreateHayAccountForGroupRequestBody:
      required:
        - idempotencyKey
      type: object
      properties:
        customData:
          type: object
          description: Contains custom metadata stored with the Account
        idempotencyKey:
          type: string
          description: Unique value (UUID) used to identify this request and used to recognise any subsequent retries
          format: uuid
      description: Body of a request to create an account owned by a group (joint or business account)
    CreateHayAccountRequest:
      required:
        - idempotencyKey
      type: object
      properties:
        customData:
          type: object
          description: Contains custom metadata stored with the Account
        idempotencyKey:
          type: string
          description: Unique value (UUID) used to identify this request and used to recognise any subsequent retries
          format: uuid
      description: Body of a request to create a personal account owned by a customer
    CreateHayCardRequestBody:
      required:
        - accountId
        - customerHayId
        - deliveryAddress
        - email
        - firstName
        - idempotencyKey
        - lastName
        - phoneNumber
        - pin
      type: object
      properties:
        accountId:
          type: string
          description: Unique identifier (UUID) of the Account
          format: uuid
        cardSubDesign:
          type: string
          description: |-
            Card design, applicable to multiple Card designs for product. Mapping of designs will be provided. Possible values:
             * **SUB_DESIGN_1** (default if not provided)
             * **SUB_DESIGN_2**
             * **SUB_DESIGN_3**
             * **SUB_DESIGN_4**
             * **SUB_DESIGN_5**
             * **SUB_DESIGN_6**
             * **SUB_DESIGN_7**
             * **SUB_DESIGN_8**
             * **SUB_DESIGN_9**
             * **SUB_DESIGN_10**
          enum:
            - SUB_DESIGN_1
            - SUB_DESIGN_2
            - SUB_DESIGN_3
            - SUB_DESIGN_4
            - SUB_DESIGN_5
            - SUB_DESIGN_6
            - SUB_DESIGN_7
            - SUB_DESIGN_8
            - SUB_DESIGN_9
            - SUB_DESIGN_10
        cardType:
          type: string
          description: |
            Type of card to create. Can convert virtual to physical card at a later time:
             * **PHYSICAL** (default if not provided)
             * **VIRTUAL**
          enum:
            - PHYSICAL
            - VIRTUAL
        customerHayId:
          type: string
          description: Unique identifier (UUID) of the Customer (cardholder)
          format: uuid
        deliveryAddress:
          $ref: '#/components/schemas/Address'
        email:
          type: string
          description: Email address of the Customer
        firstName:
          type: string
          description: First name of the Customer
        idempotencyKey:
          type: string
          description: Unique value (UUID) used to identify this request and used to recognise any subsequent retries
          format: uuid
        lastName:
          type: string
          description: Last name of the Customer
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumber'
        pin:
          type: string
          description: Card PIN, typically 4 digits but supports 4-12 digits
        title:
          type: string
          description: Title of the Customer
      description: Body of a request to issue a card for a customer
    CreateHayCustomerRequestBody:
      required:
        - address
        - customerDetails
        - customerTier
        - email
        - idempotencyKey
        - phoneNumber
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        customerDetails:
          $ref: '#/components/schemas/CustomerDetails'
        customerTier:
          type: string
          description: |
            Customer tier, will be STANDARD unless additional tiers have been agreed as part of the product offering. Possible values:
             * **FOUNDER**
             * **STANDARD**
             * **PREMIUM**
          enum:
            - FOUNDER
            - STANDARD
            - PREMIUM
        email:
          type: string
          description: Email address of the Customer
        externalCustomerId:
          maxLength: 64
          minLength: 0
          type: string
          description: Only applicable to Clients using their own Auth solution. This value will be included in the subject on the token which in turn will be used by Shaype to represent the customer Id on the external system. Max length is 64 characters.
        idempotencyKey:
          type: string
          description: Unique value (UUID) used to identify this request and used to recognise any subsequent retries
          format: uuid
        identityDocumentCardNumber:
          pattern: ^[a-zA-Z0-9]{6,10}$
          type: string
          description: Identity document card number. Between 6 to 10 characters which can be either just numeric or alphanumeric characters based on the state. Should be specified for Driver's Licenses that provide it.
        identityDocumentIssuingCountry:
          type: string
          description: Optional three-letter ISO country code of the customer's identity document issuing country.
        identityDocumentNumber:
          type: string
          description: Number of the Customer's identity document (if supplied)
        identityDocumentRegion:
          pattern: NSW|QLD|SA|TAS|VIC|WA|ACT|NT
          type: string
          description: 'Identity document region, one of: NSW, QLD, SA, TAS, VIC, WA, ACT, NT. (uppercase only) Should be specified for Driver''s Licenses.'
        identityDocumentType:
          type: string
          description: |-
            Type of Customer's identity document (if supplied). Possible values:
             * **DRIVING_LICENSE**
             * **PASSPORT**
          enum:
            - DRIVING_LICENSE
            - PASSPORT
        identityVerificationCaseId:
          type: string
          description: Optional Identity Verification ID for the identity check
          format: uuid
        journeyId:
          type: string
          description: 'Deprecated: Please do not use this field for customer creation, please refer to identityVerificationCaseId'
          format: uuid
          deprecated: true
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumber'
        skipKyc:
          type: boolean
          description: Only applicable to Clients using Shaype KYC solution. Used to bypass KYC checks for the Customer. Must only set as 'true' in agreed scenarios (i.e. permission to generate a dummy / test account has been granted).
        taxObligations:
          type: array
          description: Captures any foreign (outside Australia) tax obligations for the Customer
          items:
            $ref: '#/components/schemas/TaxObligation'
      description: Body of a request to create a customer
    CreateHayGroupRequestBody:
      required:
        - customerHayIds
        - idempotencyKey
      type: object
      properties:
        businessIdentifiers:
          $ref: '#/components/schemas/BusinessIdentifiers'
        customerHayIds:
          type: array
          description: Unique identifiers (UUID) of the Customer(s) associated to this Group
          items:
            type: string
            description: Unique identifiers (UUID) of the Customer(s) associated to this Group
            format: uuid
        groupName:
          type: string
          description: Name of the Group, if not provided a generic name associated with the client will be generated
        groupType:
          type: string
          description: |-
            Group type. Possible values:
             * **BUSINESS**: Non-individual / joint entity
             * **PERSONAL**: Joint account entity (default if no option selected)
          enum:
            - PERSONAL
            - BUSINESS
        idempotencyKey:
          type: string
          description: Unique value (UUID) used to identify this request and used to recognise any subsequent retries
          format: uuid
      description: Body of a request to create a group of customers.
    CreateHayStackRequestBody:
      required:
        - name
      type: object
      properties:
        imageUrl:
          type: string
          description: URL of image representing the Stack goal embedded in app
        name:
          maxLength: 20
          minLength: 1
          type: string
          description: Name of the Stack
        targetAmount:
          minimum: 0
          type: number
          description: Target balance value set on Stack
          format: double
      description: Body of a request to create a stack.
    CreateMandateRequestBody:
      required:
        - creditorDetails
        - debtorDetails
        - idempotencyKey
        - paymentTerms
        - purposeCode
        - validityStartDate
      type: object
      properties:
        creditorDetails:
          $ref: '#/components/schemas/CreateCreditorDetailsDto'
        debtorDetails:
          $ref: '#/components/schemas/CreateDebtorDetailsDto'
        description:
          maxLength: 140
          minLength: 0
          type: string
          description: A mandate description.
        idempotencyKey:
          type: string
          description: Idempotency key generated by the client of the API. Used for request duplication check.
          format: uuid
        paymentTerms:
          $ref: '#/components/schemas/CreatePaymentTermsDto'
        purposeCode:
          type: string
          description: |-
            The purpose of this mandate.
             * **MORTGAGE**: Mortgage payments.
             * **UTILITY**: Utility payments.
             * **LOAN**: Loan payments.
             * **DEPENDANT**: Dependant support payments.
             * **GAMBLING**: Gambling payments.
             * **RETAIL**: Retail payments.
             * **SALARY**: Salary payments.
             * **PERSONAL**: Personal payments.
             * **GOVERNMENT**: Government payments.
             * **PENSION**: Pension payments.
             * **TAX**: Tax payments.
             * **OTHER**: Other service payments.
          enum:
            - MORTGAGE
            - UTILITY
            - LOAN
            - DEPENDANT
            - GAMBLING
            - RETAIL
            - SALARY
            - PERSONAL
            - GOVERNMENT
            - PENSION
            - TAX
            - OTHER
        resolutionRequestedBy:
          type: string
          description: Date time in UTC format yyyy-MM-dd'T'hh:mm:ss.sss'Z' e.g. 2023-09-10T10:00:00.000Z (Optional).
        transferArrangement:
          type: string
          description: Indication of future transfer date, conditions of sale and requirement to hold funds.
        validityEndDate:
          type: string
          description: The date when the mandate stops being valid.
          format: date
        validityStartDate:
          type: string
          description: The date when the mandate becomes valid.
          format: date
      description: Body of a request to add mandate.
    CreateMandateResponseBody:
      type: object
      properties:
        mandateId:
          type: string
          description: Unique identifier of a mandate.
          format: uuid
      description: Details of created mandate.
    CreatePaymentTermsDto:
      required:
        - frequency
        - type
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/CurrencyAmount'
        countPerPeriod:
          type: string
          description: Qualifies payment count per period
        firstPayment:
          $ref: '#/components/schemas/PaymentDto'
        frequency:
          type: string
          description: |-
            Payment frequency.
             * **ADHOC**: Event takes place on request or as necessary.
             * **DAILY**: Event takes place every day.
             * **FORTNIGHTLY**: Event takes place every two weeks.
             * **INTRA_DAY**: Event takes place several times a day.
             * **SEMI_ANNUAL**: Event takes place every six months or two times a year.
             * **MONTHLY**: Event takes place every month or once a month.
             * **QUARTERLY**: Event takes place every three months or four times a year.
             * **WEEKLY**: Event takes place once a week.
             * **ANNUAL**: Event takes place every year or once a year.
          enum:
            - ADHOC
            - DAILY
            - FORTNIGHTLY
            - INTRA_DAY
            - SEMI_ANNUAL
            - MONTHLY
            - QUARTERLY
            - WEEKLY
            - ANNUAL
        lastPayment:
          $ref: '#/components/schemas/PaymentDto'
        maximumAmount:
          $ref: '#/components/schemas/CurrencyAmount'
        pointInTime:
          maxLength: 2
          minLength: 2
          type: string
          description: Qualifies payment frequency
        type:
          type: string
          description: |-
            Payment type.
             * **BALLOON**: Payment amount is fixed with large final payment amount.
             * **FIXED**: Payment amount is fixed.
             * **USAGE_BASED**: Payment amount is based on usage.
             * **VARIABLE**: Payment amount is variable.
          enum:
            - BALLOON
            - FIXED
            - USAGE_BASED
            - VARIABLE
      description: Describes how payments for a mandate should happen.
    CreateStubForMandateSearchPaymentInstructionsRequestBody:
      required:
        - mandateIdentification
        - paymentInstructionSummaries
      type: object
      properties:
        mandateIdentification:
          pattern: ^[0-9a-fA-F]{32}$
          type: string
          description: ID of the mandate related to the payment instruction expressed as Unique identifier (UUID) version 1 format without the 4 hyphen separators.
        paymentInstructionSummaries:
          type: array
          description: Payment instruction list
          items:
            $ref: '#/components/schemas/PaymentInstructionSummary'
      description: Body of a request to create stub for mandate search payment instructions.
    CreateThresholdRequestBody:
      required:
        - id
        - percental
        - type
      type: object
      properties:
        active:
          type: boolean
          description: Determines whether the threshold is active. If set to **false**,the threshold will not be checked and won't raise an alert in case of a breach.
        amount:
          minimum: 1
          type: number
          description: Absolute monetary value for the threshold. Required if `percental` is set to **false**.
        id:
          type: string
          description: Unique identifier (UUID) for the threshold.
          format: uuid
        percent:
          maximum: 100
          minimum: 1
          type: integer
          description: Relative percentage value for the threshold. Required if `percental` is set to **true**.
          format: int32
        percental:
          type: boolean
          description: |-
            Calculation method for the threshold:
             * **true**: Threshold is set as a percentage of corresponding limit. When set to **true**, the `percent` field needs to be set.
             * **false**: Threshold is set as an absolute value. When set to **false**, the `amount` field needs to be set.
        type:
          type: string
          description: |-
            Liquidity threshold type:
             * **TOTAL_DAILY_INBOUND_DIRECT_DEBIT**: Total daily inbound Direct Debits threshold
             * **TOTAL_DAILY_NET_NON_SCHEME**: Total daily non-scheme payments threshold
             * **TOTAL_DAILY_NET_VISA**: Total daily Visa card payments threshold
             * **TOTAL_DAILY_OUTBOUND_BPAY**: Total daily outbound BPAY payments threshold
          enum:
            - TOTAL_DAILY_INBOUND_DIRECT_DEBIT
            - TOTAL_DAILY_NET_NON_SCHEME
            - TOTAL_DAILY_NET_VISA
            - TOTAL_DAILY_OUTBOUND_BPAY
      description: Body of a request to create a liquidity threshold alert.
    CreateTransactionRequestBody:
      required:
        - accountHayId
        - amount
        - counterpartName
        - description
        - idempotencyKey
        - transactionChannel
      type: object
      properties:
        accountHayId:
          type: string
          description: Unique identifier (UUID) of the Account
          format: uuid
        amount:
          type: number
          description: Value of the Transaction, to 2 decimal places
        category:
          type: string
          description: Category assigned to the Transaction
        counterpartName:
          type: string
          description: Counterpart name
        description:
          type: string
          description: Description on the Transaction
        idempotencyKey:
          type: string
          description: Unique value (UUID) used to identify this request and used to recognise any subsequent retries
          format: uuid
        originChannel:
          type: string
          description: |-
            Origin source of the Transaction (only applicable if specifically used by Client). Possible values:

             * **ATM_CASH**
             * **POS_DEBIT**
             * **VENUE**
          enum:
            - ATM_CASH
            - POS_DEBIT
            - VENUE
        originId:
          type: string
          description: Additional identifier applied to Transaction related to origin of the request
          format: uuid
        originType:
          type: string
          description: |-
            Initiator origin of the Transaction. Possible values:
             * **CUSTOMER**: Transaction initiated by a customer
             * **SCHEDULED_PAYMENT**: Transaction initiated by a schedule
             * **HAAS_OPERATIONS**: Transaction initiated by Client Operations team
             * **OPERATIONS**: Transaction initiated by Shaype Operations team
             * **DIRECT_DEBIT**: Transaction initiated by Direct Debit
          enum:
            - CUSTOMER
            - SCHEDULED_PAYMENT
            - HAAS_OPERATIONS
            - OPERATIONS
            - DIRECT_DEBIT
        reference:
          type: string
          description: Reference on the transaction (only applicable to NPP transactions), maximum 35 alphanumeric characters in length
        transactionChannel:
          type: string
          description: |-
            Transaction channels available for use by Shaype Clients. Possible values:
             * **ACCOUNT_ADJUSTMENT**
             * **APPLE_REWARD**
             * **INTEREST_ADJUSTMENT**
             * **LOAN_ADJUSTMENT**
             * **LOAN_REPAYMENT**
             * **MANUAL_ADJUSTMENT**
             * **SERVICE_FEE**
          enum:
            - LOAN_REPAYMENT
            - MANUAL_ADJUSTMENT
            - INTEREST_ADJUSTMENT
            - LOAN_ADJUSTMENT
            - ACCOUNT_ADJUSTMENT
            - SERVICE_FEE
            - APPLE_REWARD
      description: A body of a request to create a transaction.
    CurrencyAmount:
      required:
        - amount
        - currency
      type: object
      properties:
        amount:
          type: number
          description: Amount of the transaction to 2 decimal places
        currency:
          type: string
          description: Currency as three letter code as per ISO 4217
          enum:
            - AED
            - AFN
            - ALL
            - AMD
            - ANG
            - AOA
            - ARS
            - AUD
            - AWG
            - AZN
            - BAM
            - BBD
            - BDT
            - BGN
            - BHD
            - BIF
            - BMD
            - BND
            - BOB
            - BOV
            - BRL
            - BSD
            - BTN
            - BWP
            - BYN
            - BZD
            - CAD
            - CDF
            - CHF
            - CLP
            - CNH
            - CNY
            - COP
            - CRC
            - CUC
            - CUP
            - CVE
            - CZK
            - DJF
            - DKK
            - DOP
            - DZD
            - EGP
            - ERN
            - ETB
            - EUR
            - FJD
            - FKP
            - GBP
            - GEL
            - GHS
            - GIP
            - GMD
            - GNF
            - GTQ
            - GYD
            - HKD
            - HNL
            - HRK
            - HTG
            - HUF
            - IDR
            - ILS
            - INR
            - IQD
            - IRR
            - ISK
            - JMD
            - JOD
            - JPY
            - KES
            - KGS
            - KHR
            - KMF
            - KPW
            - KRW
            - KWD
            - KYD
            - KZT
            - LAK
            - LBP
            - LKR
            - LRD
            - LSL
            - LYD
            - MAD
            - MDL
            - MGA
            - MKD
            - MMK
            - MNT
            - MOP
            - MRU
            - MUR
            - MVR
            - MWK
            - MXN
            - MYR
            - MZN
            - NAD
            - NGN
            - NIO
            - NOK
            - NPR
            - NZD
            - OMR
            - PAB
            - PEN
            - PGK
            - PHP
            - PKR
            - PLN
            - PYG
            - QAR
            - RON
            - RSD
            - RUB
            - RWF
            - SAR
            - SBD
            - SCR
            - SDG
            - SEK
            - SGD
            - SHP
            - SLL
            - SOS
            - SRD
            - SSP
            - STN
            - SVC
            - SYP
            - SZL
            - THB
            - TJS
            - TMT
            - TND
            - TOP
            - TRY
            - TTD
            - TWD
            - TZS
            - UAH
            - UGX
            - USD
            - UYU
            - UZS
            - VES
            - VND
            - VUV
            - WST
            - XAF
            - XCD
            - XOF
            - XPF
            - YER
            - ZAR
            - ZMW
            - ZWL
      description: Monetary value and currency
    CurrencyAmountDto:
      type: object
      properties:
        amount:
          pattern: ^(?=.{1,19}$)[0-9]{0,18}(?:\.[0-9]{0,2})?$
          type: string
          description: Amount
        currency:
          pattern: ^[A-Z]{3}$
          type: string
          description: Currency code
      description: A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
    CustomerDetails:
      required:
        - dateOfBirth
        - firstName
        - lastName
      type: object
      properties:
        dateOfBirth:
          type: string
          description: Date of birth of the Customer in ISO format YYYY-MM-DD
          format: date
        firstName:
          type: string
          description: First name of the Customer
        gender:
          type: string
          description: |-
            Gender of the customer. Possible values:
             * **MALE**
             * **FEMALE**
             * **OTHER**
        lastName:
          type: string
          description: Last name of the Customer
        middleName:
          type: string
          description: Middle name(s) of the Customer
        preferredName:
          type: string
          description: Preferred name of the Customer
        title:
          type: string
          description: Title of the Customer
      description: Personal details of a customer
    DeTransactionDetails:
      type: object
      properties:
        amount:
          type: number
          description: Value of the Direct Debit transfer, to 2 decimal places
        description:
          type: string
          description: Description on Direct Debit transfer, maximum 18 characters in length
        outcome:
          type: string
          description: |-
            Status of the Direct Debits. Possible values:
             * **ACCEPTED**: Direct Debit has been accepted and awaiting submission to next Direct Entry payment batch
             * **REJECTED**: Direct Debit has been rejected and has not been submitted in Direct Entry payment batch
             * **RETURNED**: Direct Debit has been Returned from recipient financial institution
             * **SUBMITTED**: Direct Debit has been accepted and submitted in Direct Entry payment batch
          enum:
            - ACCEPTED
            - REJECTED
            - SUBMITTED
            - RETURNED
        processingDate:
          type: string
          description: Date that the Direct Debit transfer takes effect
          format: date
        recipientAccountNumber:
          type: string
          description: Account Number of Account receiving Direct Debit instruction (account to be debited), 5-9 digits in length
        recipientBsb:
          type: string
          description: BSB (Bank State Branch) of Account receiving Direct Debit instruction (account to be debited), 6 digits in length
        recipientName:
          type: string
          description: Name on the Account receiving Direct Debit instruction (account to be debited)
        senderAccountNumber:
          type: string
          description: Account Number of Account sending Direct Debit instruction (account to be credited), 5-9 digits in length
        senderBsb:
          type: string
          description: BSB (Bank State Branch) of Account sending Direct Debit instruction (account to be credited), 6 digits in length
        senderName:
          type: string
          description: Name on the Account sending Direct Debit instruction (account to be credited)
        transactionHayId:
          type: string
          description: Unique identifier (UUID) of the Transaction
          format: uuid
        type:
          type: string
          description: |-
            Transaction type. Possible values:
             * **DEBIT**
          enum:
            - CREDIT
            - DEBIT
      description: Details of the outbound Direct Debit transfer
    DeTransactionDetailsV1:
      required:
        - outcome
      type: object
      properties:
        amount:
          type: number
          description: Value of the Direct Debit transfer, to 2 decimal places
        description:
          type: string
          description: Description on Direct Debit transfer, maximum 18 characters in length
        outcome:
          type: string
          description: |
            Status of the Direct Debits. Possible values:
             * **RECEIVED**: Direct Debit request received for processing
             * **ACCEPTED**: Direct Debit has been accepted and awaiting submission to next Direct Entry payment batch
             * **REJECTED**: Direct Debit request failed validation or authorization and can't be executed
             * **SUBMITTED**: Direct Debit has been accepted and submitted in Direct Entry payment batch
             * **RETURNED**: Direct Debit request failed and was returned from the recipient financial institution. This direct debit cannot be executed
             * **COMPLETE**: Direct Debit request was successful and customer account credited successfully
             * **INCOMPLETE**: Direct Debit request was successful, but customer account crediting failed
          enum:
            - RECEIVED
            - ACCEPTED
            - REJECTED
            - SUBMITTED
            - RETURNED
            - COMPLETE
            - INCOMPLETE
        processingDate:
          type: string
          description: Date that the Direct Debit transfer takes effect
          format: date
        recipientAccountNumber:
          type: string
          description: Account Number of Account receiving Direct Debit instruction (account to be debited), 5-9 digits in length
        recipientBsb:
          type: string
          description: BSB (Bank State Branch) of Account receiving Direct Debit instruction (account to be debited), 6 digits in length
        recipientName:
          type: string
          description: Name on the Account receiving Direct Debit instruction (account to be debited)
        senderAccountNumber:
          type: string
          description: Account Number of Account sending Direct Debit instruction (account to be credited), 5-9 digits in length
        senderBsb:
          type: string
          description: BSB (Bank State Branch) of Account sending Direct Debit instruction (account to be credited), 6 digits in length
        senderName:
          type: string
          description: Name on the Account sending Direct Debit instruction (account to be credited)
        transactionHayId:
          type: string
          description: Unique identifier (UUID) of the Transaction
          format: uuid
        type:
          type: string
          description: |-
            Transaction type. Possible values:
             * **DEBIT**
          enum:
            - CREDIT
            - DEBIT
      description: Details of the outbound Direct Debit transfer
    DeleteAccountLimitResponse:
      type: object
      properties:
        success:
          type: boolean
    DigitalWalletDetails:
      type: object
      properties:
        primaryAccountIdentifier:
          type: string
          description: Identifier of the first wallet's (if more than one) creator PAN reference, as returned by wallet provider.
        wallets:
          type: array
          description: List of the digital wallets
          items:
            $ref: '#/components/schemas/ApiDigitalWallet'
      description: Details of all digital wallets
    DirectCreditLiquidity:
      required:
        - inbound
        - outbound
        - total
      type: object
      properties:
        inbound:
          type: number
        outbound:
          type: number
        total:
          type: number
    DirectDebitLiquidity:
      required:
        - inbound
        - outbound
        - total
      type: object
      properties:
        inbound:
          type: number
        outbound:
          type: number
        total:
          type: number
    DirectDebitResponse:
      required:
        - outcome
        - transactionId
      type: object
      properties:
        details:
          type: string
          description: Details of the outbound Direct Debit transfer
        outcome:
          type: string
          description: |-
            Status of the Direct Debits. Possible values:
             * **ACCEPTED**: Direct Debit has been accepted and awaiting submission to next Direct Entry payment batch
             * **REJECTED**: Direct Debit has been rejected and has not been submitted in Direct Entry payment batch
             * **RETURNED**: Direct Debit has been Returned from recipient financial institution
             * **SUBMITTED**: Direct Debit has been accepted and submitted in Direct Entry payment batch
          enum:
            - ACCEPTED
            - REJECTED
            - SUBMITTED
            - RETURNED
        traceId:
          type: string
          description: Unique identifier (UUID) of the request used by Shaype to troubleshoot
        transactionDetails:
          $ref: '#/components/schemas/DeTransactionDetails'
        transactionId:
          type: string
          description: Unique identifier (UUID) of the Transaction
          format: uuid
      description: Response of a request to create outbound Direct Debit instruction.
    DirectDebitResponseV1:
      required:
        - outcome
        - transactionId
      type: object
      properties:
        details:
          type: string
          description: Details of the outbound Direct Debit transfer
        outcome:
          type: string
          description: |
            Status of the Direct Debits. Possible values:
             * **RECEIVED**: Direct Debit request received for processing
             * **ACCEPTED**: Direct Debit has been accepted and awaiting submission to next Direct Entry payment batch
             * **REJECTED**: Direct Debit request failed validation or authorization and can't be executed
             * **SUBMITTED**: Direct Debit has been accepted and submitted in Direct Entry payment batch
             * **RETURNED**: Direct Debit request failed and was returned from the recipient financial institution. This direct debit cannot be executed
             * **COMPLETE**: Direct Debit request was successful and customer account credited successfully
             * **INCOMPLETE**: Direct Debit request was successful, but customer account crediting failed
          enum:
            - RECEIVED
            - ACCEPTED
            - REJECTED
            - SUBMITTED
            - RETURNED
            - COMPLETE
            - INCOMPLETE
        traceId:
          type: string
          description: Unique identifier (UUID) of the request used by Shaype to troubleshoot
        transactionDetails:
          $ref: '#/components/schemas/DeTransactionDetailsV1'
        transactionId:
          type: string
          description: Unique identifier (UUID) of the Transaction
          format: uuid
      description: Response of a request to create outbound Direct Debit instruction.
    DirectEntryLiquidity:
      required:
        - credit
        - debit
        - total
      type: object
      properties:
        credit:
          $ref: '#/components/schemas/DirectCreditLiquidity'
        debit:
          $ref: '#/components/schemas/DirectDebitLiquidity'
        total:
          type: number
    DisableRuleResponse:
      type: object
      properties:
        success:
          type: boolean
    DocumentData:
      required:
        - identityDocumentIssuingCountry
        - identityDocumentNumber
        - identityDocumentType
      type: object
      properties:
        identityDocumentCardNumber:
          pattern: ^[a-zA-Z0-9]{6,10}$
          type: string
          description: Optional identity document card number. Between 6 to 10 characters which can be either just numeric or alphanumeric characters based on the state. Should be specified for Driver's Licenses that provide it.
        identityDocumentIssuingCountry:
          type: string
          description: Three-letter ISO country code of the customer's identity document issuing country
        identityDocumentNumber:
          type: string
          description: Number of the Customer's identity document (if supplied)
        identityDocumentRegion:
          pattern: NSW|QLD|SA|TAS|VIC|WA|ACT|NT
          type: string
          description: 'Optional identity document region, one of: NSW, QLD, SA, TAS, VIC, WA, ACT, NT. (uppercase only) Should be specified for Driver''s Licenses.'
        identityDocumentType:
          type: string
          description: |-
            Type of Customer's identity document (if supplied). Possible values:
             * **DRIVING_LICENSE**
             * **PASSPORT**
          enum:
            - DRIVING_LICENSE
            - PASSPORT
      description: Document data of the customer. When provided will be updated as a whole, setting the not provided fields to null.
    ElevateExternalTokenRequestBody:
      required:
        - externalAccessToken
        - externalStepUpToken
      type: object
      properties:
        externalAccessToken:
          type: string
          description: External Access Token
        externalStepUpToken:
          type: string
          description: External Step Up Token
      description: Body of a request to elevate access
    ElevateExternalTokenResponse:
      type: object
      properties:
        elevationHeader:
          type: string
    ErrorResponse:
      type: object
      properties:
        details:
          type: string
          description: Error details
        message:
          type: string
          description: Error description
        status:
          type: string
          description: HTTP response status
        traceId:
          type: string
          description: TraceID that can be used by HAY for troubleshooting the request
      description: An error response.
    ExchangeExternalTokenRequestBody:
      required:
        - externalAccessToken
      type: object
      properties:
        externalAccessToken:
          type: string
          description: External Access Token
      description: Body of a request to exchange an external token for a hay token
    ExchangeExternalTokenResponse:
      type: object
      properties:
        accessExpiresUtc:
          type: integer
          format: int64
        accessToken:
          type: string
        installationHandle:
          type: string
    ExternalAddTransactionRuleRequest:
      required:
        - expiresIn
        - name
        - ruleDetails
        - ruleType
      type: object
      properties:
        expiresIn:
          minimum: 1
          type: integer
          description: Number of seconds until the Rule expires after it is created
          format: int64
        name:
          type: string
          description: Name assigned to the Rule
        ruleDetails:
          $ref: '#/components/schemas/RuleDetails'
        ruleType:
          type: string
          description: |-
            Type of Rule. Possible values:
            * **MERCHANT_CODE_BLOCK**: Transactions blocked by Merchant Category Code (MCC)
            * **MERCHANT_ID_BLOCK**: Transactions blocked by merchant ID
            * **MERCHANT_NAME_BLOCK**: Transactions blocked by merchant name
          enum:
            - MERCHANT_CODE_BLOCK
            - MERCHANT_ID_BLOCK
            - MERCHANT_NAME_BLOCK
      description: Body of a request to add transaction rule.
    ExternalCase:
      type: object
      properties:
        customerId:
          type: string
          description: Customer id.
          format: uuid
        id:
          type: string
          description: Unique identifier.
          format: uuid
        outcome:
          type: string
          description: |
            Identity verification outcome:
             * **NOT_EXECUTED** - Outcome is unknown because customer didn't complete the identity verification or customer input processing isn't complete yet
             * **REJECTED** - Customer failed identity verification
             * **WARNING** - System is unable to make a definitive judgment. Requires
             * **PASSED** - Customer passed identity verification
          enum:
            - NOT_EXECUTED
            - REJECTED
            - WARNING
            - PASSED
        timestamp:
          type: string
          description: The date and time the case was created.
          format: date-time
      description: Case
    ExternalCounterpartDetails:
      type: object
      properties:
        basicAccountNumber:
          $ref: '#/components/schemas/BasicAccountNumber'
        merchantDetails:
          $ref: '#/components/schemas/ExternalMerchantDetails'
        name:
          type: string
          description: Counterpart name
      description: Details of the counterpart
    ExternalLimitAmounts:
      type: object
      properties:
        accountLimit:
          type: number
          description: Custom limit applied to the Account
        effectiveLimit:
          type: number
          description: Effective limit applied to the Account
        productLimit:
          type: number
          description: Default limit applied to the Account based on the product
        type:
          type: string
          description: |-
            Account limit type. Possible values:
             * **ATM_WITHDRAWAL_PER_DAY**: Maximum value of ATM cash withdrawals
             * **BANK_TRANSFER_TOP_UP_PER_DAY**: Maximum value of inbound cash transfers
             * **BPAY_DAILY_LIMIT**: Maximum value of outgoing BPAY payments
             * **BPAY_TOP_UP_PER_DAY**: Not currently used
             * **CARD_PAYMENTS_DAILY**: Maximum value of Card payments
             * **CARD_TOP_UP_PER_DAY**: Not currently used
             * **DIRECT_DEBIT_PER_DAY**: Maximum value of outgoing direct debit transfers
             * **MAX_BALANCE**: Maximum balance that can be held in Account
             * **MIN_BALANCE**: Minimum balance that can be held in Account (Shaype use only)
             * **MIN_STACK_BALANCE**: Minimum balance that can be held in Stack (Shaype use only)
             * **OVERDRAFT_PRODUCT_LIMIT**: Maximum overdraft value that can be applied on Account
             * **PAYMENT_TO_ACCOUNT_NUMBER**: Maximum value of individual outgoing cash transfer
             * **PAYMENT_TO_PAY_ID**: Not currently used
             * **SINGLE_CARD_TRANSACTION**: Maximum value of individual Card payment
             * **TOTAL_SPEND_PER_YEAR**: Maximum value of outgoing transfers / payments on Account in a year
             * **TOP_UP_PER_DAY**: Maximum value of inbound cash transfers
          enum:
            - MAX_BALANCE
            - MIN_BALANCE
            - TOTAL_SPEND_PER_YEAR
            - ATM_WITHDRAWAL_PER_DAY
            - TOP_UP_PER_DAY
            - CARD_TOP_UP_PER_DAY
            - BPAY_TOP_UP_PER_DAY
            - BANK_TRANSFER_TOP_UP_PER_DAY
            - PAYMENT_TO_ACCOUNT_NUMBER
            - PAYMENT_TO_PAY_ID
            - CARD_PAYMENTS_DAILY
            - SINGLE_CARD_TRANSACTION
            - MIN_STACK_BALANCE
            - DIRECT_DEBIT_PER_DAY
            - OVERDRAFT_PRODUCT_LIMIT
            - BPAY_DAILY_LIMIT
      description: Details of an account limit.
    ExternalMandatePaymentDetails:
      required:
        - initiatingPartyName
        - instructionId
        - mandateId
      type: object
      properties:
        initiatingPartyName:
          maxLength: 140
          minLength: 1
          type: string
          description: Initiating Party Name
        instructionId:
          maxLength: 35
          minLength: 35
          type: string
          description: Unique mandate payment instruction identification assigned by the instructing party
        mandateId:
          type: string
          description: Mandate ID associated to the transaction
          format: uuid
      description: |
        Mandate information.
        <br/>
        Making Mandate Information available is under construction.
        The fields are provided to help with integration but no data will be provided at present.
        We will provide a communication when work is completed.
        Please ask your CSM if you have any questions.
    ExternalMerchantDetails:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/MerchantAddress'
        cardAcceptorLocation:
          type: string
          description: Name and/or location information of merchant, maximum 101 characters in length
        chainName:
          type: string
          description: Retail chain name - if merchant is part of a wider group this can be different to the merchant name
        circularLogoUrl:
          type: string
          description: Merchant logo
        merchantCategoryCode:
          type: integer
          description: Merchant Category Code (MCC) as four digit code as per ISO 18245
          format: int32
        merchantId:
          type: string
          description: Merchant ID, alphanumeric / special characters maximum 15 characters in length
        name:
          type: string
          description: Merchant name
        terminalId:
          type: string
          description: Terminal ID, alphanumeric / special characters maximum 8 characters in length
      description: Details of the merchant
    ExternalSetAccountLimitRequestBody:
      required:
        - limitAmount
      type: object
      properties:
        limitAmount:
          type: number
          description: Custom Account limit value being applied
      description: Body of a request to change an account limit.
    ExternalSetAccountLimitResponse:
      type: object
      properties:
        accountId:
          type: string
          description: Unique identifier (UUID) of the account.
          format: uuid
        limitAmount:
          type: number
          description: Custom Account limit value being applied
        limitType:
          type: string
          description: |-
            Account limits. Possible values:
             * **ATM_WITHDRAWAL_PER_DAY**: Maximum value of ATM cash withdrawals
             * **BANK_TRANSFER_TOP_UP_PER_DAY**: Maximum value of inbound cash transfers
             * **BPAY_DAILY_LIMIT**: Maximum value of outgoing BPAY payments
             * **BPAY_TOP_UP_PER_DAY**: Not currently used
             * **CARD_PAYMENTS_DAILY**: Maximum value of Card payments
             * **CARD_TOP_UP_PER_DAY**: Not currently used
             * **DIRECT_DEBIT_PER_DAY**: Maximum value of outgoing direct debit transfers
             * **MAX_BALANCE**: Maximum balance that can be held in Account
             * **MIN_BALANCE**: Minimum balance that can be held in Account (Shaype use only)
             * **MIN_STACK_BALANCE**: Minimum balance that can be held in Stack (Shaype use only)
             * **OVERDRAFT_PRODUCT_LIMIT**: Maximum overdraft value that can be applied on Account
             * **PAYMENT_TO_ACCOUNT_NUMBER**: Maximum value of individual outgoing cash transfer
             * **PAYMENT_TO_PAY_ID**: Not currently used
             * **SINGLE_CARD_TRANSACTION**: Maximum value of individual Card payment
             * **TOTAL_SPEND_PER_YEAR**: Maximum value of outgoing transfers / payments on Account in a year
             * **TOP_UP_PER_DAY**: Maximum value of inbound cash transfers
          enum:
            - MAX_BALANCE
            - MIN_BALANCE
            - TOTAL_SPEND_PER_YEAR
            - ATM_WITHDRAWAL_PER_DAY
            - TOP_UP_PER_DAY
            - CARD_TOP_UP_PER_DAY
            - BPAY_TOP_UP_PER_DAY
            - BANK_TRANSFER_TOP_UP_PER_DAY
            - PAYMENT_TO_ACCOUNT_NUMBER
            - PAYMENT_TO_PAY_ID
            - CARD_PAYMENTS_DAILY
            - SINGLE_CARD_TRANSACTION
            - MIN_STACK_BALANCE
            - DIRECT_DEBIT_PER_DAY
            - OVERDRAFT_PRODUCT_LIMIT
            - BPAY_DAILY_LIMIT
      description: Response body for setting of the account limit.
    ExternalTransactionRuleResponse:
      type: object
      properties:
        disabled:
          type: boolean
          description: Indicates if Rule is currently disabled
        expiresAtUtc:
          type: string
          description: DateTime in UTC format when the Rule expires
          format: date-time
        id:
          type: string
          description: Unique identifier (UUID) of the Rule
          format: uuid
        name:
          type: string
          description: Name assigned to the Rule
        ownerId:
          type: string
          description: Unique identifier (UUID) of the owner of Rule (either the Customer ID or Client Reference if a rule applied across the product)
        rule:
          $ref: '#/components/schemas/Rule'
        ruleType:
          type: string
          description: |-
            Type of Rule. Possible values:
            * **MERCHANT_CODE_BLOCK**: Transactions blocked by Merchant Category Code (MCC)
            * **MERCHANT_ID_BLOCK**: Transactions blocked by merchant ID
            * **MERCHANT_NAME_BLOCK**: Transactions blocked by merchant name
          enum:
            - MERCHANT_CODE_BLOCK
            - MERCHANT_ID_BLOCK
            - MERCHANT_NAME_BLOCK
      description: Details of the transaction rule
    FinancialTransaction:
      type: object
      properties:
        accountHayId:
          type: string
          description: Unique identifier (UUID) of the Account
          format: uuid
        cardId:
          type: string
          description: Unique identifier (UUID) of the Card
          format: uuid
        category:
          type: string
          description: Category assigned to the Transaction
        clearingTimeUtc:
          type: string
          description: DateTime in UTC format when Transaction was posted to Account
          format: date-time
        counterpartDetails:
          $ref: '#/components/schemas/ExternalCounterpartDetails'
        counterpartName:
          type: string
          description: Counterpart name
          deprecated: true
        countryOfExpenditure:
          type: string
          description: Country of the expenditure (applicable for card transactions)
          enum:
            - AFGHANISTAN
            - ALAND_ISLANDS
            - ALBANIA
            - ALGERIA
            - AMERICAN_SAMOA
            - ANDORRA
            - ANGOLA
            - ANGUILLA
            - ANTARCTICA
            - ANTIGUA_AND_BARBUDA
            - ARGENTINA
            - ARMENIA
            - ARUBA
            - AUSTRALIA
            - AUSTRIA
            - AZERBAIJAN
            - BAHAMAS
            - BAHRAIN
            - BANGLADESH
            - BARBADOS
            - BELARUS
            - BELGIUM
            - BELIZE
            - BENIN
            - BERMUDA
            - BHUTAN
            - BOLIVIA
            - CARIBBEAN_NETHERLANDS
            - BOSNIA_AND_HERZEGOVINA
            - BOTSWANA
            - BOUVET_ISLAND
            - BRAZIL
            - BRITISH_INDIAN_OCEAN_TERRITORY
            - BRUNEI
            - BULGARIA
            - BURKINA_FASO
            - BURUNDI
            - CAPE_VERDE
            - CAMBODIA
            - CAMEROON
            - CANADA
            - CAYMAN_ISLANDS
            - CENTRAL_AFRICAN_REPUBLIC
            - CHAD
            - CHILE
            - CHINA
            - CHRISTMAS_ISLAND
            - COCOS_ISLANDS
            - COLOMBIA
            - COMOROS
            - REPUBLIC_OF_THE_CONGO
            - DEMOCRATIC_REPUBLIC_OF_THE_CONGO
            - COOK_ISLANDS
            - COSTA_RICA
            - IVORY_COAST
            - CROATIA
            - CUBA
            - CURACAO
            - CYPRUS
            - CZECHIA
            - DENMARK
            - DJIBOUTI
            - DOMINICA
            - DOMINICAN_REPUBLIC
            - ECUADOR
            - EGYPT
            - EL_SALVADOR
            - EQUATORIAL_GUINEA
            - ERITREA
            - ESTONIA
            - ESWATINI
            - ETHIOPIA
            - FALKLAND_ISLANDS
            - FAROE_ISLANDS
            - FIJI
            - FINLAND
            - FRANCE
            - FRENCH_GUIANA
            - FRENCH_POLYNESIA
            - FRENCH_SOUTHERN_AND_ANTARCTIC_LANDS
            - GABON
            - THE_GAMBIA
            - GEORGIA
            - GERMANY
            - GHANA
            - GIBRALTAR
            - GREECE
            - GREENLAND
            - GRENADA
            - GUADELOUPE
            - GUAM
            - GUATEMALA
            - GUERNSEY
            - GUINEA
            - GUINEA_BISSAU
            - GUYANA
            - HAITI
            - HEARD_ISLAND_AND_MCDONALD_ISLANDS
            - VATICAN_CITY
            - HONDURAS
            - HONG_KONG
            - HUNGARY
            - ICELAND
            - INDIA
            - INDONESIA
            - IRAN
            - IRAQ
            - IRELAND
            - ISLE_OF_MAN
            - ISRAEL
            - ITALY
            - JAMAICA
            - JAPAN
            - JERSEY
            - JORDAN
            - KAZAKHSTAN
            - KENYA
            - KIRIBATI
            - NORTH_KOREA
            - SOUTH_KOREA
            - KUWAIT
            - KYRGYZSTAN
            - LAOS
            - LATVIA
            - LEBANON
            - LESOTHO
            - LIBERIA
            - LIBYA
            - LIECHTENSTEIN
            - LITHUANIA
            - LUXEMBOURG
            - MACAU
            - MACEDONIA
            - MADAGASCAR
            - MALAWI
            - MALAYSIA
            - MALDIVES
            - MALI
            - MALTA
            - MARSHALL_ISLANDS
            - MARTINIQUE
            - MAURITANIA
            - MAURITIUS
            - MAYOTTE
            - MEXICO
            - MICRONESIA
            - MOLDOVA
            - MONACO
            - MONGOLIA
            - MONTENEGRO
            - MONTSERRAT
            - MOROCCO
            - MOZAMBIQUE
            - MYANMAR
            - NAMIBIA
            - NAURU
            - NEPAL
            - NETHERLANDS
            - NEW_CALEDONIA
            - NEW_ZEALAND
            - NICARAGUA
            - NIGER
            - NIGERIA
            - NIUE
            - NORFOLK_ISLAND
            - NORTHERN_MARIANA_ISLANDS
            - NORWAY
            - OMAN
            - PAKISTAN
            - PALAU
            - PALESTINE
            - PANAMA
            - PAPUA_NEW_GUINEA
            - PARAGUAY
            - PERU
            - PHILIPPINES
            - PITCAIRN_ISLANDS
            - POLAND
            - PORTUGAL
            - PUERTO_RICO
            - QATAR
            - REUNION
            - ROMANIA
            - RUSSIA
            - RWANDA
            - SAINT_BARTHELEMY
            - SAINT_HELENA
            - SAINT_KITTS_AND_NEVIS
            - SAINT_LUCIA
            - SAINT_MARTIN_FRENCH_PART
            - SAINT_PIERRE_AND_MIQUELON
            - SAINT_VINCENT_AND_THE_GRENADINES
            - SAMOA
            - SAN_MARINO
            - SAO_TOME_AND_PRINCIPE
            - SAUDI_ARABIA
            - SENEGAL
            - SERBIA
            - SEYCHELLES
            - SIERRA_LEONE
            - SINGAPORE
            - SAINT_MARTIN_DUTCH_PART
            - SLOVAKIA
            - SLOVENIA
            - SOLOMON_ISLANDS
            - SOMALIA
            - SOUTH_AFRICA
            - SOUTH_GEORGIA
            - SOUTH_SUDAN
            - SPAIN
            - SRI_LANKA
            - SUDAN
            - SURINAME
            - SVALBARD_AND_JAN_MAYEN
            - SWEDEN
            - SWITZERLAND
            - SYRIA
            - TAIWAN
            - TAJIKISTAN
            - TANZANIA
            - THAILAND
            - TIMOR_LESTE
            - TOGO
            - TOKELAU
            - TONGA
            - TRINIDAD_AND_TOBAGO
            - TUNISIA
            - TURKEY
            - TURKMENISTAN
            - TURKS_AND_CAICOS_ISLANDS
            - TUVALU
            - UGANDA
            - UKRAINE
            - UNITED_ARAB_EMIRATES
            - UNITED_KINGDOM
            - UNITED_STATES_OF_AMERICA
            - UNITED_STATES_MINOR_OUTLYING_ISLANDS
            - URUGUAY
            - UZBEKISTAN
            - VANUATU
            - VENEZUELA
            - VIETNAM
            - BRITISH_VIRGIN_ISLANDS
            - UNITED_STATES_VIRGIN_ISLANDS
            - WALLIS_AND_FUTUNA
            - WESTERN_SAHARA
            - YEMEN
            - ZAMBIA
            - ZIMBABWE
        currencyAmount:
          $ref: '#/components/schemas/CurrencyAmount'
        customerId:
          type: string
          description: Unique identifier (UUID) of the Customer
          format: uuid
        description:
          type: string
          description: Description on the Transaction
        mandatePaymentDetails:
          $ref: '#/components/schemas/ExternalMandatePaymentDetails'
        originChannel:
          type: string
          description: |-
            Origin source of the Transaction (only applicable if specifically used by Client). Possible values:
             * **ATM_CASH**
             * **POS_DEBIT**
             * **VENUE**
          enum:
            - ATM_CASH
            - POS_DEBIT
            - VENUE
        originId:
          type: string
          description: Additional identifier applied to Transaction related to origin of the request
          format: uuid
        originType:
          type: string
          description: |-
            Initiator origin of the Transaction. Possible values:
             * **CUSTOMER**: Transaction initiated by a customer
             * **SCHEDULED_PAYMENT**: Transaction initiated by a schedule
             * **HAAS_OPERATIONS**: Transaction initiated by Client Operations team
             * **OPERATIONS**: Transaction initiated by Shaype Operations team
          enum:
            - CUSTOMER
            - SCHEDULED_PAYMENT
            - HAAS_OPERATIONS
            - OPERATIONS
            - MANDATE_PAYMENT
            - DIRECT_DEBIT
        originalCurrencyAmount:
          $ref: '#/components/schemas/CurrencyAmount'
        productId:
          type: string
          description: Unique identifier (UUID) of the Product of the account associated with the event
          format: uuid
        reference:
          type: string
          description: Reference on the transaction (only applicable to NPP transactions), maximum 35 alphanumeric characters in length
        relatedHoldHayId:
          type: string
          description: Unique identifier (UUID) of the Hold settled for the Transaction (only applicable to card transactions)
          format: uuid
        reportedFraudulent:
          type: boolean
          description: (NOT CURRENTLY IN USE) Indicates the Transaction has been reported as fraudulent
        rollingAccountBalance:
          type: number
          description: Total Account balance after the transaction posted to Account
        transactionChannel:
          type: string
          description: |-
            Transaction channels applicable to Shaype operated functions:
             * **APPLEPAY_CARD_NOT_PRESENT**
             * **APPLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL**
             * **APPLE_PAY_CARD_PRESENT**
             * **APPLE_PAY_CARD_PRESENT_INTERNATIONAL**
             * **BPAY_IN_REJECT**
             * **CUSCAL_BPAY_TRANSFER_OUT**
             * **CUSCAL_DE_CREDIT_IN**
             * **CUSCAL_DE_CREDIT_OUT**
             * **CUSCAL_DE_DEBIT_IN**
             * **CUSCAL_DE_DEBIT_OUT**
             * **CUSCAL_NPP_TRANSFER_IN**
             * **CUSCAL_NPP_TRANSFER_OUT**
             * **DE_DEBIT_RETURN_IN**
             * **GOOGLE_PAY_CARD_NOT_PRESENT**
             * **GOOGLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL**
             * **GOOGLE_PAY_CARD_PRESENT**
             * **GOOGLE_PAY_CARD_PRESENT_INTERNATIONAL**
             * **HAAS_TRANSFER_EXTERNAL_IN**
             * **HAAS_TRANSFER_EXTERNAL_OUT**
             * **HAAS_TRANSFER_INTERNAL_IN**
             * **HAAS_TRANSFER_INTERNAL_OUT**
             * **NPP_RETURN_IN**
             * **VISA_ATM DOMESTIC**
             * **VISA_ATM_INTERNATIONAL**
             * **VISA_CARD_NOT_PRESENT**
             * **VISA_CARD_NOT_PRESENT_INTERNATIONAL**
             * **VISA_CARD_PRESENT**
             * **VISA_CARD_PRESENT_INTERNATIONAL**
             * **VISA_CONTACTLESS**
             * **VISA_CONTACTLESS_INTERNATIONAL**
             * **VISA_OCT_DOMESTIC**
             * **VISA_OCT_INTERNATIONAL**
             * **VISA_OTHER**
             * **VISA_REFUND_DOMESTIC**
             * **VISA_REFUND_INTERNATIONAL**

            Transaction channels available for use by Shaype Clients:
             * **ACCOUNT_ADJUSTMENT**
             * **APPLE_REWARD**
             * **INTEREST_ADJUSTMENT**
             * **LOAN_ADJUSTMENT**
             * **LOAN_REPAYMENT**
             * **MANUAL_ADJUSTMENT**
             * **SERVICE_FEE**

            Transaction channels for Shaype internal use only:
             * **HAY_CREDIT**
             * **HAY_TO_HAY_TRANSFER_IN**
             * **HAY_TO_HAY_TRANSFER_OUT**
             * **VALUE_TRANSFER**

            Transaction channels not in use:
             * **CUSCAL_BPAY_TRANSFER_IN**
             * **CUSCAL_DE_TRANSFER_IN**
             * **CUSCAL_DE_TRANSFER_OUT**
             * **CUSCAL_DE_TRANSFER_OUT_RETURN**
             * **CARD_REFUNDS**
             * **CUSCAL_LEGACY**
             * **CUSCAL_NPP_SOLICITED_RETURN**
             * **FAT_ZEBRA_TRANSFER_IN**
             * **NPP_RETURN_OUT**
             * **VISA_ATM**
             * **VISA_LEGACY**
             * **VISA_REFUNDS_LEGACY**
          enum:
            - VISA_LEGACY
            - VISA_REFUNDS_LEGACY
            - VISA_CARD_NOT_PRESENT
            - VISA_CARD_NOT_PRESENT_INTERNATIONAL
            - VISA_CARD_PRESENT
            - VISA_CARD_PRESENT_INTERNATIONAL
            - APPLE_PAY_CARD_NOT_PRESENT
            - APPLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL
            - APPLE_PAY_CARD_PRESENT
            - APPLE_PAY_CARD_PRESENT_INTERNATIONAL
            - GOOGLE_PAY_CARD_NOT_PRESENT
            - GOOGLE_PAY_CARD_NOT_PRESENT_INTERNATIONAL
            - GOOGLE_PAY_CARD_PRESENT
            - GOOGLE_PAY_CARD_PRESENT_INTERNATIONAL
            - VISA_CONTACTLESS
            - VISA_CONTACTLESS_INTERNATIONAL
            - VISA_ATM
            - VISA_ATM_INTERNATIONAL
            - CARD_REFUNDS
            - VISA_OTHER
            - CUSCAL_LEGACY
            - CUSCAL_DE_TRANSFER_IN
            - CUSCAL_DE_DEBIT_IN
            - CUSCAL_DE_CREDIT_IN
            - CUSCAL_NPP_TRANSFER_IN
            - CUSCAL_BPAY_TRANSFER_IN
            - FAT_ZEBRA_TRANSFER_IN
            - HAY_TO_HAY_TRANSFER_IN
            - CUSCAL_DE_TRANSFER_OUT
            - CUSCAL_DE_DEBIT_OUT
            - CUSCAL_DE_CREDIT_OUT
            - CUSCAL_NPP_TRANSFER_OUT
            - CUSCAL_BPAY_TRANSFER_OUT
            - HAY_TO_HAY_TRANSFER_OUT
            - CUSCAL_NPP_SOLICITED_RETURN
            - CUSCAL_DE_TRANSFER_OUT_RETURN
            - DE_DEBIT_RETURN_IN
            - NPP_RETURN_IN
            - NPP_RETURN_OUT
            - HAY_CREDIT
            - APPLE_REWARD
            - VALUE_TRANSFER
            - LOAN_REPAYMENT
            - MANUAL_ADJUSTMENT
            - INTEREST_ADJUSTMENT
            - LOAN_ADJUSTMENT
            - VISA_OCT_DOMESTIC
            - VISA_OCT_INTERNATIONAL
            - ACCOUNT_ADJUSTMENT
            - HAAS_TRANSFER_EXTERNAL_IN
            - HAAS_TRANSFER_EXTERNAL_OUT
            - HAAS_TRANSFER_INTERNAL_IN
            - HAAS_TRANSFER_INTERNAL_OUT
            - SERVICE_FEE
            - BPAY_IN_REJECT
            - VISA_REFUND_DOMESTIC
            - VISA_REFUND_INTERNATIONAL
        transactionHayId:
          type: string
          description: Unique identifier (UUID) of the Transaction
          format: uuid
        transactionTimeUtc:
          type: string
          description: DateTime in UTC format when Transaction was initiated / received on the Account
          format: date-time
        type:
          type: string
          description: |-
            Transaction type. Possible values:
             * **ATM_WITHDRAWAL **: Cash withdrawal from ATM
             * **BPAY_TRANSFER_IN **: (not currently in use)
             * **BPAY_TRANSFER_OUT **: BPAY payment made out of Account
             * **CARD_NOT_PRESENT_PAYMENT **: Payment online using card details, Apple Pay or Google Pay
             * **CARD_PAYMENT_REVERSAL **: Refund for previous card payment
             * **CARD_PRESENT_PAYMENT **: Payment using physical card, Apple device or Android device at physical terminal
             * **DIRECT_DEBIT_TRANSFER **: Cash transfer out of Account via Direct Debit
             * **INTERBANK_TRANSFER_IN **: Cash transfer into Account via Direct Credit or NPP
             * **INTERBANK_TRANSFER_OUT **: Cash transfer out of Account via Direct Credit or NPP
             * **INTRABANK_TRANSFER_IN **: Cash transfer into Account via ShaypePay
             * **INTRABANK_TRANSFER_OUT **: Cash transfer out of Account via ShaypePay
             * **INTERBANK_TRANSFER_OUT_REVERSAL **: (not currently in use)
             * **GENERAL_CREDIT **: General purpose credit on Account
             * **GENERAL_DEBIT **: General purpose debit on Account
             * **ORIGINAL_CREDIT **: Cash transfer to card via Visa OCT payment
          enum:
            - CARD_PRESENT_PAYMENT
            - CARD_NOT_PRESENT_PAYMENT
            - INTRABANK_TRANSFER_IN
            - INTRABANK_TRANSFER_OUT
            - INTERBANK_TRANSFER_IN
            - INTERBANK_TRANSFER_OUT
            - DIRECT_DEBIT_TRANSFER
            - ATM_WITHDRAWAL
            - CARD_PAYMENT_REVERSAL
            - INTERBANK_TRANSFER_OUT_REVERSAL
            - GENERAL_CREDIT
            - GENERAL_DEBIT
            - ORIGINAL_CREDIT
            - BPAY_TRANSFER_OUT
            - BPAY_TRANSFER_IN
      description: Details of a financial transaction.
    GenerateCardTransactionRequestBody:
      required:
        - amount
        - cardToken
      type: object
      properties:
        amount:
          type: number
          description: Transaction amount.
        cardToken:
          type: string
          description: Public card token to use.
      description: Body of a request to insert a card transaction.
    GenerateHoldAndCardTransactionRequestBody:
      required:
        - amount
        - cardToken
        - settlementDelayInSeconds
      type: object
      properties:
        amount:
          type: number
          description: Transaction amount.
        cardToken:
          type: string
          description: Public card token to use.
        settlementDelayInSeconds:
          maximum: 300
          minimum: 5
          type: integer
          description: Number of seconds to delay the settlement by. Has to be between 5 and 300 seconds.
          format: int32
      description: Body of a request to insert a card authorisation, followed by a settlement.
    GenerateInboundNppTransactionRequestBody:
      required:
        - amount
        - description
        - idempotencyKey
        - receiverAccountNumber
        - receiverBsb
        - receiverName
        - senderAccountNumber
        - senderBsb
        - senderName
      type: object
      properties:
        amount:
          type: number
          description: Transaction amount.
        description:
          type: string
          description: Transaction description.
        idempotencyKey:
          type: string
          description: Idempotency key to uniquely represent this request and prevent duplication.
          format: uuid
        receiverAccountNumber:
          pattern: '[0-9]{8}'
          type: string
          description: Receiving customer account number.
        receiverBsb:
          pattern: '[0-9]{6}'
          type: string
          description: Receiving customer BSB.
        receiverName:
          type: string
          description: Receiving customer name.
        reference:
          type: string
          description: Optional transaction reference.
        senderAccountNumber:
          pattern: '[0-9]{6,9}'
          type: string
          description: Sender account number.
        senderBsb:
          pattern: '[0-9]{6}'
          type: string
          description: Sender BSB.
        senderName:
          type: string
          description: Sender name.
      description: Body of a request to insert an inbound NPP transaction.
    GenerateInitiatorMandateNotificationRequestBody:
      required:
        - actionDetails
        - mandateDetails
        - trigger
      type: object
      properties:
        actionDetails:
          $ref: '#/components/schemas/GenerateMandateNotificationActionDetailsDto'
        mandateDetails:
          $ref: '#/components/schemas/GenerateMandateNotificationMandateDetailsDto'
        trigger:
          maxLength: 4
          minLength: 4
          type: string
          description: |
            Notification trigger.
            * **MCRC**: Mandate Create Confirmed
            * **MCRD**: Mandate Create Declined
            * **MCRX**: Mandate Create Expired
            * **MAMC**: Mandate Amend Confirmed
            * **MAMD**: Mandate Amend Declined
            * **MAMN**: Mandate Amended
            * **MAMX**: Mandate Amend Expired
            * **MPOF**: Mandate Port Finalised
            * **MPOT**: Mandate Ported
            * **MPOX**: Mandate Port Expired
            * **MSCH**: Mandate Status Changed
          enum:
            - MCRC,MCRD,MCRX,MAMC,MAMD,MAMN,MAMX,MPOF,MPOT,MPOX,MSCH
      description: Body of a request to notify initiator about mandate operation preformed.
    GenerateMandateNotificationActionDetailsDto:
      required:
        - actionId
      type: object
      properties:
        actionId:
          pattern: ^[0-9a-fA-F]{32}$
          type: string
          description: Identifier of the action performed expressed as Unique identifier (UUID) version 1 format without the 4 hyphen separators.
      description: Details of an action performed on a mandate.
    GenerateMandateNotificationCreditorInformationDto:
      required:
        - accountIdentification
      type: object
      properties:
        accountIdentification:
          maxLength: 34
          minLength: 7
          type: string
          description: Creditor account identification in BBAN format.
      description: Information concerning a creditor party identified in the mandate.
    GenerateMandateNotificationDebtorInformationDto:
      required:
        - accountIdentification
      type: object
      properties:
        accountIdentification:
          maxLength: 34
          minLength: 7
          type: string
          description: Debtor account identification in BBAN format.
      description: Information concerning a debtor party identified in the mandate.
    GenerateMandateNotificationMandateDetailsDto:
      required:
        - debtorInformation
        - mandateId
        - paymentInformation
        - validityStartDate
      type: object
      properties:
        creditorInformation:
          $ref: '#/components/schemas/GenerateMandateNotificationCreditorInformationDto'
        debtorInformation:
          $ref: '#/components/schemas/GenerateMandateNotificationDebtorInformationDto'
        description:
          maxLength: 140
          minLength: 1
          type: string
          description: Reason for the mandate setup as narrative text.
        mandateId:
          pattern: ^[0-9a-fA-F]{32}$
          type: string
          description: Identifier of the mandate affected by action expressed as Unique identifier (UUID) version 1 format without the 4 hyphen separators.
        paymentInformation:
          $ref: '#/components/schemas/GenerateMandateNotificationPaymentInformationDto'
        shortDescription:
          maxLength: 35
          minLength: 1
          type: string
          description: Short description of the reason for mandate setup as narrative text.
        validityEndDate:
          pattern: (?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
          type: string
          description: End date of the validity of the mandate expressed in YYYY-MM-DD format.. If specified, the mandate is valid until 23:59:59.999 Australia Sydney time on this date.
        validityStartDate:
          pattern: (?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
          type: string
          description: Start date of the validity of the mandate expressed in YYYY-MM-DD format.. The mandate is valid as of 00:00:00.000 Australia Sydney time on this date.
      description: Mandate details
    GenerateMandateNotificationPaymentInformationDto:
      required:
        - paymentFrequency
      type: object
      properties:
        amount:
          pattern: ^(?=.{1,19}$)[0-9]{0,18}(?:\.[0-9]{0,2})?$
          type: string
          description: Fixed amount to be debited from the debtor's account.
        countPerPeriod:
          pattern: ^(?=.{1,19}$)[0-9]{0,19}(?:\.[0-9]{0,18})?$
          type: string
          description: Qualifies the frequency in terms of the number of instructions to be created and processed during the specified period.
        firstPaymentAmount:
          pattern: ^(?=.{1,19}$)[0-9]{0,18}(?:\.[0-9]{0,2})?$
          type: string
          description: Amount different from the payment amount, as it includes the costs associated with the first debited amount.
        firstPaymentDate:
          pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
          type: string
          description: Date of the first payment predefined in mandate expressed in YYYY-MM-DD format.
        lastPaymentAmount:
          pattern: ^(?=.{1,19}$)[0-9]{0,18}(?:\.[0-9]{0,2})?$
          type: string
          description: Last payment amount different to the payment amount.
        lastPaymentDate:
          pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
          type: string
          description: Date of the last payment predefined in mandate expressed in YYYY-MM-DD format.
        maximumAmount:
          pattern: ^(?=.{1,19}$)[0-9]{0,18}(?:\.[0-9]{0,2})?$
          type: string
          description: Maximum amount that may be paid from the debtor's account, per instruction.
        paymentAmountType:
          type: string
          description: |
            Identifies the mandate payment arrangement.
            * **BALN**: Balloon - Payment amount is fixed with large final payment amount.
            * **FIXE**: Fixed - Payment amount is fixed.
            * **USGB**: Usage Based - Payment amount is based on usage.
            * **VARI**: Variable - Payment amount is variable.
        paymentFrequency:
          type: string
          description: |
            Regularity with which instructions are to be created and processed.
            * **ADHO**: Adhoc - Event takes place on request or as necessary.
            * **DAIL**: Daily - Event takes place every day.
            * **FRTN**: Fortnightly - Event takes place every two weeks.
            * **INDA**: IntraDay - Event takes place several times a day.
            * **MIAN**: SemiAnnual - Event takes place every six months or two times a year.
            * **MNTH**: Monthly - Event takes place every month or once a month.
            * **QURT**: Quarterly - Event takes place every three months or four times a year.
            * **WEEK**: Weekly - Event takes place once a week.
            * **YEAR**: Annual - Event takes place every year or once a year.
        pointInTime:
          pattern: ^[0-9]{2}$
          type: string
          description: Qualifies the frequency in terms of an exact point in time or moment within the specified period.
      description: Set of characteristics detailing mandate payment information.
    GeneratePayerMandateNotificationRequestBody:
      required:
        - actionDetails
        - mandateDetails
        - trigger
      type: object
      properties:
        actionDetails:
          $ref: '#/components/schemas/GenerateMandateNotificationActionDetailsDto'
        mandateDetails:
          $ref: '#/components/schemas/GenerateMandateNotificationMandateDetailsDto'
        trigger:
          maxLength: 4
          minLength: 4
          type: string
          description: |
            Notification trigger.
            * **MCRX**: Mandate Create Expired
            * **MCRT**: Mandate Created
            * **MCRP**: Mandate Create Proposed
            * **MAMN**: Mandate Amended
            * **MAMP**: Mandate Amend Proposed
            * **MAMR**: Mandate Amended Recalled
            * **MAMX**: Mandate Amend Expired
            * **MSCH**: Mandate Status Changed
          enum:
            - MCRX,MCRT,MCRP,MAMN,MAMP,MAMR,MAMX,MSCH
      description: Body of a request to notify payer about mandate operation preformed.
    GenerateRapCreditorInformation:
      required:
        - accountIdentification
        - accountIdentificationTypeCode
      type: object
      properties:
        accountIdentification:
          maxLength: 34
          minLength: 0
          type: string
          description: Creditor's account identifier i.e. BSB and Account number
        accountIdentificationTypeCode:
          maxLength: 4
          minLength: 4
          type: string
          description: Creditor's account's scheme
        ultimatePartyName:
          maxLength: 140
          minLength: 0
          type: string
          description: Ultimate Creditor Name Must be populated when there is value against unique_superannuation_identification or unique_superannuation_code
      description: Mandate payment creditor party information.
    GenerateRapDebtorInformation:
      required:
        - accountIdentification
        - accountIdentificationTypeCode
        - partyName
      type: object
      properties:
        accountIdentification:
          maxLength: 34
          minLength: 0
          type: string
          description: Debtor account identifier i.e. BSB and Account number
        accountIdentificationTypeCode:
          maxLength: 4
          minLength: 4
          type: string
          description: Debtor account scheme.
        partyName:
          maxLength: 140
          minLength: 0
          type: string
          description: Debtor name Debtor Agent records (may be different from the Debtor's legal name)
      description: Mandate payment debtor party information.
    GenerateRapMandateInformation:
      required:
        - mandateIdentification
      type: object
      properties:
        initiatingPartyName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Initiating Party Name. Must be populated for mandate payments
        instructionIdentification:
          pattern: ^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}I[0-9]{8}00[0-9]{12}[01]$
          type: string
          description: Unique mandate payment instruction identification assigned by the instructing party. Must be populated for mandate payments
        mandateIdentification:
          pattern: ^[a-f0-9]{12}1[a-f0-9]{3}[89ab][a-f0-9]{15}$
          type: string
          description: 'Mandate ID associated to the transaction. Must be populated for mandate payments. ID of mandate related to payment instruction. Universally Unique IDentifier (UUID) version 1, as described in IETC RFC 4122 "Universally Unique IDentifier (UUID) URN Namespace" without the 4 hyphen separators. For example: ''00000000000010008000000000000000'' instead of ''00000000-0000-1000-8000-000000000000'' (without quotes)'
      description: Information on the mandate associated with the payment request.
    GenerateRapPaymentInformation:
      required:
        - endToEndIdentification
        - instructedAmount
        - originalMessageIdentification
        - transactionIdentification
      type: object
      properties:
        categoryPurposeCode:
          maxLength: 4
          minLength: 4
          type: string
          description: Payment Category code  Download the 'External Code Sets' spreadsheet from https://www.iso20022.org/external_code_list.page and navigate to the '4-CategoryPurpose' tab for a full list of payment Category codes. "EPAY", "SALA", "SUPP", "PENS", "TAXS"
        endToEndIdentification:
          maxLength: 35
          minLength: 0
          type: string
          description: End to End identifier. This is the Debtor's (customer) reference for the Payment to be provided to Creditor (customer).  End to End is used as guidance text for Payer channels in the use of the Reference (EndToEndId) field. If the payer populates the details in the channel, the the same is passed on to the payee.    If the payer does not populate, the default value will apply.
        instructedAmount:
          pattern: ^(?=.{1,19}$)[0-9]{0,18}(?:\.[0-9]{0,2})?$
          type: string
          description: Instructed amount
        originalMessageIdentification:
          maxLength: 34
          minLength: 34
          type: string
          description: The original messageID of the incoming payment.
        remittanceInformationUnstructured:
          maxLength: 280
          minLength: 0
          type: string
          description: Payment Description For category_purpose_code = SALA, Comments relating to specific employee information will be provided in this field.
          example: This is a payment for invoice number 123456.
        transactionIdentification:
          pattern: ^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}N[0-9]{8}00[0-9]{12}[01]$
          type: string
          description: 'A unique Payment Transaction Identifier generated by the sending client. the payment identifier must follow the following fixed character pattern NPP guidelines:  - 1 to 11     clients BIC11  - 12             fixed value ''N''  - 13 to 20   YYYYMMDD  - 21 to 22   fixed value ''00''  - 23 to 34   sequence number starting from 000000000001  - 35             retry counter, always set to 0 unless its a retry, retries start at 1.'
          example: BANKNTSTXXXN20180501000000000000010
        uniqueSuperannuationCode:
          type: string
          description: For category_purpose_code = PENS, Comments relating to USI code indicating the identifier to whom the superannuation fund will be provided in this field.
      description: Mandate payment initiation information.
    GenerateRapPaymentReturnInformation:
      type: object
      properties:
        originalTransactionIdentification:
          maxLength: 35
          minLength: 35
          type: string
          description: Original payment transaction ID.  It will be present if a genuine response is received from BI.
          example: BANKNTSTXXXN20180511CT0000458203590
        returnAmount:
          pattern: ^(?=.{1,19}$)[0-9]{0,18}(?:\.[0-9]{0,2})?$
          type: string
          description: Interbank settlement amount.  It will be present if a genuine response is received from BI.
          example: '100.0'
        returnReasonCode:
          maxLength: 4
          minLength: 4
          type: string
          description: 'Payment return reason code. If this field is populated, then this is a inbound payment return '
      description: Encapsulates payment data for payment initiated by the payer directly into payee's account.
    GenerateRapRequestBody:
      required:
        - creditorInformation
        - debtorInformation
        - initgPtyIdOrgId
        - paymentId
        - paymentInformation
      type: object
      properties:
        creditorInformation:
          $ref: '#/components/schemas/GenerateRapCreditorInformation'
        debtorInformation:
          $ref: '#/components/schemas/GenerateRapDebtorInformation'
        initgPtyIdOrgId:
          pattern: ^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$
          type: string
          description: InitgPtyIdOrgId is the BIC11 of the client sending the payment instruction to Cuscal. Please note this value will be provided to you by Cuscal as part of on-boarding
        mandateInformation:
          $ref: '#/components/schemas/GenerateRapMandateInformation'
        paymentId:
          pattern: ^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}[0-9]{23}$
          type: string
          description: paymentId is the unique Payment Transaction ID of a payment that has been previously submitted to Cuscal.
        paymentInformation:
          $ref: '#/components/schemas/GenerateRapPaymentInformation'
        paymentReturnInformation:
          $ref: '#/components/schemas/GenerateRapPaymentReturnInformation'
      description: Encapsulates payment data for payment initiated by the payer directly into payee's account
    GenerateRapainCreditorInformation:
      required:
        - accountIdentification
        - partyName
      type: object
      properties:
        accountIdentification:
          pattern: ^[ -~]{1,34}$
          type: string
          description: Creditor account identification.
        partyName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Creditor Name. Name by which creditor party is known and which is usually used to identify that party.
      description: Mandate payment creditor party information.
    GenerateRapainDebtorInformation:
      required:
        - accountIdentification
        - partyName
      type: object
      properties:
        accountIdentification:
          pattern: ^[ -~]{1,34}$
          type: string
          description: Debtor account identification.
        partyName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Debtor Name. Name of the Debtor party.
      description: Mandate payment debtor party information.
    GenerateRapainMandateInformation:
      required:
        - initiatingPartyName
        - mandateIdentification
      type: object
      properties:
        initiatingPartyName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: The party that initiates the credit transfer on behalf of the debtor.
        mandateIdentification:
          pattern: ^[a-f0-9]{12}1[a-f0-9]{3}[89ab][a-f0-9]{15}$
          type: string
          description: 'ID of mandate related to payment instruction. Universally Unique IDentifier (UUID) version 1, as described in IETC RFC 4122 "Universally Unique IDentifier (UUID) URN Namespace" without the 4 hyphen separators. For example: ''00000000000010008000000000000000'' instead of ''00000000-0000-1000-8000-000000000000'' (without quotes)'
      description: Information on the mandate associated with the payment request.
    GenerateRapainPaymentInformation:
      required:
        - instructedAmount
        - instructionIdentification
      type: object
      properties:
        instructedAmount:
          pattern: ^(?=.{1,19}$)[0-9]{0,18}(?:\.[0-9]{0,2})?$
          type: string
          description: Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        instructionIdentification:
          pattern: ^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}I[0-9]{8}00[0-9]{12}[01]$
          type: string
          description: Instruction identification.
        remittanceInformationUnstructured:
          maxLength: 280
          minLength: 1
          type: string
          description: Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
      description: Mandate payment initiation information.
    GenerateRapainRequestBody:
      required:
        - creditorInformation
        - debtorInformation
        - mandateInformation
        - paymentInformation
        - transactionStatusInformation
      type: object
      properties:
        creditorInformation:
          $ref: '#/components/schemas/GenerateRapainCreditorInformation'
        debtorInformation:
          $ref: '#/components/schemas/GenerateRapainDebtorInformation'
        mandateInformation:
          $ref: '#/components/schemas/GenerateRapainMandateInformation'
        paymentInformation:
          $ref: '#/components/schemas/GenerateRapainPaymentInformation'
        transactionStatusInformation:
          $ref: '#/components/schemas/GenerateRapainTransactionStatusInformation'
    GenerateRapainTransactionStatusInformation:
      required:
        - transactionStatus
      type: object
      properties:
        transactionStatus:
          type: string
          description: |-
            Specifies the status of an individual payment instructions..
             * **ACCP**: Accepted.
             * **RJCT**: Rejected.
          enum:
            - ACCP,RJCT
      description: Details of initial response to mandate payment request by Cuscal.
    GenericMessage:
      type: object
      properties:
        message:
          type: string
          description: Message indicating operation result
      description: Message response
    GetMandateActionsActionDto:
      required:
        - actionIdentification
        - creationEvent
        - mandateIdentification
        - notificationPriority
        - status
        - type
      type: object
      properties:
        actionIdentification:
          type: string
          description: ID of the action performed.
          format: uuid
        bilateral:
          type: boolean
          description: Boolean flag indicating if the action was created as bilateral or unilateral. This will only be present for mandate creation and amendment actions.
        creationEvent:
          $ref: '#/components/schemas/GetMandateActionsCreationEventDto'
        cxEventNameCreation:
          maxLength: 140
          minLength: 1
          type: string
          description: Display value as defined for Mandate creation event. Examples - Payment agreement Received or Updated payment terms received or Transfer Initiated.
        cxEventNameResolution:
          maxLength: 140
          minLength: 1
          type: string
          description: Display value as defined for Mandate resolution event. Examples - Payment agreement Declined or Updated payment terms authorised or Transfer Completed
        details:
          $ref: '#/components/schemas/GetMandateActionsDetailsDto'
        expiryTime:
          pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]{1,3})?(?:Z)$
          type: string
          description: For a bilateral mandate creation or amendment action, or for a porting action, this will contain the timestamp at which the action will expire if no resolution is provided.
        mandateIdentification:
          type: string
          description: ID of the mandate affected by the action.
          format: uuid
        notificationPriority:
          type: string
          description: |
            Notification priority provided by the initiator of the action.
            * **NORMAL**: Notification priority indicating that the sending participant requires
                          a synchronous response to their request. Attended mode of operation.
            * **UNATTENDED**: Notification priority indicating that the sending participant requires
                          an asynchronous response to their request. Unattended mode of operation.
          enum:
            - NORMAL,UNATTENDED
        resolutionEvent:
          $ref: '#/components/schemas/GetMandateActionsResolutionEventDto'
        resolutionRequestedBy:
          pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]{1,3})?(?:Z)$
          type: string
          description: Optional time used to indicate by when resolution of a bilateral action is requested from the other party to the mandate. This time is for informational purposes only and does not affect the expiry time imposed by the MMS.
        status:
          type: string
          description: |
            Status of the action performed on the mandate.
            Enumeration of the states that a mandate action can have:
            * **COMPLETED**: This status represents the following situations:
                        * A bilateral action that has been confirmed.
                        * A unilateral action has been performed.
                        * A port that has been finalised.
            * **DECLINED**: Action has been declined.
            * **PENDING**: This status represents the following situations:
                        * A bilateral action that is waiting to be confirmed.
                        * A porting action that has been initiated and is waiting to be finalised.
            * **RECALLED**: Action has been recalled.
            * **TIMED_OUT**: TimedOut - Action was created bilaterally and has now timed out.
          enum:
            - COMPLETED,DECLINED,PENDING,RECALLED,TIMED_OUT
        type:
          type: string
          description: |
            Type of action performed on the mandate.
            Enumeration of all mandate action types:
            * **AMEND**: Mandate amendment.
            * **CREATE**: Mandate creation.
            * **PORT**: Mandate porting.
            * **STATUS_CHANGE**: Mandate status change.
          enum:
            - AMEND,CREATE,PORT,STATUS_CHANGE
      description: Details of an action performed on a mandate.
    GetMandateActionsCreationEventDto:
      required:
        - partyRole
        - servicerBic
        - sponsorBic
        - time
      type: object
      properties:
        partyRole:
          type: string
          description: |
            Party role of the mandate that triggered the event.
            Enumeration of the party roles that can initiate an action on a mandate:
            * **DEBTOR**: Debtor party role.
            * **PAYMENT_INITIATOR**: Payment Initiator party role.
          enum:
            - DEBTOR,PAYMENT_INITIATOR
        servicerBic:
          pattern: ^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$
          type: string
          description: Identification of the party who triggered the event on the action.
        sponsorBic:
          pattern: ^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$
          type: string
          description: Identification of the agent that sponsors the servicer at the moment the event was triggered.
        time:
          pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]{1,3})?(?:Z)$
          type: string
          description: Timestamp of when the event occurred on the mandate action. UTC expressed without offset, i.e. YYYY-MM-DDThh:mm:ss.sssZ
      description: Specification of the creation event for a mandate action.
    GetMandateActionsDetailsAmendmentCreditorInformationDto:
      type: object
      properties:
        accountAliasIdentification:
          maxLength: 2048
          minLength: 1
          type: string
          description: Identification used to indicate the account identification under another specified name. If this property is set to '-' it means that the account alias identification has been cleared.
        accountAliasTypeCode:
          type: string
          description: |
            Name of the Alias Type, in a coded form as published in an external list.
            * **PHONE_NUMBER**: Telephone Number
            * **EMAIL_ADDRESS**: Email Address
            * **AUSTRALIAN_BUSINESS_NUMBER**: Australian Business Number
            * **ORGANISATION_ID**: Organisation Identifier
          enum:
            - PHONE_NUMBER,EMAIL_ADDRESS,AUSTRALIAN_BUSINESS_NUMBER,ORGANISATION_ID
        accountId:
          type: string
          description: Platform identifier of the creditor account
          format: uuid
        accountIdentificationIssuer:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Entity or classification under which the identification is assigned. If this property is set to '-' it means that the account identification issuer has been cleared.
        accountIdentificationTypeCode:
          type: string
          description: |
            Type of account identification, in a coded form.
            * **BASIC_BANK_ACCOUNT_NUMBER**: Basic Bank Account Number
            * **ALIAS**: Alias Identification
          enum:
            - BASIC_BANK_ACCOUNT_NUMBER,ALIAS
        accountNumber:
          pattern: ^[ -~]{11,15}$
          type: string
          description: BSB (Bank State Branch) of Account, 6 digits in length combined with account number, 5-9 digits in length. If this property is set to '-' it means that the account identification has been cleared.
        accountServicerBic:
          pattern: ^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$
          type: string
          description: Party that manages the account on behalf of the account owner, includes managing the registration and booking of entries on the account, calculating balances on the account and providing information about the account. If this property is set to 'ZZZZZZZZZZZ' it means that the servicer BIC has been cleared.
        fullLegalAccountName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Full Legal Account Name recorded by the Account Server in their records. If this property is set to '-' it means that the full legal account name has been cleared.
        partyIdentification:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Unique and unambiguous identification of the party. If this property is set to '-' it means that the party identification has been cleared.
        partyIdentificationTypeCode:
          type: string
          description: |
            Code indicating the identification type of the party, for example in the case of a private individual; passport, driver licence, or 100 point check, or in the case of an organisation; LEI, ACN, ABN. If this property is set to 'ZZZZ' it means that the party identification type code has been cleared.
            * **ALIEN_REGISTRATION_NUMBER**: Alien Registration Number
            * **PASSPORT_NUMBER**: Passport Number
            * **CUSTOMER_ID**: Customer Identification Number
            * **DRIVER_LICENSE_NUMBER**: Drivers License Number
            * **EMPLOYEE_ID**: Employee Identification Number
            * **NATIONAL_IDENTITY_NUMBER**: National Identity Number
            * **SOCIAL_SECURITY_NUMBER**: Social Security Number
            * **TAX_ID**: Tax Identification Number
            * **BANK_PARTY_ID**: Bank Party Identification
            * **CENTRAL_BANK_ID**: Central Bank Identification Number
            * **CLEARING_ID**: Clearing Identification Number
            * **CERTIFICATE_OF_INCORPORATION_NUMBER**: Certificate Of Incorporation Number
            * **COUNTRY_ID_CODE**: Country Identification Code
            * **DATA_UNIVERSAL_NUMBERING_SYSTEM**: Data Universal Numbering System
            * **GS1GLN_ID**: GS1GLN Identifier
            * **SIREN**: SIREN
            * **SIRET**: SIRET
            * **AUSTRALIAN_BUSINESS_NUMBER**: Australian Business Number (ABN)
            * **AUSTRALIAN_COMPANY_NUMBER**: Australian Company Number (ACN)
            * **LEGAL_ENTITY_ID**: Legal Entity Identification (LEI)
          enum:
            - ALIEN_REGISTRATION_NUMBER,PASSPORT_NUMBER,CUSTOMER_ID,DRIVER_LICENSE_NUMBER,EMPLOYEE_ID,NATIONAL_IDENTITY_NUMBER,SOCIAL_SECURITY_NUMBER,TAX_ID,BANK_PARTY_ID,CENTRAL_BANK_ID,CLEARING_ID,CERTIFICATE_OF_INCORPORATION_NUMBER,COUNTRY_ID_CODE,DATA_UNIVERSAL_NUMBERING_SYSTEM,GS1GLN_ID,SIREN,SIRET,AUSTRALIAN_BUSINESS_NUMBER,AUSTRALIAN_COMPANY_NUMBER,LEGAL_ENTITY_ID
        partyName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Name by which the party is known and which is usually used to identify that party.
        partyReference:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Specifies underlying reference associated with the mandate as provided by party, for example Customer Reference, Customer Number, Membership Number, Subscription Number, or Name. If this property is set to '-' it means that the party reference has been cleared.
        partyType:
          type: string
          description: |
            Identifies the type of a party. Once the party type has been set it is not possible to clear it through a mandate amendment.
            * **ORGANISATION**: Party is an organisation.
            * **PERSON**: Party is an private individual.
          enum:
            - ORGANISATION,PERSON
        ultimatePartyName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Name by which the ultimate party is known and which is usually used to identify that party.
      description: Information concerning amendment of a creditor party identified in the mandate.
    GetMandateActionsDetailsAmendmentDebtorInformationDto:
      type: object
      properties:
        accountAliasIdentification:
          maxLength: 2048
          minLength: 1
          type: string
          description: Identification used to indicate the account identification under another specified name. If this property is set to '-' it means that the account alias identification has been cleared.
        accountAliasTypeCode:
          type: string
          description: |
            Name of the Alias Type, in a coded form as published in an external list.
            * **PHONE_NUMBER**: Telephone Number
            * **EMAIL_ADDRESS**: Email Address
            * **AUSTRALIAN_BUSINESS_NUMBER**: Australian Business Number
            * **ORGANISATION_ID**: Organisation Identifier
          enum:
            - PHONE_NUMBER,EMAIL_ADDRESS,AUSTRALIAN_BUSINESS_NUMBER,ORGANISATION_ID
        accountId:
          type: string
          description: Platform identifier of the debtor account
          format: uuid
        accountIdentificationIssuer:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Entity or classification under which the identification is assigned. If this property is set to '-' it means that the account identification issuer has been cleared.
        accountIdentificationTypeCode:
          type: string
          description: |
            Type of account identification, in a coded form.
            * **BASIC_BANK_ACCOUNT_NUMBER**: Basic Bank Account Number
            * **ALIAS**: Alias Identification
          enum:
            - BASIC_BANK_ACCOUNT_NUMBER,ALIAS
        accountNumber:
          pattern: ^[ -~]{11,15}$
          type: string
          description: BSB (Bank State Branch) of Account, 6 digits in length combined with account number, 5-9 digits in length. If this property is set to '-' it means that the account identification has been cleared.
        accountServicerBic:
          pattern: ^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$
          type: string
          description: Party that manages the account on behalf of the account owner, includes managing the registration and booking of entries on the account, calculating balances on the account and providing information about the account. If this property is set to 'ZZZZZZZZZZZ' it means that the servicer BIC has been cleared.
        fullLegalAccountName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Full Legal Account Name recorded by the Account Server in their records. If this property is set to '-' it means that the full legal account name has been cleared.
        partyIdentification:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Unique and unambiguous identification of the party. If this property is set to '-' it means that the party identification has been cleared.
        partyIdentificationTypeCode:
          type: string
          description: |
            Code indicating the identification type of the party, for example in the case of a private individual; passport, driver licence, or 100 point check, or in the case of an organisation; LEI, ACN, ABN. If this property is set to 'ZZZZ' it means that the party identification type code has been cleared.
            * **ALIEN_REGISTRATION_NUMBER**: Alien Registration Number
            * **PASSPORT_NUMBER**: Passport Number
            * **CUSTOMER_ID**: Customer Identification Number
            * **DRIVER_LICENSE_NUMBER**: Drivers License Number
            * **EMPLOYEE_ID**: Employee Identification Number
            * **NATIONAL_IDENTITY_NUMBER**: National Identity Number
            * **SOCIAL_SECURITY_NUMBER**: Social Security Number
            * **TAX_ID**: Tax Identification Number
            * **BANK_PARTY_ID**: Bank Party Identification
            * **CENTRAL_BANK_ID**: Central Bank Identification Number
            * **CLEARING_ID**: Clearing Identification Number
            * **CERTIFICATE_OF_INCORPORATION_NUMBER**: Certificate Of Incorporation Number
            * **COUNTRY_ID_CODE**: Country Identification Code
            * **DATA_UNIVERSAL_NUMBERING_SYSTEM**: Data Universal Numbering System
            * **GS1GLN_ID**: GS1GLN Identifier
            * **SIREN**: SIREN
            * **SIRET**: SIRET
            * **AUSTRALIAN_BUSINESS_NUMBER**: Australian Business Number (ABN)
            * **AUSTRALIAN_COMPANY_NUMBER**: Australian Company Number (ACN)
            * **LEGAL_ENTITY_ID**: Legal Entity Identification (LEI)
          enum:
            - ALIEN_REGISTRATION_NUMBER,PASSPORT_NUMBER,CUSTOMER_ID,DRIVER_LICENSE_NUMBER,EMPLOYEE_ID,NATIONAL_IDENTITY_NUMBER,SOCIAL_SECURITY_NUMBER,TAX_ID,BANK_PARTY_ID,CENTRAL_BANK_ID,CLEARING_ID,CERTIFICATE_OF_INCORPORATION_NUMBER,COUNTRY_ID_CODE,DATA_UNIVERSAL_NUMBERING_SYSTEM,GS1GLN_ID,SIREN,SIRET,AUSTRALIAN_BUSINESS_NUMBER,AUSTRALIAN_COMPANY_NUMBER,LEGAL_ENTITY_ID
        partyName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Name by which the party is known and which is usually used to identify that party.
        partyReference:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Specifies underlying reference associated with the mandate as provided by party, for example Customer Reference, Customer Number, Membership Number, Subscription Number, or Name. If this property is set to '-' it means that the party reference has been cleared.
        partyType:
          type: string
          description: |
            Identifies the type of a party. Once the party type has been set it is not possible to clear it through a mandate amendment.
            * **ORGANISATION**: Party is an organisation.
            * **PERSON**: Party is an private individual.
          enum:
            - ORGANISATION,PERSON
        ultimatePartyName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Name by which the ultimate party is known and which is usually used to identify that party.
      description: Information concerning amendment of a debtor party identified in the mandate.
    GetMandateActionsDetailsAmendmentDto:
      type: object
      properties:
        automaticExtensionIndicator:
          type: boolean
          description: Automatic renewal of a mandate arrangement at the end of the defined period (period start through period end).
        bescUserIdentification:
          type: string
          description: BECS user ID related to migrated DDR mandate. If this property is set to '-' it means that the BECS_user_identification has been cleared on the mandate.
        creditorInformation:
          $ref: '#/components/schemas/GetMandateActionsDetailsAmendmentCreditorInformationDto'
        debtorInformation:
          $ref: '#/components/schemas/GetMandateActionsDetailsAmendmentDebtorInformationDto'
        description:
          maxLength: 140
          minLength: 1
          type: string
          description: Reason for the mandate setup as narrative text. If this property is set to '-' it means that the description has been cleared on the mandate.
        mandateDetailsCxExtension:
          $ref: '#/components/schemas/GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto'
        nppBackofficeService:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Specifies a NPP backoffice service identification under which the mandate resides. If this property is set to '-' it means that the NPP backoffice service identification has been cleared on the mandate.
        paymentInformation:
          $ref: '#/components/schemas/GetMandateActionsDetailsAmendmentPaymentInformationDto'
        paymentInitiatorInformation:
          $ref: '#/components/schemas/GetMandateActionsDetailsAmendmentPaymentInitiatorInformationDto'
        resolutionRequestedBy:
          pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]{1,3})?(?:Z)$
          type: string
          description: Optional time used to indicate by when resolution of a bilateral action is requested from the other party to the mandate. It will be ignored if the resulting amendment action is not bilateral. For bilateral amendments, it will be provided in any notification sent to the counterparty. This time is for informational purposes only and does not affect the expiry time imposed by the MMS.
        shortDescription:
          maxLength: 35
          minLength: 1
          type: string
          description: Short description of the reason for mandate setup as narrative text. If this property is set to '-' it means that the short description has been cleared on the mandate.
        transferArrangement:
          maxLength: 140
          minLength: 1
          type: string
          description: Indication of future transfer date, conditions of sale and requirement to hold funds.
        validityEndDate:
          pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
          type: string
          description: End date of the validity of the mandate. If specified, the mandate is valid until 23:59:59.999 Australia Sydney time on this date. If this property is set to '1000-01-01' it means that the validity end date has been cleared on the mandate.
      description: Request to amend the details of a mandate.
    GetMandateActionsDetailsAmendmentMandateDetailsCxExtensionDto:
      type: object
      properties:
        cxAmountDisplay:
          maxLength: 140
          minLength: 1
          type: string
          description: Field display of cxAmountLabel
        cxAmountLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, Amount.
        cxAutomaticExtensionIndicatorLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, Automatic Renewal.
        cxDebtorAccountIdentificationLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: 'Label example - Linked PayID: cameron@nppa.com.au or Linked Account: Everyday Savings BSB 040-981/Acc No 7484728'
        cxDebtorAccountIdentificationTypeCodeDisplay:
          maxLength: 140
          minLength: 1
          type: string
          description: Field display value for cxDebtorAccountIdentificationTypeCodeLabel.
        cxDebtorAccountIdentificationTypeCodeLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, Payer Account Type.
        cxDebtorPartyNameLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, Payer.
        cxDebtorPartyReferenceLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, Payment Reference.
        cxDebtorUltimatePartyNameLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, Ultimate Payer.
        cxDescriptionLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, Description.
        cxFirstPaymentAmountLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, First Payment Amount.
        cxInitiatorPartyNameDisplay:
          maxLength: 300
          minLength: 1
          type: string
          description: Field display value for cxInitiatorPartyNameLabel.
        cxInitiatorPartyNameLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, Payee or Payment Initiator.
        cxLastPaymentAmountLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, Last Payment Amount.
        cxMandatePurposeCodeDisplay:
          maxLength: 140
          minLength: 1
          type: string
          description: 'Field display condition of cxMandatePurposeCodeLabel. Example: Purpose: Utility Payments'
        cxMandatePurposeCodeLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, Purpose.
        cxMandateStatus:
          type: string
          description: |
            Extended status of a mandate.
            * **ACTION_REQUIRED**: Action Required.
            * **ACTIVE_TRANSFER_INITIATED**: Active, Transfer Initiated.
            * **PAUSED_TRANSFER_INITIATED**: Paused, Transfer Initiated.
            * **TRANSFERRED**: Transferred.
            * **ACTIVE**: Active.
            * **PAUSED_BY_PAYMENT_INITIATOR**: Paused by Payment Initiator.
            * **PAUSED_BY_CUSTOMER**: Paused by Customer.
            * **PAUSED_BY_PAYER_INSTITUTION**: Paused by Payer Institution.
            * **CANCELLED_AUTHORISATION_TIMED_OUT**: Cancelled, Authorisation Timed Out.
            * **CANCELLED_BY_PAYMENT_INITIATOR**: Cancelled by Payment Initiator.
            * **CANCELLED**: Cancelled.
          enum:
            - ACTION_REQUIRED,ACTIVE_TRANSFER_INITIATED,PAUSED_TRANSFER_INITIATED,TRANSFERRED,ACTIVE,PAUSED_BY_PAYMENT_INITIATOR,PAUSED_BY_CUSTOMER,PAUSED_BY_PAYER_INSTITUTION,CANCELLED_AUTHORISATION_TIMED_OUT,CANCELLED_BY_PAYMENT_INITIATOR,CANCELLED
        cxMandateStatusDisplay:
          maxLength: 140
          minLength: 1
          type: string
          description: 'Field display condition of cxMandateStatusLabel. Example: - Status: Transfer Initiated'
        cxMandateStatusLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, Status
        cxPaymentAmountTypeDisplay:
          maxLength: 140
          minLength: 1
          type: string
          description: 'Field display value for cxPaymentAmountTypeLabel, example - Agreement Type: Fixed / Balloon / Usage based / Variable.'
        cxPaymentAmountTypeLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, Agreement Type.
        cxPaymentExecuteNotBeforeTimeLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, Execution Time.
        cxPaymentFrequencyDisplay:
          maxLength: 140
          minLength: 1
          type: string
          description: Field display value of cxPaymentFrequencyLabel.
        cxPaymentFrequencyLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, Frequency.
        cxPortingIdentificationLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, Transfer ID.
        cxShortDescriptionLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, Short Description.
        cxTransferArrangementLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, Transfer Details.
        cxValidityEndDateLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, End Date.
        cxValidityStartDateLabel:
          maxLength: 35
          minLength: 1
          type: string
          description: Label example, Start Date
      description: This schema maps to the fields provided in other schemas e.g. MandateDetails1, for related CX label and respective display value. Respective field names are prefixed with CX and suffixed with either _label or _display for easy referencing.
    GetMandateActionsDetailsAmendmentPaymentInformationDto:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/CurrencyAmountDto'
        countPerPeriod:
          pattern: ^(?=.{1,19}$)[0-9]{0,19}(?:\.[0-9]{0,18})?$
          type: string
          description: Qualifies the frequency in terms of the number of instructions to be created and processed during the specified period. If this property is set to '0' it means that the count per period has been cleared on the mandate.
        firstPaymentAmount:
          $ref: '#/components/schemas/CurrencyAmountDto'
        firstPaymentDate:
          pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
          type: string
          description: Date of the first payment predefined in mandate. If this property is set to '1000-01-01' it means that the first payment date has been cleared on the mandate.
        lastPaymentAmount:
          $ref: '#/components/schemas/CurrencyAmountDto'
        lastPaymentDate:
          pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
          type: string
          description: Date of the last payment predefined in mandate. If this property is set to '1000-01-01' it means that the last payment date has been cleared on the mandate.
        maximumAmount:
          $ref: '#/components/schemas/CurrencyAmountDto'
        paymentAmountType:
          type: string
          description: |
            Identifies the mandate payment arrangement. If this property is set to 'ZZZZ' it means that the payment amount type has been cleared on the mandate.
            * **BALLOON**: Payment amount is fixed with large final payment amount.
            * **FIXED**: Payment amount is fixed.
            * **USAGE_BASED**: Payment amount is based on usage.
            * **VARIABLE**: Payment amount is variable.
          enum:
            - BALLOON,FIXED,USAGE_BASED,VARIABLE
        paymentExecuteNotBeforeTime:
          pattern: ^(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]{1,3})?(?:Z)|(-)$
          type: string
          description: Indicates that each execution of the mandate payment should not occur before a given time of that execution day. If this property is set to '-' it means that the time has been cleared on the mandate.
        paymentFrequency:
          type: string
          description: |
            Regularity with which instructions are to be created and processed.
            * **ADHOC**: Event takes place on request or as necessary.
            * **DAILY**: Event takes place every day.
            * **FORTNIGHTLY**: Event takes place every two weeks.
            * **INTRA_DAY**: Event takes place several times a day.
            * **SEMI_ANNUAL**: Event takes place every six months or two times a year.
            * **MONTHLY**: Event takes place every month or once a month.
            * **QUARTERLY**: Event takes place every three months or four times a year.
            * **WEEKLY**: Event takes place once a week.
            * **ANNUAL**: Event takes place every year or once a year.
          enum:
            - ADHOC,DAILY,FORTNIGHTLY,INTRA_DAY,SEMI_ANNUAL,MONTHLY,QUARTERLY,WEEKLY,ANNUAL
        pointInTime:
          pattern: ^[0-9]{2}$
          type: string
          description: Qualifies the frequency in terms of an exact point in time or moment within the specified period. If this property is set to '00' it means that the point in time has been cleared on the mandate.
      description: Set of characteristics enabling amendment of mandate payment information.
    GetMandateActionsDetailsAmendmentPaymentInitiatorInformationDto:
      type: object
      properties:
        partyIdentification:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Unique and unambiguous identification of the party.
        partyIdentificationTypeCode:
          type: string
          description: |
            Code indicating the identification type of the party.
            * **ALIEN_REGISTRATION_NUMBER**: Alien Registration Number
            * **PASSPORT_NUMBER**: Passport Number
            * **CUSTOMER_ID**: Customer Identification Number
            * **DRIVER_LICENSE_NUMBER**: Drivers License Number
            * **EMPLOYEE_ID**: Employee Identification Number
            * **NATIONAL_IDENTITY_NUMBER**: National Identity Number
            * **SOCIAL_SECURITY_NUMBER**: Social Security Number
            * **TAX_ID**: Tax Identification Number
            * **BANK_PARTY_ID**: Bank Party Identification
            * **CENTRAL_BANK_ID**: Central Bank Identification Number
            * **CLEARING_ID**: Clearing Identification Number
            * **CERTIFICATE_OF_INCORPORATION_NUMBER**: Certificate Of Incorporation Number
            * **COUNTRY_ID_CODE**: Country Identification Code
            * **DATA_UNIVERSAL_NUMBERING_SYSTEM**: Data Universal Numbering System
            * **GS1GLN_ID**: GS1GLN Identifier
            * **SIREN**: SIREN
            * **SIRET**: SIRET
            * **AUSTRALIAN_BUSINESS_NUMBER**: Australian Business Number (ABN)
            * **AUSTRALIAN_COMPANY_NUMBER**: Australian Company Number (ACN)
            * **LEGAL_ENTITY_ID**: Legal Entity Identification (LEI)
          enum:
            - ALIEN_REGISTRATION_NUMBER,PASSPORT_NUMBER,CUSTOMER_ID,DRIVER_LICENSE_NUMBER,EMPLOYEE_ID,NATIONAL_IDENTITY_NUMBER,SOCIAL_SECURITY_NUMBER,TAX_ID,BANK_PARTY_ID,CENTRAL_BANK_ID,CLEARING_ID,CERTIFICATE_OF_INCORPORATION_NUMBER,COUNTRY_ID_CODE,DATA_UNIVERSAL_NUMBERING_SYSTEM,GS1GLN_ID,SIREN,SIRET,AUSTRALIAN_BUSINESS_NUMBER,AUSTRALIAN_COMPANY_NUMBER,LEGAL_ENTITY_ID
        partyLegalName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Name by which the party is legally known.
        partyName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Name by which the party is known and which is usually used to identify that party.
      description: Information concerning a payment initiator party identified in the mandate.
    GetMandateActionsDetailsCreationCreditorInformationDto:
      required:
        - accountIdentificationTypeCode
        - partyName
        - ultimatePartyName
      type: object
      properties:
        accountAliasIdentification:
          maxLength: 2048
          minLength: 1
          type: string
          description: Identification used to indicate the account identification under another specified name.
        accountAliasTypeCode:
          type: string
          description: |
            Name of the Alias Type, in a coded form as published in an external list.
            * **PHONE_NUMBER**: Telephone Number
            * **EMAIL_ADDRESS**: Email Address
            * **AUSTRALIAN_BUSINESS_NUMBER**: Australian Business Number
            * **ORGANISATION_ID**: Organisation Identifier
          enum:
            - PHONE_NUMBER,EMAIL_ADDRESS,AUSTRALIAN_BUSINESS_NUMBER,ORGANISATION_ID
        accountId:
          type: string
          description: Platform identifier of the creditor account
          format: uuid
        accountIdentificationIssuer:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Entity or classification under which the identification is assigned.
        accountIdentificationTypeCode:
          type: string
          description: |
            Type of account identification, in a coded form.
            * **BASIC_BANK_ACCOUNT_NUMBER**: Basic Bank Account Number
            * **ALIAS**: Alias Identification
          enum:
            - BASIC_BANK_ACCOUNT_NUMBER,ALIAS
        accountNumber:
          pattern: ^[ -~]{11,15}$
          type: string
          description: BSB (Bank State Branch) of Account, 6 digits in length combined with account number, 5-9 digits in length.
        accountServicerBic:
          pattern: ^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$
          type: string
          description: Party that manages the account on behalf of the account owner, includes managing the registration and booking of entries on the account, calculating balances on the account and providing information about the account.
        fullLegalAccountName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Full Legal Account Name recorded by the Account Server in their records.
        partyIdentification:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Unique and unambiguous identification of the party.
        partyIdentificationTypeCode:
          type: string
          description: |
            Code indicating the identification type of the party, for example in the case of a private individual; passport, driver licence, or 100 point check, or in the case of an organisation; LEI, ACN, ABN.
            * **ALIEN_REGISTRATION_NUMBER**: Alien Registration Number
            * **PASSPORT_NUMBER**: Passport Number
            * **CUSTOMER_ID**: Customer Identification Number
            * **DRIVER_LICENSE_NUMBER**: Drivers License Number
            * **EMPLOYEE_ID**: Employee Identification Number
            * **NATIONAL_IDENTITY_NUMBER**: National Identity Number
            * **SOCIAL_SECURITY_NUMBER**: Social Security Number
            * **TAX_ID**: Tax Identification Number
            * **BANK_PARTY_ID**: Bank Party Identification
            * **CENTRAL_BANK_ID**: Central Bank Identification Number
            * **CLEARING_ID**: Clearing Identification Number
            * **CERTIFICATE_OF_INCORPORATION_NUMBER**: Certificate Of Incorporation Number
            * **COUNTRY_ID_CODE**: Country Identification Code
            * **DATA_UNIVERSAL_NUMBERING_SYSTEM**: Data Universal Numbering System
            * **GS1GLN_ID**: GS1GLN Identifier
            * **SIREN**: SIREN
            * **SIRET**: SIRET
            * **AUSTRALIAN_BUSINESS_NUMBER**: Australian Business Number (ABN)
            * **AUSTRALIAN_COMPANY_NUMBER**: Australian Company Number (ACN)
            * **LEGAL_ENTITY_ID**: Legal Entity Identification (LEI)
          enum:
            - ALIEN_REGISTRATION_NUMBER,PASSPORT_NUMBER,CUSTOMER_ID,DRIVER_LICENSE_NUMBER,EMPLOYEE_ID,NATIONAL_IDENTITY_NUMBER,SOCIAL_SECURITY_NUMBER,TAX_ID,BANK_PARTY_ID,CENTRAL_BANK_ID,CLEARING_ID,CERTIFICATE_OF_INCORPORATION_NUMBER,COUNTRY_ID_CODE,DATA_UNIVERSAL_NUMBERING_SYSTEM,GS1GLN_ID,SIREN,SIRET,AUSTRALIAN_BUSINESS_NUMBER,AUSTRALIAN_COMPANY_NUMBER,LEGAL_ENTITY_ID
        partyName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Name by which the party is known and which is usually used to identify that party.
        partyReference:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Specifies underlying reference associated with the mandate as provided by party, for example Customer Reference, Customer Number, Membership Number, Subscription Number, or Name.
        partyType:
          type: string
          description: |
            Identifies the type of a party. Once the party type has been set it is not possible to clear it through a mandate amendment.
            * **ORGANISATION**: Party is an organisation.
            * **PERSON**: Party is an private individual.
          enum:
            - ORGANISATION,PERSON
        ultimatePartyName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Name by which the ultimate party is known and which is usually used to identify that party.
      description: Information concerning a creditor party identified in the mandate.
    GetMandateActionsDetailsCreationDebtorInformationDto:
      required:
        - accountIdentificationTypeCode
        - partyName
        - ultimatePartyName
      type: object
      properties:
        accountAliasIdentification:
          maxLength: 2048
          minLength: 1
          type: string
          description: Identification used to indicate the account identification under another specified name.
        accountAliasTypeCode:
          type: string
          description: |
            Name of the Alias Type, in a coded form as published in an external list.
            * **PHONE_NUMBER**: Telephone Number
            * **EMAIL_ADDRESS**: Email Address
            * **AUSTRALIAN_BUSINESS_NUMBER**: Australian Business Number
            * **ORGANISATION_ID**: Organisation Identifier
          enum:
            - PHONE_NUMBER,EMAIL_ADDRESS,AUSTRALIAN_BUSINESS_NUMBER,ORGANISATION_ID
        accountId:
          type: string
          description: Platform identifier of the creditor account
          format: uuid
        accountIdentificationIssuer:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Entity or classification under which the identification is assigned.
        accountIdentificationTypeCode:
          type: string
          description: |
            Type of account identification, in a coded form.
            * **BASIC_BANK_ACCOUNT_NUMBER**: Basic Bank Account Number
            * **ALIAS**: Alias Identification
          enum:
            - BASIC_BANK_ACCOUNT_NUMBER,ALIAS
        accountNumber:
          pattern: ^[ -~]{11,15}$
          type: string
          description: BSB (Bank State Branch) of Account, 6 digits in length combined with account number, 5-9 digits in length.
        accountServicerBic:
          pattern: ^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$
          type: string
          description: Party that manages the account on behalf of the account owner, includes managing the registration and booking of entries on the account, calculating balances on the account and providing information about the account.
        fullLegalAccountName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Full Legal Account Name recorded by the Account Server in their records.
        partyIdentification:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Unique and unambiguous identification of the party.
        partyIdentificationTypeCode:
          type: string
          description: |
            Code indicating the identification type of the party, for example in the case of a private individual; passport, driver licence, or 100 point check, or in the case of an organisation; LEI, ACN, ABN.
            * **ALIEN_REGISTRATION_NUMBER**: Alien Registration Number
            * **PASSPORT_NUMBER**: Passport Number
            * **CUSTOMER_ID**: Customer Identification Number
            * **DRIVER_LICENSE_NUMBER**: Drivers License Number
            * **EMPLOYEE_ID**: Employee Identification Number
            * **NATIONAL_IDENTITY_NUMBER**: National Identity Number
            * **SOCIAL_SECURITY_NUMBER**: Social Security Number
            * **TAX_ID**: Tax Identification Number
            * **BANK_PARTY_ID**: Bank Party Identification
            * **CENTRAL_BANK_ID**: Central Bank Identification Number
            * **CLEARING_ID**: Clearing Identification Number
            * **CERTIFICATE_OF_INCORPORATION_NUMBER**: Certificate Of Incorporation Number
            * **COUNTRY_ID_CODE**: Country Identification Code
            * **DATA_UNIVERSAL_NUMBERING_SYSTEM**: Data Universal Numbering System
            * **GS1GLN_ID**: GS1GLN Identifier
            * **SIREN**: SIREN
            * **SIRET**: SIRET
            * **AUSTRALIAN_BUSINESS_NUMBER**: Australian Business Number (ABN)
            * **AUSTRALIAN_COMPANY_NUMBER**: Australian Company Number (ACN)
            * **LEGAL_ENTITY_ID**: Legal Entity Identification (LEI)
          enum:
            - ALIEN_REGISTRATION_NUMBER,PASSPORT_NUMBER,CUSTOMER_ID,DRIVER_LICENSE_NUMBER,EMPLOYEE_ID,NATIONAL_IDENTITY_NUMBER,SOCIAL_SECURITY_NUMBER,TAX_ID,BANK_PARTY_ID,CENTRAL_BANK_ID,CLEARING_ID,CERTIFICATE_OF_INCORPORATION_NUMBER,COUNTRY_ID_CODE,DATA_UNIVERSAL_NUMBERING_SYSTEM,GS1GLN_ID,SIREN,SIRET,AUSTRALIAN_BUSINESS_NUMBER,AUSTRALIAN_COMPANY_NUMBER,LEGAL_ENTITY_ID
        partyName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Name by which the party is known and which is usually used to identify that party.
        partyReference:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Specifies underlying reference associated with the mandate as provided by party, for example Customer Reference, Customer Number, Membership Number, Subscription Number, or Name.
        partyType:
          type: string
          description: |
            Identifies the type of a party. Once the party type has been set it is not possible to clear it through a mandate amendment.
            * **ORGANISATION**: Party is an organisation.
            * **PERSON**: Party is an private individual.
          enum:
            - ORGANISATION,PERSON
        ultimatePartyName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Name by which the ultimate party is known and which is usually used to identify that party.
      description: Information concerning a debtor party identified in the mandate.
    GetMandateActionsDetailsCreationDto:
      required:
        - automaticExtensionIndicator
        - debtorInformation
        - establishmentScheme
        - initiationRequestIdentification
        - mandateType
        - paymentInformation
        - paymentInitiatorInformation
        - validityStartDate
      type: object
      properties:
        automaticExtensionIndicator:
          type: boolean
          description: Automatic renewal of a mandate arrangement at the end of the defined period (period start through period end).
        bescUserIdentification:
          maxLength: 6
          minLength: 0
          type: string
          description: BECS user ID related to migrated DDR mandate.
        creditorInformation:
          $ref: '#/components/schemas/GetMandateActionsDetailsCreationCreditorInformationDto'
        debtorInformation:
          $ref: '#/components/schemas/GetMandateActionsDetailsCreationDebtorInformationDto'
        description:
          maxLength: 140
          minLength: 1
          type: string
          description: Reason for the mandate setup as narrative text.
        establishmentScheme:
          type: string
          description: |
            Identifies the arrangement (unilateral or bilateral) and party that established the
            mandate.
            * **AUTHORISED_PAYMENT_MANDATE**: Established bilaterally as Authorised Payment Mandate.
            * **MIGRATED_BY_CREDITOR**: Established by migration from legacy service by Creditor.
            * **UNILATERAL_BY_DEBTOR**: UnilateralByDebtor - Established unilaterally by Debtor.
          enum:
            - AUTHORISED_PAYMENT_MANDATE,MIGRATED_BY_CREDITOR,UNILATERAL_BY_DEBTOR
        initiationRequestIdentification:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Identification for the mandate request, as originally assigned by the initiating party.
        mandatePurposeCode:
          type: string
          description: |
            Specifies the high level purpose of the mandate based on a set of pre-defined categories.
            * **MORTGAGE**: Mortgage Payments
            * **UTILITY**: Utility Payments
            * **LOAN**: Loan Payments
            * **DEPENDANT**: Dependant Support Payments
            * **GAMBLING**: Gambling Payments
            * **RETAIL**: Retail Payments
            * **SALARY**: Salary Payments
            * **PERSONAL**: Personal Payment
            * **GOVERNMENT**: Government Payments
            * **PENSION**: Pension Payments
            * **TAX**: Tax Payments
            * **OTHER**: Other Service Payments
          enum:
            - MORTGAGE,UTILITY,LOAN,DEPENDANT,GAMBLING,RETAIL,SALARY,PERSONAL,GOVERNMENT,PENSION,TAX,OTHER
        mandateType:
          type: string
          description: |
            Identifies the type of mandate.
            * **DIRECT_DEBIT**: Mandate type relates to Direct Debit payment instrument.
            * **STANDING_ORDER**: Mandate type relates to Standing Order payment instrument.
          enum:
            - DIRECT_DEBIT,STANDING_ORDER
        nppBackofficeService:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Specifies a NPP backoffice service identification under which the mandate resides.
        paymentInformation:
          $ref: '#/components/schemas/GetMandateActionsDetailsCreationPaymentInformationDto'
        paymentInitiatorInformation:
          $ref: '#/components/schemas/GetMandateActionsDetailsCreationPaymentInitiatorInformationDto'
        resolutionRequestedBy:
          pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]{1,3})?(?:Z)$
          type: string
          description: Optional time used to indicate by when resolution of a bilateral action is requested from the other party to the mandate. It will be ignored if the resulting amendment action is not bilateral. For bilateral amendments, it will be provided in any notification sent to the counterparty. This time is for informational purposes only and does not affect the expiry time imposed by the MMS.
        shortDescription:
          maxLength: 35
          minLength: 1
          type: string
          description: 'Short description of the reason for mandate setup as narrative text. '
        transferArrangement:
          maxLength: 140
          minLength: 1
          type: string
          description: Indication of future transfer date, conditions of sale and requirement to hold funds.
        validityEndDate:
          pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
          type: string
          description: End date of the validity of the mandate. If specified, the mandate is valid until 23:59:59.999 Australia Sydney time on this date.
        validityStartDate:
          pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
          type: string
          description: Start date of the validity of the mandate. The mandate is valid as of 00:00:00.000 Australia Sydney time on this date.
      description: Request to register payment mandate in central mandate service.
    GetMandateActionsDetailsCreationPaymentInformationDto:
      required:
        - paymentFrequency
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/CurrencyAmountDto'
        countPerPeriod:
          pattern: ^(?=.{1,19}$)[0-9]{0,19}(?:\.[0-9]{0,18})?$
          type: string
          description: Qualifies the frequency in terms of the number of instructions to be created and processed during the specified period.
        firstPaymentAmount:
          $ref: '#/components/schemas/CurrencyAmountDto'
        firstPaymentDate:
          pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
          type: string
          description: Date of the first payment predefined in mandate.
        lastPaymentAmount:
          $ref: '#/components/schemas/CurrencyAmountDto'
        lastPaymentDate:
          pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
          type: string
          description: Date of the last payment predefined in mandate.
        maximumAmount:
          $ref: '#/components/schemas/CurrencyAmountDto'
        paymentAmountType:
          type: string
          description: |
            Identifies the mandate payment arrangement.
            * **BALLOON**: Payment amount is fixed with large final payment amount.
            * **FIXED**: Payment amount is fixed.
            * **USAGE_BASED**: Payment amount is based on usage.
            * **VARIABLE**: Payment amount is variable.
          enum:
            - BALLOON,FIXED,USAGE_BASED,VARIABLE
        paymentExecuteNotBeforeTime:
          pattern: ^(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]{1,3})?(?:Z)|(-)$
          type: string
          description: Indicates that each execution of the mandate payment should not occur before a given time of that execution day.
        paymentFrequency:
          type: string
          description: |
            Regularity with which instructions are to be created and processed.
            * **ADHOC**: Event takes place on request or as necessary.
            * **DAILY**: Event takes place every day.
            * **FORTNIGHTLY**: Event takes place every two weeks.
            * **INTRA_DAY**: Event takes place several times a day.
            * **SEMI_ANNUAL**: Event takes place every six months or two times a year.
            * **MONTHLY**: Event takes place every month or once a month.
            * **QUARTERLY**: Event takes place every three months or four times a year.
            * **WEEKLY**: Event takes place once a week.
            * **ANNUAL**: Event takes place every year or once a year.
          enum:
            - ADHOC,DAILY,FORTNIGHTLY,INTRA_DAY,SEMI_ANNUAL,MONTHLY,QUARTERLY,WEEKLY,ANNUAL
        pointInTime:
          pattern: ^[0-9]{2}$
          type: string
          description: Qualifies the frequency in terms of an exact point in time or moment within the specified period. If this property is set to '00' it means that the point in time has been cleared on the mandate.
      description: Set of characteristics enabling amendment of mandate payment information.
    GetMandateActionsDetailsCreationPaymentInitiatorInformationDto:
      required:
        - partyIdentification
        - partyIdentificationTypeCode
        - partyLegalName
        - partyName
      type: object
      properties:
        partyIdentification:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Unique and unambiguous identification of the party.
        partyIdentificationTypeCode:
          type: string
          description: |
            Code indicating the identification type of the party.
            * **ALIEN_REGISTRATION_NUMBER**: Alien Registration Number
            * **PASSPORT_NUMBER**: Passport Number
            * **CUSTOMER_ID**: Customer Identification Number
            * **DRIVER_LICENSE_NUMBER**: Drivers License Number
            * **EMPLOYEE_ID**: Employee Identification Number
            * **NATIONAL_IDENTITY_NUMBER**: National Identity Number
            * **SOCIAL_SECURITY_NUMBER**: Social Security Number
            * **TAX_ID**: Tax Identification Number
            * **BANK_PARTY_ID**: Bank Party Identification
            * **CENTRAL_BANK_ID**: Central Bank Identification Number
            * **CLEARING_ID**: Clearing Identification Number
            * **CERTIFICATE_OF_INCORPORATION_NUMBER**: Certificate Of Incorporation Number
            * **COUNTRY_ID_CODE**: Country Identification Code
            * **DATA_UNIVERSAL_NUMBERING_SYSTEM**: Data Universal Numbering System
            * **GS1GLN_ID**: GS1GLN Identifier
            * **SIREN**: SIREN
            * **SIRET**: SIRET
            * **AUSTRALIAN_BUSINESS_NUMBER**: Australian Business Number (ABN)
            * **AUSTRALIAN_COMPANY_NUMBER**: Australian Company Number (ACN)
            * **LEGAL_ENTITY_ID**: Legal Entity Identification (LEI)
          enum:
            - ALIEN_REGISTRATION_NUMBER,PASSPORT_NUMBER,CUSTOMER_ID,DRIVER_LICENSE_NUMBER,EMPLOYEE_ID,NATIONAL_IDENTITY_NUMBER,SOCIAL_SECURITY_NUMBER,TAX_ID,BANK_PARTY_ID,CENTRAL_BANK_ID,CLEARING_ID,CERTIFICATE_OF_INCORPORATION_NUMBER,COUNTRY_ID_CODE,DATA_UNIVERSAL_NUMBERING_SYSTEM,GS1GLN_ID,SIREN,SIRET,AUSTRALIAN_BUSINESS_NUMBER,AUSTRALIAN_COMPANY_NUMBER,LEGAL_ENTITY_ID
        partyLegalName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Name by which the party is legally known.
        partyName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Name by which the party is known and which is usually used to identify that party.
        partyServicerBic:
          pattern: ^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$
          type: string
          description: Identification of the agent that provides a party's access to the mandate service.
      description: Information concerning a payment initiator party identified in the mandate.
    GetMandateActionsDetailsDto:
      type: object
      properties:
        amendment:
          $ref: '#/components/schemas/GetMandateActionsDetailsAmendmentDto'
        creation:
          $ref: '#/components/schemas/GetMandateActionsDetailsCreationDto'
        porting:
          $ref: '#/components/schemas/GetMandateActionsDetailsPortingDto'
        statusChange:
          $ref: '#/components/schemas/GetMandateActionsDetailsStatusChangeDto'
      description: 'Details of an action performed on a mandate. Depending on the type of action, only one of the following fields will be present: Creation, Amendment, Porting or StatusChange.'
    GetMandateActionsDetailsPortingCreditorInformationDto:
      type: object
      properties:
        accountAliasIdentification:
          maxLength: 2048
          minLength: 1
          type: string
          description: Identification used to indicate the account identification under another specified name.
        accountAliasTypeCode:
          type: string
          description: |
            Name of the Alias Type, in a coded form as published in an external list.
            * **PHONE_NUMBER**: Telephone Number
            * **EMAIL_ADDRESS**: Email Address
            * **AUSTRALIAN_BUSINESS_NUMBER**: Australian Business Number
            * **ORGANISATION_ID**: Organisation Identifier
          enum:
            - PHONE_NUMBER,EMAIL_ADDRESS,AUSTRALIAN_BUSINESS_NUMBER,ORGANISATION_ID
        accountId:
          type: string
          description: Platform identifier of the creditor account
          format: uuid
        accountIdentificationIssuer:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Entity or classification under which the identification is assigned.
        accountIdentificationTypeCode:
          type: string
          description: |
            Type of account identification, in a coded form.
            * **BASIC_BANK_ACCOUNT_NUMBER**: Basic Bank Account Number
            * **ALIAS**: Alias Identification
          enum:
            - BASIC_BANK_ACCOUNT_NUMBER,ALIAS
        accountNumber:
          pattern: ^[ -~]{11,15}$
          type: string
          description: BSB (Bank State Branch) of Account, 6 digits in length combined with account number, 5-9 digits in length.
        accountServicerBic:
          pattern: ^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$
          type: string
          description: Party that manages the account on behalf of the account owner, includes managing the registration and booking of entries on the account, calculating balances on the account and providing information about the account.
        fullLegalAccountName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Full Legal Account Name recorded by the Account Server in their records.
        partyIdentification:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Unique and unambiguous identification of the party.
        partyIdentificationTypeCode:
          type: string
          description: |
            Code indicating the identification type of the party, for example in the case of a private individual; passport, driver licence, or 100 point check, or in the case of an organisation; LEI, ACN, ABN.
            * **ALIEN_REGISTRATION_NUMBER**: Alien Registration Number
            * **PASSPORT_NUMBER**: Passport Number
            * **CUSTOMER_ID**: Customer Identification Number
            * **DRIVER_LICENSE_NUMBER**: Drivers License Number
            * **EMPLOYEE_ID**: Employee Identification Number
            * **NATIONAL_IDENTITY_NUMBER**: National Identity Number
            * **SOCIAL_SECURITY_NUMBER**: Social Security Number
            * **TAX_ID**: Tax Identification Number
            * **BANK_PARTY_ID**: Bank Party Identification
            * **CENTRAL_BANK_ID**: Central Bank Identification Number
            * **CLEARING_ID**: Clearing Identification Number
            * **CERTIFICATE_OF_INCORPORATION_NUMBER**: Certificate Of Incorporation Number
            * **COUNTRY_ID_CODE**: Country Identification Code
            * **DATA_UNIVERSAL_NUMBERING_SYSTEM**: Data Universal Numbering System
            * **GS1GLN_ID**: GS1GLN Identifier
            * **SIREN**: SIREN
            * **SIRET**: SIRET
            * **AUSTRALIAN_BUSINESS_NUMBER**: Australian Business Number (ABN)
            * **AUSTRALIAN_COMPANY_NUMBER**: Australian Company Number (ACN)
            * **LEGAL_ENTITY_ID**: Legal Entity Identification (LEI)
          enum:
            - ALIEN_REGISTRATION_NUMBER,PASSPORT_NUMBER,CUSTOMER_ID,DRIVER_LICENSE_NUMBER,EMPLOYEE_ID,NATIONAL_IDENTITY_NUMBER,SOCIAL_SECURITY_NUMBER,TAX_ID,BANK_PARTY_ID,CENTRAL_BANK_ID,CLEARING_ID,CERTIFICATE_OF_INCORPORATION_NUMBER,COUNTRY_ID_CODE,DATA_UNIVERSAL_NUMBERING_SYSTEM,GS1GLN_ID,SIREN,SIRET,AUSTRALIAN_BUSINESS_NUMBER,AUSTRALIAN_COMPANY_NUMBER,LEGAL_ENTITY_ID
        partyName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Name by which the party is known and which is usually used to identify that party.
        partyReference:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Specifies underlying reference associated with the mandate as provided by party, for example Customer Reference, Customer Number, Membership Number, Subscription Number, or Name.
        partyType:
          type: string
          description: |
            Identifies the type of a party. Once the party type has been set it is not possible to clear it through a mandate amendment.
            * **ORGANISATION**: Party is an organisation.
            * **PERSON**: Party is an private individual.
          enum:
            - ORGANISATION,PERSON
        ultimatePartyName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Name by which the ultimate party is known and which is usually used to identify that party.
      description: Information concerning port finalisation of a creditor party identified in the mandate.
    GetMandateActionsDetailsPortingDebtorInformationDto:
      type: object
      properties:
        accountAliasIdentification:
          maxLength: 2048
          minLength: 1
          type: string
          description: Identification used to indicate the account identification under another specified name.
        accountAliasTypeCode:
          type: string
          description: |
            Name of the Alias Type, in a coded form as published in an external list.
            * **PHONE_NUMBER**: Telephone Number
            * **EMAIL_ADDRESS**: Email Address
            * **AUSTRALIAN_BUSINESS_NUMBER**: Australian Business Number
            * **ORGANISATION_ID**: Organisation Identifier
          enum:
            - PHONE_NUMBER,EMAIL_ADDRESS,AUSTRALIAN_BUSINESS_NUMBER,ORGANISATION_ID
        accountId:
          type: string
          description: Platform identifier of the creditor account
          format: uuid
        accountIdentificationIssuer:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Entity or classification under which the identification is assigned.
        accountIdentificationTypeCode:
          type: string
          description: |
            Type of account identification, in a coded form.
            * **BASIC_BANK_ACCOUNT_NUMBER**: Basic Bank Account Number
            * **ALIAS**: Alias Identification
          enum:
            - BASIC_BANK_ACCOUNT_NUMBER,ALIAS
        accountNumber:
          pattern: ^[ -~]{11,15}$
          type: string
          description: BSB (Bank State Branch) of Account, 6 digits in length combined with account number, 5-9 digits in length.
        accountServicerBic:
          pattern: ^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$
          type: string
          description: Party that manages the account on behalf of the account owner, includes managing the registration and booking of entries on the account, calculating balances on the account and providing information about the account.
        fullLegalAccountName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Full Legal Account Name recorded by the Account Server in their records.
        partyIdentification:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Unique and unambiguous identification of the party.
        partyIdentificationTypeCode:
          type: string
          description: |
            Code indicating the identification type of the party, for example in the case of a private individual; passport, driver licence, or 100 point check, or in the case of an organisation; LEI, ACN, ABN.
            * **ALIEN_REGISTRATION_NUMBER**: Alien Registration Number
            * **PASSPORT_NUMBER**: Passport Number
            * **CUSTOMER_ID**: Customer Identification Number
            * **DRIVER_LICENSE_NUMBER**: Drivers License Number
            * **EMPLOYEE_ID**: Employee Identification Number
            * **NATIONAL_IDENTITY_NUMBER**: National Identity Number
            * **SOCIAL_SECURITY_NUMBER**: Social Security Number
            * **TAX_ID**: Tax Identification Number
            * **BANK_PARTY_ID**: Bank Party Identification
            * **CENTRAL_BANK_ID**: Central Bank Identification Number
            * **CLEARING_ID**: Clearing Identification Number
            * **CERTIFICATE_OF_INCORPORATION_NUMBER**: Certificate Of Incorporation Number
            * **COUNTRY_ID_CODE**: Country Identification Code
            * **DATA_UNIVERSAL_NUMBERING_SYSTEM**: Data Universal Numbering System
            * **GS1GLN_ID**: GS1GLN Identifier
            * **SIREN**: SIREN
            * **SIRET**: SIRET
            * **AUSTRALIAN_BUSINESS_NUMBER**: Australian Business Number (ABN)
            * **AUSTRALIAN_COMPANY_NUMBER**: Australian Company Number (ACN)
            * **LEGAL_ENTITY_ID**: Legal Entity Identification (LEI)
          enum:
            - ALIEN_REGISTRATION_NUMBER,PASSPORT_NUMBER,CUSTOMER_ID,DRIVER_LICENSE_NUMBER,EMPLOYEE_ID,NATIONAL_IDENTITY_NUMBER,SOCIAL_SECURITY_NUMBER,TAX_ID,BANK_PARTY_ID,CENTRAL_BANK_ID,CLEARING_ID,CERTIFICATE_OF_INCORPORATION_NUMBER,COUNTRY_ID_CODE,DATA_UNIVERSAL_NUMBERING_SYSTEM,GS1GLN_ID,SIREN,SIRET,AUSTRALIAN_BUSINESS_NUMBER,AUSTRALIAN_COMPANY_NUMBER,LEGAL_ENTITY_ID
        partyName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Name by which the party is known and which is usually used to identify that party.
        partyReference:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Specifies underlying reference associated with the mandate as provided by party, for example Customer Reference, Customer Number, Membership Number, Subscription Number, or Name.
        partyType:
          type: string
          description: |
            Identifies the type of a party. Once the party type has been set it is not possible to clear it through a mandate amendment.
            * **ORGANISATION**: Party is an organisation.
            * **PERSON**: Party is an private individual.
          enum:
            - ORGANISATION,PERSON
        ultimatePartyName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Name by which the ultimate party is known and which is usually used to identify that party.
      description: Information concerning port finalisation of a debtor party identified in the mandate.
    GetMandateActionsDetailsPortingDto:
      type: object
      properties:
        creditorInformation:
          $ref: '#/components/schemas/GetMandateActionsDetailsPortingCreditorInformationDto'
        debtorInformation:
          $ref: '#/components/schemas/GetMandateActionsDetailsPortingDebtorInformationDto'
        paymentInitiatorInformation:
          $ref: '#/components/schemas/GetMandateActionsDetailsPortingPaymentInitiatorInformationDto'
      description: Details of the target party that the mandate is to be ported to. Only the details that are to be updated need to be present. Any field whose value is to remain unchanged can be absent.
    GetMandateActionsDetailsPortingPaymentInitiatorInformationDto:
      type: object
      properties:
        partyIdentification:
          pattern: ^[ -~]{1,35}$
          type: string
          description: Unique and unambiguous identification of the party.
        partyIdentificationTypeCode:
          type: string
          description: |
            Code indicating the identification type of the party.
            * **ALIEN_REGISTRATION_NUMBER**: Alien Registration Number
            * **PASSPORT_NUMBER**: Passport Number
            * **CUSTOMER_ID**: Customer Identification Number
            * **DRIVER_LICENSE_NUMBER**: Drivers License Number
            * **EMPLOYEE_ID**: Employee Identification Number
            * **NATIONAL_IDENTITY_NUMBER**: National Identity Number
            * **SOCIAL_SECURITY_NUMBER**: Social Security Number
            * **TAX_ID**: Tax Identification Number
            * **BANK_PARTY_ID**: Bank Party Identification
            * **CENTRAL_BANK_ID**: Central Bank Identification Number
            * **CLEARING_ID**: Clearing Identification Number
            * **CERTIFICATE_OF_INCORPORATION_NUMBER**: Certificate Of Incorporation Number
            * **COUNTRY_ID_CODE**: Country Identification Code
            * **DATA_UNIVERSAL_NUMBERING_SYSTEM**: Data Universal Numbering System
            * **GS1GLN_ID**: GS1GLN Identifier
            * **SIREN**: SIREN
            * **SIRET**: SIRET
            * **AUSTRALIAN_BUSINESS_NUMBER**: Australian Business Number (ABN)
            * **AUSTRALIAN_COMPANY_NUMBER**: Australian Company Number (ACN)
            * **LEGAL_ENTITY_ID**: Legal Entity Identification (LEI)
          enum:
            - ALIEN_REGISTRATION_NUMBER,PASSPORT_NUMBER,CUSTOMER_ID,DRIVER_LICENSE_NUMBER,EMPLOYEE_ID,NATIONAL_IDENTITY_NUMBER,SOCIAL_SECURITY_NUMBER,TAX_ID,BANK_PARTY_ID,CENTRAL_BANK_ID,CLEARING_ID,CERTIFICATE_OF_INCORPORATION_NUMBER,COUNTRY_ID_CODE,DATA_UNIVERSAL_NUMBERING_SYSTEM,GS1GLN_ID,SIREN,SIRET,AUSTRALIAN_BUSINESS_NUMBER,AUSTRALIAN_COMPANY_NUMBER,LEGAL_ENTITY_ID
        partyLegalName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Name by which the party is legally known.
        partyName:
          pattern: ^[ -~]{1,140}$
          type: string
          description: Name by which the party is known and which is usually used to identify that party.
        partyServicerBic:
          pattern: ^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$
          type: string
          description: Identification of the agent that provides a party's access to the mandate service.
      description: Information concerning a payment initiator party identified in the mandate.
    GetMandateActionsDetailsStatusChangeDto:
      required:
        - change
      type: object
      properties:
        change:
          type: string
          description: |
            Status change to be applied to the mandate.
            * **CANCEL**: Cancel a mandate.
            * **RELEASE**: Unsuspend a suspended mandate.
            * **SUSPEND**: Suspend an active mandate.
          enum:
            - CANCEL,RELEASE,SUSPEND
        reasonCode:
          type: string
          description: |
            Code defining the reason for the status change to the mandate.
            * **AC02**: InvalidDebtorAccountNumber
            * **AC04**: ClosedAccountNumber
            * **AC05**: ClosedDebtorAccountNumber
            * **AC06**: BlockedAccount
            * **AC13**: InvalidDebtorAccountType
            * **AG01**: TransactionForbidden
            * **AG03**: TransactionNotSupported
            * **AM03**: NotAllowedCurrency
            * **AM12**: InvalidAmount
            * **AM14**: AmountExceedsAgreedLimit
            * **CTAM**: ContractAmended
            * **CTCA**: ContractCancellationInitiatedByDebtor
            * **CTEX**: ContractExpired
            * **MCFC**: MandateSuspendedFinalCollection
            * **MCOC**: MandateSuspendedOnceOffCollection
            * **MD07**: EndCustomerDeceased
            * **MD08**: NoMandateServiceByAgent
            * **MD09**: NoMandateServiceOnCustomer
            * **MD16**: RequestedByCustomer
            * **MD17**: RequestedByInitiatingParty
            * **MD20**: MandateExpired
            * **MD21**: MandateCancelledDueToFraud
            * **MS02**: NotSpecifiedReasonCustomer Generated
            * **MS03**: NotSpecifiedReasonAgentGenerated
            * **MSUC**: MandateSuspended7ConsecutiveUnsuccessfulCollections
            * **NARR**: Narrative
            * **NOAS**: NoAnswerFromCustomer
            * **RR04**: Regulatory Reason
            * **SL01**: Specific Service offered by Debtor Agent
            * **SL11**: Creditor not on Whitelist of Debtor
            * **SL12**: Creditor on Blacklist of Debtor
          enum:
            - AC02,AC04,AC05,AC06,AC13,AG01,AG03,AM03,AM12,AM14,CTAM,CTCA,CTEX,MCFC,MCOC,MD07,MD08,MD09,MD16,MD17,MD20,MD21,MS02,MS03,MSUC,NARR,NOAS,RR04,SL01,SL11,SL12
        reasonDescription:
          maxLength: 256
          minLength: 1
          type: string
          description: Description of the change reason.
      description: Request to change the status of a mandate.
    GetMandateActionsResolutionEventDto:
      required:
        - time
      type: object
      properties:
        reasonCode:
          type: string
          description: |
            Bilateral action resolution reason code. This will only be present for a bilateral action.
            Specifies in coded form the chosen resolution of the action, as published in an external
            mandate status reason code set. Below are the possible values:
            * **AC02**: InvalidDebtorAccountNumber
            * **AC05**: ClosedDebtorAccountNumber
            * **AC06**: BlockedAccount
            * **AC13**: InvalidDebtorAccountType
            * **AG01**: TransactionForbidden
            * **AG03**: TransactionNotSupported
            * **AM03**: NotAllowedCurrency
            * **AM12**: InvalidAmount
            * **AM14**: AmountExceedsAgreedLimit
            * **BE06**: UnknownEndCustomer
            * **MD09**: NoMandateServiceOnCustomer
            * **MD16**: RequestedByCustomer
            * **MD21**: MandateCancelledDueToFraud
            * **NOAS**: NoAnswerFromCustomer
            * **RR04**: Regulatory Reason
            * **SL11**: Creditor not on Whitelist of Debtor
            * **SL12**: Creditor on Blacklist of Debtor
          enum:
            - AC02,AC05,AC06,AC13,AG01,AG03,AM03,AM12,AM14,BE06,MD09,MD16,MD21,NOAS,RR04,SL11,SL12
        reasonDescription:
          maxLength: 256
          minLength: 1
          type: string
          description: Description of the reason for the chosen resolution of the action. This will only be present for a bilateral action.
        servicerBic:
          pattern: ^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$
          type: string
          description: Identification of the party who triggered the event on the action.
        sponsorBic:
          pattern: ^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}$
          type: string
          description: Identification of the agent that sponsors the servicer at the moment the event was triggered.
        time:
          pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]{1,3})?(?:Z)$
          type: string
          description: Timestamp of when the event occurred on the mandate action. UTC expressed without offset, i.e. YYYY-MM-DDThh:mm:ss.sssZ
      description: Specification of the resolution event for a mandate action.
    GetMandateActionsResponseBody:
      type: object
      properties:
        actions:
          type: array
          description: List of actions for the requested history period.
          items:
            $ref: '#/components/schemas/GetMandateActionsActionDto'
      description: Details of mandate actions history
    GetMandateCreditorDetailsDto:
      required:
        - accountId
      type: object
      properties:
        accountId:
          type: string
          description: The identifier of the creditor account.
          format: uuid
        partyReference:
          type: string
          description: Reference associated with the mandate as provided by party.
        partyType:
          type: string
          description: |-
            Creditor party type.
             * **ORGANISATION**: Party is an organisation.
             * **PERSON**: Party is a private individual.
          enum:
            - ORGANISATION
            - PERSON
        ultimatePartyName:
          type: string
          description: Creditor's ultimate party name. Optional, overrides platform creditor's name
      description: Describes creditor account details.
    GetMandateDebtorDetailsDto:
      type: object
      properties:
        accountId:
          type: string
          description: The identifier of the debtor account.
          format: uuid
        accountNumber:
          type: string
          description: BSB (Bank State Branch) of Account, 6 digits in length combined with account number, 5-9 digits in length.
        partyName:
          type: string
          description: Debtor party name.
        partyReference:
          type: string
          description: Reference associated with the mandate as provided by party.
        partyType:
          type: string
          description: |-
            Debtor party type.
             * **ORGANISATION**: Party is an organisation.
             * **PERSON**: Party is a private individual.
          enum:
            - ORGANISATION
            - PERSON
        ultimatePartyName:
          type: string
          description: Debtor ultimate party name.
      description: Describes debtor account details.
    GetMandatePaymentStatusResponseBody:
      required:
        - transactionStatus
        - transactionStatusReasonCode
      type: object
      properties:
        transactionStatus:
          type: string
          description: |-
            Transaction Status
            * **RECEIVED**: Message has been received, no further update on status yet. Please continue to check for updates.
            * **UNDELIVERED**: Message could not be delivered to the PayTo rails (PAG). Client should retry initiation.
            * **SENT**: Message has been sent, no acknowledgement yet received. Please continue to check for updates.
            * **STORE_AND_FORWARD**: Target institution is not available, but message will be relayed when they are back online. Please continue to check for updates.
            * **ACCEPTED_FOR_CLEARANCE**: Payment is accepted but settlement not initiated. Please continue to check for updates.
            * **SETTLEMENT_ABORTED**: Settlement could not be completed. A retry attempt will be made on behalf of the client. Please continue to check for updates.
            * **ACCEPTED_AND_SETTLED**: Settlement completed.
            * **REJECTED**: Payment could not be completed. Request could be modified and resubmitted - or if unexpected problem then please contact Shaype team for support.
            * **PENDING**: Settlement queued for handling but not complete. Please continue to check for updates
          enum:
            - RECEIVED
            - UNDELIVERED
            - SENT
            - STORE_AND_FORWARD
            - ACCEPTED_FOR_CLEARANCE
            - SETTLEMENT_ABORTED
            - ACCEPTED_AND_SETTLED
            - REJECTED
            - PENDING
        transactionStatusReasonCode:
          type: string
          description: Reject reason code, defining the reason for the transaction status.
      description: Response with status of mandate payment initiation
    GetMandateResponseBody:
      required:
        - debtorDetails
        - mandateId
        - paymentTerms
        - registrationDateTime
        - status
        - validityStartDate
      type: object
      properties:
        creditorDetails:
          $ref: '#/components/schemas/GetMandateCreditorDetailsDto'
        debtorDetails:
          $ref: '#/components/schemas/GetMandateDebtorDetailsDto'
        description:
          type: string
          description: Mandate description.
        mandateId:
          type: string
          description: Unique identifier of a mandate.
          format: uuid
        paymentTerms:
          $ref: '#/components/schemas/GetPaymentTermsDto'
        purposeCode:
          type: string
          description: |-
            The purpose of this mandate.
             * **MORTGAGE**: Mortgage Payments.
             * **UTILITY**: Utility Payments.
             * **LOAN**: Loan Payments.
             * **DEPENDANT**: Dependant Support Payments.
             * **GAMBLING**: Gambling Payments.
             * **RETAIL**: Retail Payments.
             * **SALARY**: Salary Payments.
             * **PERSONAL**: Personal Payments.
             * **GOVERNMENT**: Government Payments.
             * **PENSION**: Pension Payments.
             * **TAX**: Tax Payments.
             * **OTHER**: Other Service Payments.
          enum:
            - MORTGAGE
            - UTILITY
            - LOAN
            - DEPENDANT
            - GAMBLING
            - RETAIL
            - SALARY
            - PERSONAL
            - GOVERNMENT
            - PENSION
            - TAX
            - OTHER
        registrationDateTime:
          type: string
          description: When the mandate was registered.
          format: date-time
        status:
          type: string
          description: |-
            The status of this mandate.
             * **CREATED**: Created.
             * **ACTIVE**: Active.
             * **SUSPENDED**: Suspended.
             * **CANCELLED**: Cancelled.
          enum:
            - CREATED
            - ACTIVE
            - SUSPENDED
            - CANCELLED
        transferArrangement:
          type: string
          description: Indication of future transfer date, conditions of sale and requirement to hold funds.
        validityEndDate:
          type: string
          description: The date when the mandate stops being valid.
          format: date
        validityStartDate:
          type: string
          description: The date when the mandate becomes valid.
          format: date
      description: Details of a mandate.
    GetMandateSummaryDto:
      required:
        - mandateId
        - paymentTerms
        - purposeCode
        - status
      type: object
      properties:
        debtorAccountId:
          type: string
          description: The system identifier of the debtor account, if determined.
          format: uuid
        description:
          type: string
          description: Mandate description.
        mandateId:
          type: string
          description: Unique identifier of a mandate.
          format: uuid
        paymentTerms:
          $ref: '#/components/schemas/GetPaymentTermsSummaryDto'
        purposeCode:
          type: string
          description: |-
            The purpose of this mandate.
             * **MORTGAGE**: Mortgage Payments.
             * **UTILITY**: Utility Payments.
             * **LOAN**: Loan Payments.
             * **DEPENDANT**: Dependant Support Payments.
             * **GAMBLING**: Gambling Payments.
             * **RETAIL**: Retail Payments.
             * **SALARY**: Salary Payments.
             * **PERSONAL**: Personal Payments.
             * **GOVERNMENT**: Government Payments.
             * **PENSION**: Pension Payments.
             * **TAX**: Tax Payments.
             * **OTHER**: Other Service Payments.
          enum:
            - MORTGAGE
            - UTILITY
            - LOAN
            - DEPENDANT
            - GAMBLING
            - RETAIL
            - SALARY
            - PERSONAL
            - GOVERNMENT
            - PENSION
            - TAX
            - OTHER
        status:
          type: string
          description: |-
            The status of this mandate.
             * **CREATED**: Created.
             * **ACTIVE**: Active.
             * **SUSPENDED**: Suspended.
             * **CANCELLED**: Cancelled.
          enum:
            - CREATED
            - ACTIVE
            - SUSPENDED
            - CANCELLED
        validityEndDate:
          type: string
          description: The date when the mandate stops being valid.
          format: date
      description: Details of a mandate.
    GetMandatesResponseBody:
      required:
        - result
        - totalCount
      type: object
      properties:
        result:
          type: array
          description: List of mandates on the given page.
          items:
            $ref: '#/components/schemas/GetMandateSummaryDto'
        totalCount:
          type: integer
          description: Count of all matching mandates.
          format: int32
      description: Mandates list response.
    GetPaymentTermsDto:
      required:
        - frequency
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/CurrencyAmount'
        countPerPeriod:
          type: string
          description: Qualifies the frequency in terms of the number of instructions to be created and processed during the specified period.
        firstPayment:
          $ref: '#/components/schemas/PaymentDto'
        frequency:
          type: string
          description: |-
            Payment frequency.
             * **ADHOC**: Event takes place on request or as necessary.
             * **DAILY**: Event takes place every day.
             * **FORTNIGHTLY**: Event takes place every two weeks.
             * **INTRA_DAY**: Event takes place several times a day.
             * **SEMI_ANNUAL**: Event takes place every six months or two times a year.
             * **MONTHLY**: Event takes place every month or once a month.
             * **QUARTERLY**: Event takes place every three months or four times a year.
             * **WEEKLY**: Event takes place once a week.
             * **ANNUAL**: Event takes place every year or once a year.
          enum:
            - ADHOC
            - DAILY
            - FORTNIGHTLY
            - INTRA_DAY
            - SEMI_ANNUAL
            - MONTHLY
            - QUARTERLY
            - WEEKLY
            - ANNUAL
        lastPayment:
          $ref: '#/components/schemas/PaymentDto'
        maximumAmount:
          $ref: '#/components/schemas/CurrencyAmount'
        pointInTime:
          type: string
          description: Qualifies payment frequency
        type:
          type: string
          description: |-
            Payment type.
             * **BALLOON**: Payment amount is fixed with large final payment amount.
             * **FIXED**: Payment amount is fixed.
             * **USAGE_BASED**: Payment amount is based on usage.
             * **VARIABLE**: Payment amount is variable.
          enum:
            - BALLOON
            - FIXED
            - USAGE_BASED
            - VARIABLE
      description: Describes how payments for a mandate should happen.
    GetPaymentTermsSummaryDto:
      required:
        - frequency
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/CurrencyAmount'
        frequency:
          type: string
          description: |-
            Payment frequency.
             * **ADHOC**: Event takes place on request or as necessary.
             * **DAILY**: Event takes place every day.
             * **FORTNIGHTLY**: Event takes place every two weeks.
             * **INTRA_DAY**: Event takes place several times a day.
             * **SEMI_ANNUAL**: Event takes place every six months or two times a year.
             * **MONTHLY**: Event takes place every month or once a month.
             * **QUARTERLY**: Event takes place every three months or four times a year.
             * **WEEKLY**: Event takes place once a week.
             * **ANNUAL**: Event takes place every year or once a year.
          enum:
            - ADHOC
            - DAILY
            - FORTNIGHTLY
            - INTRA_DAY
            - SEMI_ANNUAL
            - MONTHLY
            - QUARTERLY
            - WEEKLY
            - ANNUAL
        maximumAmount:
          $ref: '#/components/schemas/CurrencyAmount'
      description: Describes how payments for a mandate should happen.
    HaasLiquidity:
      required:
        - inbound
        - outbound
        - total
      type: object
      properties:
        inbound:
          type: number
        outbound:
          type: number
        total:
          type: number
    HayAccount:
      required:
        - customData
      type: object
      properties:
        accountHayId:
          type: string
          description: Unique identifier (UUID) of the Account
          format: uuid
        accountHolderId:
          type: string
          description: Unique identifier (UUID) of the account holder
          format: uuid
        accountHolderType:
          type: string
          description: |-
            The type of object that is the account holder. Possible values:
             * **CUSTOMER**: The account holder is a Customer, accountHolderId contains a Customer ID
             * **GROUP**: The account holder is a Group, accountHolderId contains a Group ID
          enum:
            - CUSTOMER
            - GROUP
        accountNumber:
          type: string
          description: Account number, 5-9 digits in length
        availableBalance:
          type: number
          description: Total balance available for use on Account. Funds that are held, locked and allocated to a Stack will not be available. Value to 2 decimal places.
        blockedBy:
          type: string
          description: |-
            The type of entity that is responsible for the blocked account. Possible values:
             * **CLIENT**: The account was blocked by the Client.
             * **PLATFORM**: The account was blocked by the Platform
          enum:
            - CLIENT
            - PLATFORM
        bsb:
          type: string
          description: BSB (Bank State Branch) of Account, 6 digits in length
        closedDateTimeUtc:
          type: string
          description: DateTime in UTC format when the Account was closed
          format: date-time
        creationDateTimeUtc:
          type: string
          description: DateTime in UTC format when the Account was created
          format: date-time
        currency:
          type: string
          description: Account currency as three letter code as per <a href="https://en.wikipedia.org/wiki/ISO_4217">ISO 4217</a>.
          enum:
            - AED
            - AFN
            - ALL
            - AMD
            - ANG
            - AOA
            - ARS
            - AUD
            - AWG
            - AZN
            - BAM
            - BBD
            - BDT
            - BGN
            - BHD
            - BIF
            - BMD
            - BND
            - BOB
            - BOV
            - BRL
            - BSD
            - BTN
            - BWP
            - BYN
            - BZD
            - CAD
            - CDF
            - CHF
            - CLP
            - CNH
            - CNY
            - COP
            - CRC
            - CUC
            - CUP
            - CVE
            - CZK
            - DJF
            - DKK
            - DOP
            - DZD
            - EGP
            - ERN
            - ETB
            - EUR
            - FJD
            - FKP
            - GBP
            - GEL
            - GHS
            - GIP
            - GMD
            - GNF
            - GTQ
            - GYD
            - HKD
            - HNL
            - HRK
            - HTG
            - HUF
            - IDR
            - ILS
            - INR
            - IQD
            - IRR
            - ISK
            - JMD
            - JOD
            - JPY
            - KES
            - KGS
            - KHR
            - KMF
            - KPW
            - KRW
            - KWD
            - KYD
            - KZT
            - LAK
            - LBP
            - LKR
            - LRD
            - LSL
            - LYD
            - MAD
            - MDL
            - MGA
            - MKD
            - MMK
            - MNT
            - MOP
            - MRU
            - MUR
            - MVR
            - MWK
            - MXN
            - MYR
            - MZN
            - NAD
            - NGN
            - NIO
            - NOK
            - NPR
            - NZD
            - OMR
            - PAB
            - PEN
            - PGK
            - PHP
            - PKR
            - PLN
            - PYG
            - QAR
            - RON
            - RSD
            - RUB
            - RWF
            - SAR
            - SBD
            - SCR
            - SDG
            - SEK
            - SGD
            - SHP
            - SLL
            - SOS
            - SRD
            - SSP
            - STN
            - SVC
            - SYP
            - SZL
            - THB
            - TJS
            - TMT
            - TND
            - TOP
            - TRY
            - TTD
            - TWD
            - TZS
            - UAH
            - UGX
            - USD
            - UYU
            - UZS
            - VES
            - VND
            - VUV
            - WST
            - XAF
            - XCD
            - XOF
            - XPF
            - YER
            - ZAR
            - ZMW
            - ZWL
        customData:
          type: object
          description: Contains custom metadata stored with the Account
        heldBalance:
          type: number
          description: Total value of all authorised but not yet cleared transactions for all Cards on Account. Positive value to 2 decimal places.
        lockedBalance:
          type: number
          description: The value that has been locked and unavailable for use, typically as a result of an operations team action. Positive value to 2 decimal places.
        overdraftBalance:
          type: number
          description: Total value of overdraft used where an overdraft limit exists on the Account. Positive value to 2 decimal places.
        overdraftLimit:
          type: number
          description: Total value of the overdraft limit applied to Account. Positive value to 2 decimal places.
        stacksBalance:
          type: number
          description: Total value current held against any Stack(s) on the Account. Positive value to 2 decimal places.
        status:
          type: string
          description: |-
            Current Account status. Possible values:
             * **ACTIVE**: Account is approved and has had a transactional action performed on it
             * **ACTIVE_IN_ARREARS**: Account balance is in a negative position beyond the total deposits / overdraft limit on the Account
             * **APPROVED**: Account is approved and ready for use
             * **CLOSED**: Account is closed
             * **DORMANT**: Account is dormant due to inactivity on Account for a specific period of time
             * **LOCKED**: Account is blocked
             * **PENDING_APPROVAL**: Account is created but not yet approved (Note: Accounts created through this API are automatically set as APPROVED)
          enum:
            - PENDING_APPROVAL
            - APPROVED
            - ACTIVE
            - LOCKED
            - DORMANT
            - CLOSED
            - ACTIVE_IN_ARREARS
        technicalOverdraftBalance:
          type: number
          description: Total value that is in a negative position beyond the total deposits / overdraft limit on the Account. Value to 2 decimal places.
        totalBalance:
          type: number
          description: Total value of all funds on the Account (this amount will also include unused overdraft limit and Stacks, held and locked value). Value to 2 decimal places.
      description: Details of an account
    HayArchivedScheduledPayment:
      type: object
      properties:
        accountId:
          type: string
          description: Unique identifier (UUID) of the Account
          format: uuid
        amount:
          $ref: '#/components/schemas/CurrencyAmount'
        creationDateTimeUtc:
          type: string
          description: DateTime in UTC format when a scheduled or recurring payment schedule has been created
          format: date-time
        customerHayId:
          type: string
          description: Unique identifier (UUID) of the Customer (initiator of the transfer)
          format: uuid
        description:
          type: string
          description: Description on the transaction
        endDate:
          type: string
          description: Recurring payment processing end date
          format: date
        frequency:
          type: string
          description: |-
            Payment frequency for recurring payments. Possible values:
             * **WEEKLY**: Payment is processed every week, starting on the startDate
             * **FORTNIGHTLY**: Payment is processed every two weeks, starting on the startDate
             * **MONTHLY**: Payment is processed every month, starting on the startDate (payment triggered on next available date where invalid date is encountered in schedule i.e. 30th February)
             * **QUARTERLY**: Payment is processed every quarter, starting on the startDate (payment triggered on next available date where invalid date is encountered in schedule i.e. 30th February)
          enum:
            - WEEKLY
            - FORTNIGHTLY
            - MONTHLY
            - QUARTERLY
        hayId:
          type: string
          description: Unique identifier (UUID) of the payment schedule
          format: uuid
        lastProcessedDateTimeUtc:
          type: string
          description: DateTime in UTC format when a scheduled or recurring payment has been last processed
          format: date-time
        numberOfPayments:
          type: integer
          description: Total number of times a recurring payment will be processed
          format: int32
        numberOfProcessedPayments:
          type: integer
          description: Total number of times the payment has been processed
          format: int32
        recipient:
          $ref: '#/components/schemas/ScheduledPaymentRecipient'
        reference:
          type: string
          description: Reference to be included with the transfer
        shouldCancelOnFailure:
          type: boolean
          description: Indicates whether a recurring payment schedule should be cancelled if a payment fails (i.e. insufficient funds in Account or rejected by the receiving party)
        startDate:
          type: string
          description: First processing date for a recurring payment, or the processing date for a scheduled single payment
          format: date
        status:
          type: string
          description: |-
            Status of the recurring or scheduled payment definition:
             * **ACTIVE**: Payment schedule is active and has outstanding payments to be processed in the future
             * **CANCELLED**: Payment schedule has been cancelled, the schedule is no longer active (triggered via 'Cancel Scheduled Payment' method)
             * **COMPLETED**: All payments scheduled have been completed, the schedule is no longer active
             * **DELETED**: Payment schedule has been deleted, the schedule is no longer active (triggered via UI exposed endpoint)
             * **FAILED**: Payment has failed to be processed, any further scheduled payments will not be processed (only used for payments with the shouldCancelOnFailure flag set to true)
             * **REJECTED**: Payment has been rejected by recipient, any further scheduled payments will not be processed (only used for payments with the shouldCancelOnFailure flag set to true)
             * **REPLACED**: Payment schedule has been replaced with a newer version
          enum:
            - ACTIVE
            - CANCELLED
            - DELETED
            - FAILED
            - REJECTED
            - COMPLETED
            - REPLACED
        type:
          type: string
          description: |-
            Scheduled payment type. Possible values:
             * **RECURRING**: Payment scheduled to be performed multiple times in the future
             * **ONE_TIME**: Payment scheduled to be performed once in the future
          enum:
            - RECURRING
            - ONE_TIME
      description: Any previous versions of this payment schedule that has subsequently been updated
    HayCard:
      type: object
      properties:
        accountHayId:
          type: string
          description: Unique identifier (UUID) of the Account
          format: uuid
        blockedBy:
          type: string
          description: |-
            The type of entity that is responsible for the blocked card. Possible values:
             * **CLIENT**: The card was blocked by the Client.
             * **PLATFORM**: The card was blocked by the Platform
          enum:
            - CLIENT
            - PLATFORM
        cardHayId:
          type: string
          description: Unique identifier (UUID) of the Card
          format: uuid
        cardStatus:
          type: string
          description: |-
            Current Card status. Possible values:
             * **ACTIVE**: Card is active and available for use
             * **AWAITING_ACTIVATION**: Card is yet to be activated and unable to be used
             * **BLOCKED**: Card has been blocked
             * **EXPIRED**: Card has expired
             * **INACTIVE**: Card has been cancelled / voided and can no longer be used
          enum:
            - ACTIVE
            - AWAITING_ACTIVATION
            - BLOCKED
            - INACTIVE
            - EXPIRED
        cardToken:
          type: string
          description: Public token of the Card, maximum 9 digits in length
        cardType:
          type: string
          description: |-
            Type of card. Possible values:
             * **PHYSICAL**: Physical card has been issued
             * **VIRTUAL**: Card is virtual only. No physical card has been issued
          enum:
            - PHYSICAL
            - VIRTUAL
        customerHayId:
          type: string
          description: Unique identifier (UUID) of the Customer (cardholder)
          format: uuid
        expiryDate:
          type: string
          description: Expiry date of the Card (date of the last day of the expiry month and year)
          format: date
        issuedDateTimeUtc:
          type: string
          description: DateTime in UTC format when the Card was issued
          format: date-time
        lastFourDigits:
          type: string
          description: Last four digits of the Card number, also known as primary account number (PAN)
        nameOnCard:
          type: string
          description: Cardholder name as printed on the Card
        renewedIntoCardId:
          type: string
          description: Unique ID of the new card, if this card has been renewed
          format: uuid
        voidDateTimeUtc:
          type: string
          description: DateTime in UTC format when the Card was cancelled / voided
          format: date-time
      description: Details of a card
    HayCustomer:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        approvedDateTimeUtc:
          type: string
          description: DateTime in UTC format when the customer has been approved
          format: date-time
        blockedBy:
          type: string
          description: |-
            The type of entity that is responsible for the blocked customer. Possible values:
             * **CLIENT**: The customer was blocked by the Client.
             * **PLATFORM**: The customer was blocked by the Platform
          enum:
            - CLIENT
            - PLATFORM
        clientReference:
          type: string
          description: Client reference associated with customer
        closedDateTimeUtc:
          type: string
          description: DateTime in UTC format when the Customer was closed
          format: date-time
        creationDateTimeUtc:
          type: string
          description: DateTime in UTC format when the Customer was created
          format: date-time
        customerDetails:
          $ref: '#/components/schemas/CustomerDetails'
        customerHayId:
          type: string
          description: Unique identifier (UUID) of the Customer
          format: uuid
        deviceId:
          type: string
          description: Customer's device ID, typically UUID though format controlled by mobile OS (if a mobile app is available)
        deviceOs:
          type: string
          description: |-
            Customer's device operating system (if a mobile app is available). Possible values:
             * **IOS**
             * **ANDROID**
          enum:
            - IOS
            - ANDROID
        email:
          type: string
          description: Email address of the Customer
        firebaseToken:
          type: string
          description: Customer's device firebase token (if a mobile app is available)
        identityDocumentCardNumber:
          type: string
          description: Optional identity document card number. Between 6 to 10 characters which can be either just numeric or alphanumeric characters based on the state. Should be specified for Driver's Licenses that provide it.
        identityDocumentIssuingCountry:
          type: string
          description: Optional three-letter ISO country code of the customer's identity document issuing country
        identityDocumentNumber:
          type: string
          description: Number of the Customer's identity document (if supplied)
        identityDocumentRegion:
          type: string
          description: 'Optional identity document region, one of: NSW, QLD, SA, TAS, VIC, WA, ACT, NT. (uppercase only) Should be specified for Driver''s Licenses.'
        identityDocumentType:
          type: string
          description: |-
            Type of Customer's identity document (if supplied). Possible values:
             * **DRIVING_LICENSE**
             * **PASSPORT**
          enum:
            - DRIVING_LICENSE
            - PASSPORT
        lastUpdatedDateTimeUtc:
          type: string
          description: DateTime in UTC format when the Customer was last updated
          format: date-time
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumber'
        status:
          type: string
          description: |-
            Current Customer status. Possible values:
             * **ACTIVE**: Customer is active
             * **BLOCKED**: Customer is blocked
             * **INACTIVE**: Customer is not active (closed)
             * **PENDING_APPROVAL**: Customer is awaiting approval
             * **REFERRED**: Customer is referred for further KYC checks
             * **REJECTED**: Customer has been rejected
          enum:
            - ACTIVE
            - INACTIVE
            - REJECTED
            - BLOCKED
            - PENDING_APPROVAL
            - REFERRED
        tier:
          type: string
          description: |
            Customer tier, will be STANDARD unless additional tiers have been agreed as part of the product offering. Possible values:
             * **FOUNDER**
             * **STANDARD**
             * **PREMIUM**
          enum:
            - FOUNDER
            - STANDARD
            - PREMIUM
      description: Details of a customer
    HayGroup:
      type: object
      properties:
        businessIdentifiers:
          $ref: '#/components/schemas/BusinessIdentifiers'
        customerHayIds:
          type: array
          description: Unique identifiers (UUID) of the Customer(s) associated to this Group
          items:
            type: string
            description: Unique identifiers (UUID) of the Customer(s) associated to this Group
            format: uuid
        groupHayId:
          type: string
          description: Unique identifier (UUID) of the Group
          format: uuid
        groupName:
          type: string
          description: Name of the Group, if not provided a generic name associated with the client will be generated
        groupType:
          type: string
          description: |-
            Group type. Possible values:
             * **BUSINESS**: Non-individual / joint entity
             * **PERSONAL**: Joint account entity (default if no option selected)
          enum:
            - PERSONAL
            - BUSINESS
      description: Details of a Group
    HayJointAccount:
      type: object
      properties:
        businessIdentifiers:
          $ref: '#/components/schemas/BusinessIdentifiers'
        customerHayIds:
          type: array
          description: Unique identifiers (UUID) of the Customer(s) associated to this Group
          items:
            type: string
            description: Unique identifiers (UUID) of the Customer(s) associated to this Group
            format: uuid
        groupHayId:
          type: string
          description: Unique identifier (UUID) of the Group
          format: uuid
        groupType:
          type: string
          description: |-
            Group type. Possible values:
             * **BUSINESS**: Non-individual / joint entity
             * **PERSONAL**: Joint account entity (default if no option selected)
          enum:
            - PERSONAL
            - BUSINESS
        hayAccount:
          $ref: '#/components/schemas/HayAccount'
        name:
          type: string
          description: Name of the Group, if not provided a generic name associated with the client will be generated
      description: Details of a joint or business account.
    HayMerchantCategoryCode:
      type: object
      properties:
        code:
          type: integer
          description: Merchant Category Code (MCC) as four digit code as per ISO 18245
          format: int32
        description:
          type: string
          description: Description of the Merchant Category Code (MCC)
      description: Details of the Merchant Category Code (MCC).
    HayScheduledPayment:
      type: object
      properties:
        accountId:
          type: string
          description: Unique identifier (UUID) of the Account
          format: uuid
        amount:
          $ref: '#/components/schemas/CurrencyAmount'
        creationDateTimeUtc:
          type: string
          description: DateTime in UTC format when a scheduled or recurring payment schedule has been created
          format: date-time
        customerHayId:
          type: string
          description: Unique identifier (UUID) of the Customer (initiator of the transfer)
          format: uuid
        description:
          type: string
          description: Description on the transaction
        endDate:
          type: string
          description: Recurring payment processing end date
          format: date
        frequency:
          type: string
          description: |-
            Payment frequency for recurring payments. Possible values:
             * **WEEKLY**: Payment is processed every week, starting on the startDate
             * **FORTNIGHTLY**: Payment is processed every two weeks, starting on the startDate
             * **MONTHLY**: Payment is processed every month, starting on the startDate (payment triggered on next available date where invalid date is encountered in schedule i.e. 30th February)
             * **QUARTERLY**: Payment is processed every quarter, starting on the startDate (payment triggered on next available date where invalid date is encountered in schedule i.e. 30th February)
          enum:
            - WEEKLY
            - FORTNIGHTLY
            - MONTHLY
            - QUARTERLY
        hayId:
          type: string
          description: Unique identifier (UUID) of the payment schedule
          format: uuid
        lastProcessedDateTimeUtc:
          type: string
          description: DateTime in UTC format when a scheduled or recurring payment has been last processed
          format: date-time
        numberOfPayments:
          type: integer
          description: Total number of times a recurring payment will be processed
          format: int32
        numberOfProcessedPayments:
          type: integer
          description: Total number of times the payment has been processed
          format: int32
        previousVersions:
          type: array
          description: Any previous versions of this payment schedule that has subsequently been updated
          items:
            $ref: '#/components/schemas/HayArchivedScheduledPayment'
        recipient:
          $ref: '#/components/schemas/ScheduledPaymentRecipient'
        reference:
          type: string
          description: Reference to be included with the transfer
        shouldCancelOnFailure:
          type: boolean
          description: Indicates whether a recurring payment schedule should be cancelled if a payment fails (i.e. insufficient funds in Account or rejected by the receiving party)
        startDate:
          type: string
          description: First processing date for a recurring payment, or the processing date for a scheduled single payment
          format: date
        status:
          type: string
          description: |-
            Status of the recurring or scheduled payment definition:
             * **ACTIVE**: Payment schedule is active and has outstanding payments to be processed in the future
             * **CANCELLED**: Payment schedule has been cancelled, the schedule is no longer active (triggered via 'Cancel Scheduled Payment' method)
             * **COMPLETED**: All payments scheduled have been completed, the schedule is no longer active
             * **DELETED**: Payment schedule has been deleted, the schedule is no longer active (triggered via UI exposed endpoint)
             * **FAILED**: Payment has failed to be processed, any further scheduled payments will not be processed (only used for payments with the shouldCancelOnFailure flag set to true)
             * **REJECTED**: Payment has been rejected by recipient, any further scheduled payments will not be processed (only used for payments with the shouldCancelOnFailure flag set to true)
             * **REPLACED**: Payment schedule has been replaced with a newer version
          enum:
            - ACTIVE
            - CANCELLED
            - DELETED
            - FAILED
            - REJECTED
            - COMPLETED
            - REPLACED
        type:
          type: string
          description: |-
            Scheduled payment type. Possible values:
             * **RECURRING**: Payment scheduled to be performed multiple times in the future
             * **ONE_TIME**: Payment scheduled to be performed once in the future
          enum:
            - RECURRING
            - ONE_TIME
      description: Details of the scheduled or recurring payment.
    HayStack:
      type: object
      properties:
        accountHayId:
          type: string
          description: Unique identifier (UUID) of the Account
          format: uuid
        balance:
          type: number
          description: Total balance available for use on Stack
        closedAtUtc:
          type: string
          description: DateTime in UTC format when the Stack was closed
          format: date-time
        createdAtUtc:
          type: string
          description: DateTime in UTC format when the Stack was created
          format: date-time
        imageUrl:
          type: string
          description: URL of image representing the Stack goal embedded in app
        name:
          type: string
          description: Name of the Stack
        stackHayId:
          type: string
          description: Unique identifier (UUID) of the Stack
          format: uuid
        status:
          type: string
          description: |-
            Stack status. Possible values:
             * **OPEN**: Stack is active and in use
             * **CLOSED**: Stack is inactive and can no longer be used
          enum:
            - OPEN
            - CLOSED
        targetAmount:
          type: number
          description: Target balance value set on Stack
      description: Details of a stack used to save or ring-fence money separately from the main account.
    HayStackTransaction:
      type: object
      properties:
        accountHayId:
          type: string
          description: Unique identifier (UUID) of the Account
          format: uuid
        amount:
          type: number
          description: Value of the Transaction, to 2 decimal places
        counterpartTransactionId:
          type: string
          description: Unique identifier (UUID) of the counterpart transaction (Stack to Stack transactions)
          format: uuid
        customerId:
          type: string
          description: Unique identifier (UUID) of the Customer (initiator of the transfer)
          format: uuid
        hayId:
          type: string
          description: Unique identifier (UUID) of the Transaction
          format: uuid
        notes:
          type: string
          description: Transaction description
        stack:
          $ref: '#/components/schemas/HayStack'
        stackHayId:
          type: string
          description: Unique identifier (UUID) of the Stack
          format: uuid
        transactionTimeUtc:
          type: string
          description: DateTime in UTC format when the Transaction was initiated
          format: date-time
      description: Details of a stack transaction.
    InternalTransfer:
      required:
        - recipientAccountHayId
        - recipientName
        - senderName
      type: object
      properties:
        recipientAccountHayId:
          type: string
          description: "\tUnique identifier (UUID) of the Account (recipient of the transfer)"
          format: uuid
        recipientName:
          maxLength: 140
          minLength: 1
          type: string
          description: Name of Account receiving the transfer
        senderName:
          maxLength: 140
          minLength: 1
          type: string
          description: Name of Account sending the transfer
      description: Details of a transfer to Account using AccountID
    LiquidityThreshold:
      required:
        - clientReference
        - id
        - type
      type: object
      properties:
        active:
          type: boolean
        amount:
          minimum: 1
          type: number
        clientReference:
          type: string
        external:
          type: boolean
        id:
          type: string
          format: uuid
        percent:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
        percental:
          type: boolean
        type:
          type: string
          enum:
            - TOTAL_DAILY_INBOUND_DIRECT_DEBIT
            - TOTAL_DAILY_NET_NON_SCHEME
            - TOTAL_DAILY_NET_VISA
            - TOTAL_DAILY_OUTBOUND_BPAY
    MakeAdhocPaymentRequestBody:
      required:
        - idempotencyKey
        - mandateId
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/CurrencyAmount'
        description:
          type: string
          description: Payment description.
        endToEndId:
          maxLength: 35
          minLength: 1
          type: string
          description: End to end payment identification.
        idempotencyKey:
          type: string
          description: Idempotency key generated by the client of the API. Used for request duplication check.
          format: uuid
        mandateId:
          type: string
          description: Mandate identifier
          format: uuid
      description: Body of a request to make adhoc payment.
    MakeAdhocPaymentResponseBody:
      required:
        - instructionId
        - mandateId
        - message
        - statusIsFinal
        - transactionStatus
        - transactionStatusDisplay
      type: object
      properties:
        instructionId:
          type: string
          description: Payment instruction identifier
        mandateId:
          type: string
          description: Mandate identifier
          format: uuid
        message:
          type: string
          description: Message indicating operation result
        statusIsFinal:
          type: boolean
          description: Transaction status final flag
        transactionStatus:
          type: string
          description: |-
            Transaction Status
            * **RECEIVED**: Message has been received, no further update on status yet. Please continue to check for updates.
            * **UNDELIVERED**: Message could not be delivered to the PayTo rails (PAG). Client should retry initiation.
            * **SENT**: Message has been sent, no acknowledgement yet received. Please continue to check for updates.
            * **STORE_AND_FORWARD**: Target institution is not available, but message will be relayed when they are back online. Please continue to check for updates.
            * **ACCEPTED_FOR_CLEARANCE**: Payment is accepted but settlement not initiated. Please continue to check for updates.
            * **SETTLEMENT_ABORTED**: Settlement could not be completed. A retry attempt will be made on behalf of the client. Please continue to check for updates.
            * **ACCEPTED_AND_SETTLED**: Settlement completed.
            * **REJECTED**: Payment could not be completed. Request could be modified and resubmitted - or if unexpected problem then please contact Shaype team for support.
            * **PENDING**: Settlement queued for handling but not complete. Please continue to check for updates
          enum:
            - RECEIVED
            - UNDELIVERED
            - SENT
            - STORE_AND_FORWARD
            - ACCEPTED_FOR_CLEARANCE
            - SETTLEMENT_ABORTED
            - ACCEPTED_AND_SETTLED
            - REJECTED
            - PENDING
        transactionStatusDisplay:
          type: string
          description: Transaction status display value
      description: Adhoc payment response.
    MerchantAddress:
      type: object
      properties:
        addressLine1:
          type: string
        lat:
          type: number
          format: double
        lng:
          type: number
          format: double
        postcode:
          type: string
        singleLineAddress:
          type: string
        state:
          type: string
        suburb:
          type: string
      description: Merchant address - Shaype recommends the use of cardAcceptorLocation if provided in transaction
    NonSchemeLiquidity:
      required:
        - bpay
        - directEntry
        - haas
        - npp
        - total
      type: object
      properties:
        bpay:
          $ref: '#/components/schemas/BPayLiquidity'
        directEntry:
          $ref: '#/components/schemas/DirectEntryLiquidity'
        haas:
          $ref: '#/components/schemas/HaasLiquidity'
        npp:
          $ref: '#/components/schemas/NppLiquidity'
        total:
          type: number
    NppLiquidity:
      required:
        - inbound
        - outbound
        - total
      type: object
      properties:
        inbound:
          type: number
        outbound:
          type: number
        total:
          type: number
    OemProvisioningData:
      type: object
      properties:
        cardHolderName:
          type: string
          description: Cardholder name as printed on the Card
        cardToken:
          type: string
          description: Public token of the Card
        expiryDate:
          type: string
          description: Expiry date of the Card (date of the last day of the expiry month and year)
        otp:
          type: string
          description: One-time password for wallet provisioning, 6 digits in length
      description: Card details required for wallet provisioning.
    OnboardingStageApprovalBody:
      type: object
      properties:
        comments:
          type: string
          description: Note / comment to be captured with approval
      description: Details of the onboarding stage approval.
    PayIdAccountDetails:
      type: object
      properties:
        accountNumber:
          type: string
          description: Account number, 5-9 digits in length
        branchNumber:
          type: string
          description: BSB (Bank State Branch) of Account, 6 digits in length
        ownerName:
          type: string
          description: Name of the individual or legal entity that is registered as the account holder
      description: Details of Account registered to PayID
    PayIdAvailabilityDetailsResponse:
      type: object
      properties:
        availability:
          type: boolean
          description: |-
            Indicates if the PayID is available to be registered:
             * **true**: PayID is available to be registered to an Account
             * **false**: PayID is not available to be registered to an Account
        lastResolutionDateTimeUtc:
          type: string
          description: DateTime in UTC format when the PayID was last resolved
          format: date-time
        lastUpdatedDateTimeUtc:
          type: string
          description: DateTime in UTC format when the PayID was last updated
          format: date-time
        reason:
          type: string
          description: |-
            Reason for current PayID status. Possible values:
             **CUST**: Customer initiated
             **DECD**: Customer deceased
             **FROD**: Fraud suspected
             **LEGL**: Legal reasons
             **PART**: NPP participant initiated
          enum:
            - FROD
            - CUST
            - DECD
            - LEGL
            - PART
        registrationDateTimeUtc:
          type: string
          description: DateTime in UTC format when the PayID was registered
          format: date-time
        servicer:
          type: string
          description: Where PayID is currently registered contains the Business Identifier Code (BIC11) of the financial institution with which it is registered
      description: Response for the PayID availability inquiry
    PayIdDeregisterDetailsResponse:
      type: object
      properties:
        lastUpdatedDateTimeUtc:
          type: string
          description: DateTime in UTC format when the PayID was last updated
          format: date-time
        payIdName:
          type: string
          description: A value or alias that can be assigned to this particular PayID (can assist where multiple PayIDs registered against the same Account)
        reason:
          type: string
          description: |-
            Reason for current PayID status. Possible values:
             **CUST**: Customer initiated
             **DECD**: Customer deceased
             **FROD**: Fraud suspected
             **LEGL**: Legal reasons
             **PART**: NPP participant initiated
          enum:
            - FROD
            - CUST
            - DECD
            - LEGL
            - PART
        registrationDateTimeUtc:
          type: string
          description: DateTime in UTC format when the PayID was registered
          format: date-time
      description: Response for the PayID de-registration request
    PayIdDetailsResponse:
      type: object
      properties:
        lastResolutionDateTimeUtc:
          type: string
          description: DateTime in UTC format when the PayID was last resolved
          format: date-time
        lastUpdatedDateTimeUtc:
          type: string
          description: DateTime in UTC format when the PayID was last updated
          format: date-time
        payIdName:
          type: string
          description: A value or alias that can be assigned to this particular PayID (can assist where multiple PayIDs registered against the same Account)
        payIdType:
          type: string
          description: |-
            PayID type: 
             * **EMAIL**: Email Address
             * **INDIVIDUAL_AUSTRALIAN_BUSINESS**: Australian business identifier
             * **ORGANISATION**: Organisation identifier
             * **TELEPHONE**: Telephone number
          enum:
            - EMAIL
            - TELEPHONE
            - INDIVIDUAL_AUSTRALIAN_BUSINESS
            - ORGANISATION
        payIdValue:
          type: string
          description: PayID
        reason:
          type: string
          description: |-
            Reason for current PayID status. Possible values:
             **CUST**: Customer initiated
             **DECD**: Customer deceased
             **FROD**: Fraud suspected
             **LEGL**: Legal reasons
             **PART**: NPP participant initiated
          enum:
            - FROD
            - CUST
            - DECD
            - LEGL
            - PART
        registrationDateTimeUtc:
          type: string
          description: DateTime in UTC format when the PayID was registered
          format: date-time
        status:
          type: string
          description: |-
            PayID status. Possible values:
             * **ACTIVE**: Activate PayID to allow it to be used
             * **DISABLED**: Disable PayID and prevent it from being used or transferred
             * **DEREGISTERED**: De-register PayID from current Account
             * **PORTABLE**: Place PayID in transferable state allowing it to be registered to a different Account while still being used
          enum:
            - ACTIVE
            - DEREGISTERED
            - DISABLED
            - PORTABLE
      description: Details of the PayID
    PayIdRegisterRequestBody:
      required:
        - ownerName
        - payIdName
        - payIdType
      type: object
      properties:
        ownerName:
          type: string
          description: Name of the individual or legal entity that is registered as the account holder
        payIdName:
          type: string
          description: A value or alias that can be assigned to this particular PayID (can assist where multiple PayIDs registered against the same Account)
        payIdType:
          type: string
          description: |-
            PayID type: 
             * **EMAIL**: Email Address
             * **INDIVIDUAL_AUSTRALIAN_BUSINESS**: Australian business identifier
             * **ORGANISATION**: Organisation identifier
             * **TELEPHONE**: Telephone number
          enum:
            - EMAIL
            - TELEPHONE
            - INDIVIDUAL_AUSTRALIAN_BUSINESS
            - ORGANISATION
      description: Request body for PayID registration
    PayIdResponse:
      type: object
      properties:
        accountDetails:
          $ref: '#/components/schemas/PayIdAccountDetails'
        payIdDetails:
          $ref: '#/components/schemas/PayIdDetailsResponse'
      description: Details of the PayID
    PayIdTransfer:
      required:
        - payId
        - recipientName
      type: object
      properties:
        payId:
          type: string
          description: PayID of Account receiving the transfer
        recipientName:
          maxLength: 140
          minLength: 1
          type: string
          description: Name of Account receiving the transfer
        reference:
          maxLength: 35
          minLength: 0
          type: string
          description: Reference to be included with the transfer
          deprecated: true
        senderName:
          maxLength: 140
          minLength: 0
          type: string
          description: Name of Account sending the transfer
      description: Details of a transfer to Account using PayID
    PaymentDto:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/CurrencyAmount'
        date:
          type: string
          description: The date of the payment.
          format: date
      description: Describes a payment happening on a given day.
    PaymentInstruction:
      type: object
      properties:
        amount:
          type: number
          description: The value of payment instruction amount
        creationDateTime:
          type: string
          description: DateTime in UTC format of payment instruction creation
          format: date-time
        endToEndId:
          type: string
          description: End to end payment instruction identification
        id:
          type: string
          description: Unique identifier of the payment instruction
        transactionStatus:
          type: string
          description: |-
            Transaction status specifies the status of an individual payment instruction.
            * **RECEIVED**: Message has been received, no further update on status yet. Please continue to check for updates.
            * **UNDELIVERED**: Message could not be delivered to the PayTo rails (PAG). Client should retry initiation.
            * **SENT**: Message has been sent, no acknowledgement yet received. Please continue to check for updates.
            * **STORE_AND_FORWARD**: Target institution is not available, but message will be relayed when they are back online. Please continue to check for updates.
            * **ACCEPTED_FOR_CLEARANCE**: Payment is accepted but settlement not initiated. Please continue to check for updates.
            * **SETTLEMENT_ABORTED**: Settlement could not be completed. A retry attempt will be made on behalf of the client. Please continue to check for updates.
            * **ACCEPTED_AND_SETTLED**: Settlement completed.
            * **REJECTED**: Payment could not be completed. Request could be modified and resubmitted - or if unexpected problem then please contact Shaype team for support.
            * **PENDING**: Settlement queued for handling but not complete. Please continue to check for updates
          enum:
            - RECEIVED
            - UNDELIVERED
            - SENT
            - STORE_AND_FORWARD
            - ACCEPTED_FOR_CLEARANCE
            - SETTLEMENT_ABORTED
            - ACCEPTED_AND_SETTLED
            - REJECTED
            - PENDING
        transactionStatusReasonCode:
          type: string
          description: Status Reason Information Reason Code. Reject reason code, defining the reason for the transaction status.
      description: Details of payment instruction
    PaymentInstructionSummary:
      required:
        - creationDateTime
        - instructedAmount
        - instructionIdentification
        - transactionStatus
      type: object
      properties:
        creationDateTime:
          pattern: ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.[0-9]{1,3})?(?:Z)$
          type: string
          description: Date and time at which the message was created, UTC expressed without offset, i.e. YYYY-MM-DDThh:mm:ss.sssZ
        instructedAmount:
          type: number
          description: Instructed amount
        instructionIdentification:
          pattern: ^[A-Z0-9]{4}[A-Z]{2}[A-Z0-9]{2}[A-Z0-9]{3}I[0-9]{8}00[0-9]{12}[0-9a-zA-Z]$
          type: string
          description: Payment instruction identification.
        transactionStatus:
          type: string
          description: |
            Transaction status:
            * **RECV**: Received
            * **UNDV**: Undelivered
            * **SENT**: Sent
            * **SAFD**: Store & Forward
            * **ACCP**: Accepted for clearance by Receiver
            * **ACSP**: Settlement aborted by NPP BI
            * **ACSC**: Accepted & Settled
            * **RJCT**: Rejected
          enum:
            - RECV
            - UNDV
            - SENT
            - SAFD
            - ACCP
            - ACSP
            - ACSC
            - RJCT
        transactionStatusReasonCode:
          maxLength: 4
          minLength: 1
          type: string
          description: Reject reason code, defining the reason for the transaction status
      description: Payment instruction list
    PaymentInstructionsSummaryResponseBody:
      type: object
      properties:
        paymentInstructions:
          type: array
          description: Payments instructions data.
          items:
            $ref: '#/components/schemas/PaymentInstruction'
      description: Response with payment instructions summary.
    PhoneNumber:
      required:
        - countryCodePrefix
        - numberAfterPrefix
      type: object
      properties:
        countryCodePrefix:
          type: string
          description: Country code / prefix of the phone number
        numberAfterPrefix:
          type: string
          description: Phone number following country code
      description: Phone number of the Customer
    ReissueHayCardRequestBody:
      required:
        - idempotencyKey
      type: object
      properties:
        cardType:
          type: string
          description: |-
            Type of card. Possible values:
             * **PHYSICAL**: Physical card has been issued
             * **VIRTUAL**: Card is virtual only. No physical card will be issued
            If card type is not specified, it is set to PHYSICAL by default.
          enum:
            - PHYSICAL
            - VIRTUAL
        idempotencyKey:
          type: string
          description: Unique value (UUID) used to identify this request and used to recognise any subsequent retries
          format: uuid
      description: Body of a request to re-issue a lost, stolen or damaged card for a customer. The card will be issued with the same configuration as the previous one - name on card, delivery address, phone number, design, and PIN.
    RenewCardRequestBody:
      type: object
      properties:
        cardType:
          type: string
          description: |
            Type of card to renew into. Can convert virtual to physical card at a later time:
             * **PHYSICAL** (default if not provided)
             * **VIRTUAL**
          enum:
            - PHYSICAL
            - VIRTUAL
      description: Body of a request to renew a card for a customer
    RiskLevelResponse:
      type: object
      properties:
        accountId:
          type: string
          description: Unique identifier (UUID) of the Account
          format: uuid
        riskLevel:
          type: string
          description: |-
            Account risk level. Possible values:
             * **LOW**: Account has a low risk level, operating normally using standard Product limits
             * **HIGH**: Account has a high risk level, operating at restricted capacity using applicable limits (generally prevents all outgoing funds activity
      description: 'Details of the account risk level. **Note**: Account limits associated with each of the risk levels can be set individually for each integration; below are described default settings.'
    Rule:
      type: object
      description: Contains detail of the Rule
    RuleDetails:
      type: object
      properties:
        blockedMerchantCategoryCodes:
          uniqueItems: true
          type: array
          description: 'Blocked Merchant Category Code (MCC) as four digit code as per ISO 18245 (required for Rule type: MERCHANT_CODE_BLOCK).'
          items:
            type: integer
            description: 'Blocked Merchant Category Code (MCC) as four digit code as per ISO 18245 (required for Rule type: MERCHANT_CODE_BLOCK).'
            format: int32
        blockedMerchantIds:
          uniqueItems: true
          type: array
          description: List of blocked merchant identifiers, each up to 15 alphanumeric characters (required for rule type of `MERCHANT_ID_BLOCK`).
          items:
            type: string
            description: List of blocked merchant identifiers, each up to 15 alphanumeric characters (required for rule type of `MERCHANT_ID_BLOCK`).
        blockedMerchantName:
          type: string
          description: 'Blocked merchant name (required for Rule type: MERCHANT_NAME_BLOCK).'
        merchantNameMatchingOperator:
          type: string
          description: |-
            Merchant name matching (required for Rule type: MERCHANT_NAME_BLOCK). Possible values:
             * **CONTAINS**: Merchant name contains the Rule value
             * **ENDS_WITH**: Merchant name ends with the Rule value
             * **EXACT**: Merchant name is an actual match of the Rule value
             * **STARTS_WITH**: Merchant name begins with the Rule value
          enum:
            - CONTAINS
            - ENDS_WITH
            - EXACT
            - STARTS_WITH
      description: Contains details of the Rule
    ScheduledPaymentRecipient:
      type: object
      properties:
        bpayDetails:
          $ref: '#/components/schemas/BpayDetails'
        recipientAccountNumber:
          $ref: '#/components/schemas/BasicAccountNumber'
        recipientName:
          type: string
          description: Name of Account receiving the transfer
        recipientType:
          type: string
          description: |-
            Recipient type. Possible values:
             * **ACCOUNT**: The recipient of the Scheduled Payment is an another cash Account, payment sent as cash transfer 
             * **BPAY**: The recipient of the Scheduled Payment is a BPAY Biller, payment sent as BPAY payment
          enum:
            - ACCOUNT
            - BPAY
      description: Details of the scheduled payment recipient
    SchemeLiquidity:
      required:
        - domestic
        - international
        - total
      type: object
      properties:
        domestic:
          type: number
        international:
          type: number
        total:
          type: number
    SearchAccountsRequestBody:
      required:
        - accountNumber
      type: object
      properties:
        accountNumber:
          pattern: '[\d]{5,9}'
          type: string
          description: "\tAccount number, 5-9 digits in length"
      description: Body of a request to search accounts
    SearchCustomersRequestBody:
      type: object
      properties:
        dateOfBirth:
          type: string
          description: Date of birth of the Customer in ISO format YYYY-MM-DD
          format: date
        email:
          maxLength: 2147483647
          minLength: 1
          type: string
          description: Email address of the Customer
        firstName:
          maxLength: 2147483647
          minLength: 1
          type: string
          description: First name of the Customer
        lastName:
          maxLength: 2147483647
          minLength: 1
          type: string
          description: Last name of the Customer
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumber'
        status:
          type: string
          description: |-
            Current Customer status. Possible values:
             * **ACTIVE**: Customer is active
             * **BLOCKED**: Customer is blocked
             * **INACTIVE**: Customer is not active (closed)
             * **PENDING_APPROVAL**: Customer is awaiting approval
             * **REFERRED**: Customer is referred for further KYC checks
             * **REJECTED**: Customer has been rejected
          enum:
            - ACTIVE
            - INACTIVE
            - REJECTED
            - BLOCKED
            - PENDING_APPROVAL
            - REFERRED
      description: Body of a request to search customers
    SearchTransactionsRequestBody:
      required:
        - fromDateTimeUtc
        - toDateTimeUtc
      type: object
      properties:
        accountId:
          type: string
          description: Unique identifier (UUID) of the Account
          format: uuid
        fromDateTimeUtc:
          type: string
          description: DateTime in UTC format for the start date range of the Transaction search
          format: date-time
        originChannel:
          type: string
          description: |-
            Origin source of the Transaction (only applicable if specifically used by Client). Possible values:
             * **ATM_CASH**
             * **POS_DEBIT**
             * **VENUE**
          enum:
            - ATM_CASH
            - POS_DEBIT
            - VENUE
        originId:
          type: string
          description: Additional identifier applied to Transaction related to origin of the request
          format: uuid
        originType:
          type: string
          description: |-
            Initiator origin of the Transaction. Possible values:
             * **CUSTOMER**: Transaction initiated by a customer
             * **SCHEDULED_PAYMENT**: Transaction initiated by a schedule
             * **HAAS_OPERATIONS**: Transaction initiated by Client Operations team
             * **OPERATIONS**: Transaction initiated by Shaype Operations team
             * **DIRECT_DEBIT**: Transaction initiated by Direct Debit
          enum:
            - CUSTOMER
            - SCHEDULED_PAYMENT
            - HAAS_OPERATIONS
            - OPERATIONS
            - DIRECT_DEBIT
        toDateTimeUtc:
          type: string
          description: DateTime in UTC format for the end date range of the Transaction search
          format: date-time
      description: Body of a request to search transactions
    SetScheduledPaymentInitiationAmountRequestBody:
      required:
        - amount
        - notificationId
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/CurrencyAmount'
        notificationId:
          type: string
          description: Notification identifier.
          format: uuid
      description: Body of a request to set mandate scheduled payment amount.
    Stack:
      type: object
      properties:
        accountHayId:
          type: string
          format: uuid
        balance:
          type: number
        closedAtUtc:
          type: string
          format: date-time
        createdAtUtc:
          type: string
          format: date-time
        hayId:
          type: string
          format: uuid
        imageUrl:
          type: string
        name:
          type: string
        status:
          type: string
          enum:
            - OPEN
            - CLOSED
        targetAmount:
          type: number
    StackToAccountTransferRequestBody:
      required:
        - amount
        - customerId
      type: object
      properties:
        amount:
          type: number
          description: Amount of money to be moved from a stack.
        customerId:
          type: string
          description: Customer ID to be associated with this transaction.
          format: uuid
        description:
          maxLength: 20
          minLength: 0
          type: string
          description: Description of the transaction.
      description: Body of a request to move funds from a stack to the main account.
    StackToStackTransferRequestBody:
      required:
        - amount
        - customerId
        - depositStackId
        - withdrawalStackId
      type: object
      properties:
        amount:
          type: number
          description: Value of the Transaction, to 2 decimal places
        customerId:
          type: string
          description: Unique identifier (UUID) of the Customer (initiator of the transfer)
          format: uuid
        depositStackId:
          type: string
          description: Unique identifier (UUID) of the destination Stack
          format: uuid
        description:
          maxLength: 20
          minLength: 0
          type: string
          description: Transaction description
        withdrawalStackId:
          type: string
          description: Unique identifier (UUID) of the source Stack
          format: uuid
      description: Body of a request to move funds from a stack to another stack.
    SuspendMandateRequestBody:
      type: object
      properties:
        reasonCode:
          type: string
          description: |-
            Mandate suspension reason code
            * **AC02**: Invalid Debtor account number.
            * **AC04**: Closed account number.
            * **AC05**: Closed Debtor account number.
            * **AC06**: Blocked account.
            * **AC13**: Invalid Debtor account type.
            * **AG01**: Transaction forbidden.
            * **AG03**: Transaction not supported.
            * **AM03**: Not allowed currency.
            * **AM12**: Invalid amount.
            * **AM14**: Amount exceeds agreed limit.
            * **CTAM**: Contract amended.
            * **CTCA**: Contract cancellation initiated by Debtor.
            * **CTEX**: Contract expired.
            * **MCFC**: Mandate suspended final collection.
            * **MCOC**: Mandate suspended once off collection.
            * **MD07**: End customer deceased.
            * **MD08**: No Mandate service by Agent.
            * **MD09**: No Mandate service on Customer.
            * **MD16**: Requested by Customer.
            * **MD17**: Requested by initiating party.
            * **MD20**: Mandate expired.
            * **MD21**: Mandate cancelled due to fraud.
            * **MS02**: Not specified reason Customer generated.
            * **MS03**: Not specified reason Agent generated.
            * **MSUC**: Mandate suspended after 7 consecutive unsuccessful collections.
            * **NARR**: Narrative.
            * **NOAS**: No answer from Customer.
            * **RR04**: Regulatory reason.
            * **SL01**: Specific service offered by Debtor Agent.
            * **SL11**: Creditor not on whitelist of Debtor.
            * **SL12**: Creditor on blacklist of Debtor.
          enum:
            - AC02
            - AC04
            - AC05
            - AC06
            - AC13
            - AG01
            - AG03
            - AM03
            - AM12
            - AM14
            - CTAM
            - CTCA
            - CTEX
            - MCFC
            - MCOC
            - MD07
            - MD08
            - MD09
            - MD16
            - MD17
            - MD20
            - MD21
            - MS02
            - MS03
            - MSUC
            - NARR
            - NOAS
            - RR04
            - SL01
            - SL11
            - SL12
        reasonDescription:
          type: string
          description: Mandate suspension reason description.
      description: Body of a request to suspend mandate
    TaxObligation:
      type: object
      properties:
        country:
          type: string
          description: Country as three letter code as per ISO 3166
        noTaxIdNumberReason:
          type: string
          description: |-
            Where foreign tax obligations exist but no identification number is provided. Possible values:
             * **NOT_APPLICABLE**: Not applicable in a given situation
             * **NOT_ISSUED**: Identification number not issued for Customer
             * **DISCLOSURE_NOT_REQUIRED**: Disclosure by the Customer is not required
          enum:
            - NOT_APPLICABLE
            - NOT_ISSUED
            - DISCLOSURE_NOT_REQUIRED
        taxIdNumber:
          type: string
          description: Tax identification number. Must NOT provide Australian Tax File Number (TFN) in this field.
      description: Captures any foreign (outside Australia) tax obligations for the Customer
    TransactionOutcome:
      type: object
      properties:
        outcome:
          type: string
          description: |-
            Transaction outcome. Possible values:
             * **ACCEPTED**
             * **INTERNAL_ERROR**
             * **REFUSED_ACCOUNT_BLOCKED**
             * **REFUSED_CUSTOMER_PREFERENCE**
             * **REFUSED_DAILY_TRANSFERS_OUT_LIMIT_BREACHED**
             * **REFUSED_FRAUD**
             * **REFUSED_INSUFFICIENT_FUNDS**
             * **REFUSED_INVALID_PAY_ID**
             * **REFUSED_LIMIT_BREACH**
             * **REFUSED_MAX_BALANCE_EXCEEDED**
             * **REFUSED_RECIPIENT_ACCOUNT_BLOCKED**
             * **REFUSED_ACCOUNT_CLOSED**
             * **REFUSED_RECIPIENT_ACCOUNT_CLOSED**
             * **REFUSED_TOTAL_INBOUND_DIRECT_DEBIT_DAILY_LIMIT_BREACHED**
             * **REFUSED_TOTAL_OUTBOUND_BPAY_DAILY_LIMIT_BREACHED**
             * **REFUSED_TOTAL_NET_VISA_DAILY_LIMIT_BREACHED**
             * **REFUSED_TOTAL_NON_SCHEME_DAILY_LIMIT_BREACHED**
             * **UNKNOWN**
          enum:
            - ACCEPTED
            - INTERNAL_ERROR
            - REFUSED_LIMIT_BREACH
            - REFUSED_FRAUD
            - REFUSED_CUSTOMER_PREFERENCE
            - REFUSED_INSUFFICIENT_FUNDS
            - REFUSED_ACCOUNT_BLOCKED
            - REFUSED_RECIPIENT_ACCOUNT_BLOCKED
            - REFUSED_ACCOUNT_CLOSED
            - REFUSED_RECIPIENT_ACCOUNT_CLOSED
            - REFUSED_INVALID_PAY_ID
            - UNKNOWN
            - REFUSED_DAILY_TRANSFERS_OUT_LIMIT_BREACHED
            - REFUSED_MAX_BALANCE_EXCEEDED
            - REFUSED_TOTAL_INBOUND_DIRECT_DEBIT_DAILY_LIMIT_BREACHED
            - REFUSED_TOTAL_OUTBOUND_BPAY_DAILY_LIMIT_BREACHED
            - REFUSED_TOTAL_NET_VISA_DAILY_LIMIT_BREACHED
            - REFUSED_TOTAL_NON_SCHEME_DAILY_LIMIT_BREACHED
        transactionId:
          type: string
          description: Unique identifier (UUID) of the Transaction
          format: uuid
      description: Transaction outcome details
    TransferOutRequestBody:
      required:
        - amount
        - description
        - senderCustomerHayId
        - transferType
      type: object
      properties:
        accountTransfer:
          $ref: '#/components/schemas/AccountTransfer'
        amount:
          minimum: 0
          type: number
          description: The amount to be transferred
        category:
          type: string
          description: Used to assign a category of the transfer
        description:
          maxLength: 255
          minLength: 1
          type: string
          description: Transfer description, will be seen by both sender and recipient
        idempotencyKey:
          type: string
          description: Unique value (UUID) used to identify this request and used to recognise any subsequent retries
          format: uuid
        internalTransfer:
          $ref: '#/components/schemas/InternalTransfer'
        payIdTransfer:
          $ref: '#/components/schemas/PayIdTransfer'
        reference:
          maxLength: 35
          minLength: 0
          type: string
          description: Reference to be included with the transfer
        senderCustomerHayId:
          type: string
          description: Unique identifier (UUID) of the Customer (initiator of the transfer)
          format: uuid
        transferType:
          type: string
          description: |-
            Transfer type. Possible values:
             * **ACCOUNT**: Transfer to Account using bank account details (requires accountTransfer object to be provided)
             * **INTERNAL**: Transfer to Account using AccountID, where recipient also Client's Customer with Shaype (requires internalTransfer object to be provided)
             * **PAY_ID**: Transfer to Account using PayID (requires payIdTransfer object to be provided)
          enum:
            - ACCOUNT
            - INTERNAL
            - PAY_ID
      description: Body of a request to execute a transfer
    UnblockAccountRequestBody:
      required:
        - note
      type: object
      properties:
        note:
          type: string
          description: Note or explanation for reason unblock is applied
      description: Body of a request to unblock an account
    UnblockCardRequestBody:
      required:
        - note
      type: object
      properties:
        note:
          type: string
          description: Note or explanation for reason unblock is applied
      description: '**Body of a request to unblock a card.**'
    UnblockCustomerRequestBody:
      required:
        - note
      type: object
      properties:
        note:
          type: string
          description: Note or explanation for reason unblock is applied
      description: '**Body of a request to unblock a customer.**'
    UpdateCustomerRequestBody:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        dateOfBirth:
          type: string
          description: Date of birth of the Customer in ISO format YYYY-MM-DD
          format: date
        documentData:
          $ref: '#/components/schemas/DocumentData'
        email:
          type: string
          description: Email address of the Customer
        firstName:
          type: string
          description: First name of the Customer
        gender:
          type: string
          description: |-
            Gender of the customer. Possible values:
             * **MALE**
             * **FEMALE**
             * **OTHER**
        lastName:
          type: string
          description: Last name of the Customer
        middleName:
          type: string
          description: Middle name(s) of the Customer
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumber'
        preferredName:
          type: string
          description: Preferred name of the Customer
      description: Describes the changes to be applied to Customer record. Only the provided information will be updated. Address and Phone Number will be replaced as a whole (no partial updates are possible).
    UpdateGroupRequestBody:
      type: object
      properties:
        businessIdentifiers:
          $ref: '#/components/schemas/BusinessIdentifiers'
        groupName:
          maxLength: 100
          minLength: 1
          type: string
          description: Name of the Group
        groupType:
          type: string
          description: |-
            Group type. Possible values:
             * **BUSINESS**: Non-individual / joint entity
             * **PERSONAL**: Joint account entity (default if no option selected)
          enum:
            - PERSONAL
            - BUSINESS
      description: Describes the changes to be applied to Group record. Only the provided information will be updated. Business identifiers will be replaced as a whole (no partial updates are possible).
    UpdateMaxBalanceLimitRequestBody:
      required:
        - maxBalanceLimit
      type: object
      properties:
        maxBalanceLimit:
          type: number
          description: The new maximum balance limit to apply on Account, cannot exceed maximum balance limit applied to the Product. Positive value to 2 decimal places.
      description: Body of a request to update maximum balance limit for an account
    UpdateOverdraftLimitRequestBody:
      required:
        - overdraftLimit
      type: object
      properties:
        overdraftLimit:
          type: number
          description: The new overdraft limit to apply on Account, cannot exceed overdraft limit applied to the Product. Positive value to 2 decimal places.
      description: Body of a request to update overdraft limit for an account
    UpdatePayIdDetailsRequestBody:
      required:
        - payIdType
      type: object
      properties:
        ownerName:
          type: string
          description: Name of the individual or legal entity that is registered as the account holder
        payIdName:
          type: string
          description: A value or alias that can be assigned to this particular PayID (can assist where multiple PayIDs registered against the same Account)
        payIdType:
          type: string
          description: |-
            PayID type: 
             * **EMAIL**: Email Address
             * **INDIVIDUAL_AUSTRALIAN_BUSINESS**: Australian business identifier
             * **ORGANISATION**: Organisation identifier
             * **TELEPHONE**: Telephone number
          enum:
            - EMAIL
            - TELEPHONE
            - INDIVIDUAL_AUSTRALIAN_BUSINESS
            - ORGANISATION
      description: Request body for PayID details update
    UpdatePayIdStatusRequestBody:
      required:
        - payIdStatus
        - payIdType
      type: object
      properties:
        payIdStatus:
          type: string
          description: |-
            Updated PayID status. Possible values:
             * **ACTIVE**: Activate PayID to allow it to be used
             * **DISABLED**: Disable PayID and prevent it from being used or transferred
             * **DEREGISTERED**: De-register PayID from current Account
             * **PORTABLE**: Place PayID in transferable state allowing it to be registered to a different Account while still being used
          enum:
            - ACTIVE
            - DEREGISTERED
            - DISABLED
            - PORTABLE
        payIdType:
          type: string
          description: |-
            PayID type: 
             * **EMAIL**: Email Address
             * **INDIVIDUAL_AUSTRALIAN_BUSINESS**: Australian business identifier
             * **ORGANISATION**: Organisation identifier
             * **TELEPHONE**: Telephone number
          enum:
            - EMAIL
            - TELEPHONE
            - INDIVIDUAL_AUSTRALIAN_BUSINESS
            - ORGANISATION
        reason:
          type: string
          description: |-
            Reason for current PayID status. Possible values:
             **CUST**: Customer initiated
             **DECD**: Customer deceased
             **FROD**: Fraud suspected
             **LEGL**: Legal reasons
             **PART**: NPP participant initiated
          enum:
            - FROD
            - CUST
            - DECD
            - LEGL
            - PART
      description: Request body for PayID status update
    UpdatePaymentPreferencesRequestBody:
      type: object
      properties:
        cardEnabled:
          type: boolean
          description: |-
            Physical card enablement status:
             * **true**: enabled (unfrozen), allows physical card usage (default)
             * **false**: disabled (frozen), prevents all physical card usage
        cardNotPresentEnabled:
          type: boolean
          description: |-
            Online card not present payment enablement status:
             * **true**: enabled
             * **false**: disabled (default)
        cashWithdrawalEnabled:
          type: boolean
          description: |-
            ATM cash withdrawal enablement status:
             * **true**: enabled
             * **false**: disabled (default)
        contactlessEnabled:
          type: boolean
          description: |-
            Physical card contactless payment enablement status:
             * **true**: enabled
             * **false**: disabled (default)
        magneticStripeEnabled:
          type: boolean
          description: |-
            Physical card magnetic stripe payment enablement status:
             * **true**: enabled
             * **false**: disabled (default)
        mobileWalletPaymentsEnabled:
          type: boolean
          description: |-
            Mobile wallet card payment enablement status:
             * **true**: enabled (default)
             * **false**: disabled
      description: Payment preferences to be applied to the card. Only provided, non-null values will be modified.
    UpdateStackRequestBody:
      type: object
      properties:
        imageUrl:
          type: string
          description: URL of image representing the Stack goal embedded in app
        name:
          maxLength: 20
          minLength: 1
          type: string
          description: Name of the Stack
        targetAmount:
          minimum: 0
          type: number
          description: Target balance value set on Stack
      description: Body of a request to update a stack.
    UpdateStackResponse:
      type: object
      properties:
        error:
          type: string
          enum:
            - OPEN_STACKS_LIMIT_REACHED
            - TOTAL_STACKS_LIMIT_REACHED
            - STACK_NAME_ALREADY_IN_USE
        stack:
          $ref: '#/components/schemas/Stack'
    UpdateThresholdRequestBody:
      type: object
      properties:
        active:
          type: boolean
          description: Determines whether the threshold is active. If set to **false**,the threshold will not be checked and won't raise an alert in case of a breach.
        amount:
          minimum: 1
          type: number
          description: Relative percentage value for the threshold. Required if `percental` is set to **true**.
        percent:
          maximum: 100
          minimum: 1
          type: integer
          description: Relative percentage value for the threshold. Required if `percental` is set to **true**.
          format: int32
        percental:
          type: boolean
          description: |-
            Calculation method for the threshold:
             * **true**: Threshold is set as a percentage of corresponding limit. When set to **true**, the `percent` field needs to be set.
             * **false**: Threshold is set as an absolute value. When set to **false**, the `amount` field needs to be set.
      description: Body of a request to update a liquidity threshold alert.
  securitySchemes:
    bearer-key:
      bearerFormat: JWT
      scheme: bearer
      type: http
x-readme:
  proxy-enabled: true
